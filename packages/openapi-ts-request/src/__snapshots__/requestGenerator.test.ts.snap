// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`RequestGenerator > compare createZodDecorator false getFullText 1`] = `
"import type { newPet } from "./newPetZod";
import { request } from "./newRequest";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class NewPetAPI {
    /**
     *
     * @summary summary
     * @description
     * @UUID test
     */
    newtestPost(bodyParams: newPet.TestPostBodyParams): Promise<[newPet.TestPostErrorResponse, newPet.TestPostResponse]> {
        return request({
            method: 'post',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testput
     */
    newtestPut(bodyParams: newPet.TestPutBodyParams): Promise<[newPet.TestPutErrorResponse, newPet.TestPutResponse]> {
        return request({
            method: 'put',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testdelete
     */
    newdelByTest(bodyParams: newPet.DelByTestBodyParams): Promise<[newPet.DelByTestErrorResponse, newPet.DelByTestResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID test-idget
     */
    newtestIdGet(queryParams: newPet.TestIdGetQueryParams, testId: newPet.TestIdGetPathParams['testId']): Promise<[newPet.TestIdGetErrorResponse, newPet.TestIdGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/test/\${testId}\`,
            params: queryParams,
            paramsSerializer(params: newPet.TestIdGetQueryParams) {
                return qs.stringify(params);
            }
        })
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    newuploadImagePost(bodyParams: newPet.UploadImagePostBodyParams, petId: newPet.UploadImagePostPathParams['petId']): Promise<[newPet.UploadImagePostErrorResponse, newPet.UploadImagePostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     * @UUID addPet
     */
    newcreate(bodyParams: newPet.CreateBodyParams): Promise<[newPet.CreateErrorResponse, newPet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     * @UUID updatePet
     */
    newupdate(bodyParams: newPet.UpdateBodyParams): Promise<[newPet.UpdateErrorResponse, newPet.UpdateResponse]> {
        return request({
            method: 'put',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    newfindByStatusGet(queryParams: newPet.FindByStatusGetQueryParams): Promise<[newPet.FindByStatusGetErrorResponse, newPet.FindByStatusGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByStatus\`,
            params: queryParams,
            paramsSerializer(params: newPet.FindByStatusGetQueryParams) {
                return qs.stringify(params);
            }
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    newfindByTagsGet(queryParams: newPet.FindByTagsGetQueryParams): Promise<[newPet.FindByTagsGetErrorResponse, newPet.FindByTagsGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByTags\`,
            params: queryParams,
            paramsSerializer(params: newPet.FindByTagsGetQueryParams) {
                return qs.stringify(params);
            }
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    newfindByPetId(petId: newPet.FindByPetIdPathParams['petId']): Promise<[newPet.FindByPetIdErrorResponse, newPet.FindByPetIdResponse]> {
        return request({
            method: 'get',
            url: \`/pet/\${petId}\`
        })
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     * @UUID updatePetWithForm
     */
    newpetIdPost(bodyParams: newPet.PetIdPostBodyParams, petId: newPet.PetIdPostPathParams['petId']): Promise<[newPet.PetIdPostErrorResponse, newPet.PetIdPostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     * @UUID deletePet
     */
    newdelByPetId(petId: newPet.DelByPetIdPathParams['petId']): Promise<[newPet.DelByPetIdErrorResponse, newPet.DelByPetIdResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/\${petId}\`
        })
    }
}

export const newPetAPI = new NewPetAPI;

import type { newPet } from "./newPet";
import { request } from "@/api/request";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     *
     * @summary Place an order for a pet
     * @description
     * @UUID placeOrder
     */
    create(bodyParams: newPet.CreateBodyParams): Promise<[newPet.CreateErrorResponse, newPet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/store/order\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    findByOrderId(orderId: newPet.FindByOrderIdPathParams['orderId']): Promise<[newPet.FindByOrderIdErrorResponse, newPet.FindByOrderIdResponse]> {
        return request({
            method: 'get',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    delByOrderId(orderId: newPet.DelByOrderIdPathParams['orderId']): Promise<[newPet.DelByOrderIdErrorResponse, newPet.DelByOrderIdResponse]> {
        return request({
            method: 'delete',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    inventoryGet(): Promise<[newPet.InventoryGetErrorResponse, newPet.InventoryGetResponse]> {
        return request({
            method: 'get',
            url: \`/store/inventory\`
        })
    }
}

export const storeAPI = new StoreAPI;

import type { newPet } from "./newPet";
import { request } from "@/api/request";

/**
 *
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithArrayInput
     */
    createWithArrayPost(bodyParams: newPet.CreateWithArrayPostBodyParams): Promise<[newPet.CreateWithArrayPostErrorResponse, newPet.CreateWithArrayPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithArray\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithListInput
     */
    createWithListPost(bodyParams: newPet.CreateWithListPostBodyParams): Promise<[newPet.CreateWithListPostErrorResponse, newPet.CreateWithListPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithList\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Get user by user name
     * @description
     * @UUID getUserByName
     */
    findByUsername(username: newPet.FindByUsernamePathParams['username']): Promise<[newPet.FindByUsernameErrorResponse, newPet.FindByUsernameResponse]> {
        return request({
            method: 'get',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    usernamePut(bodyParams: newPet.UsernamePutBodyParams, username: newPet.UsernamePutPathParams['username']): Promise<[newPet.UsernamePutErrorResponse, newPet.UsernamePutResponse]> {
        return request({
            method: 'put',
            url: \`/user/\${username}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    delByUsername(username: newPet.DelByUsernamePathParams['username']): Promise<[newPet.DelByUsernameErrorResponse, newPet.DelByUsernameResponse]> {
        return request({
            method: 'delete',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     * @UUID loginUser
     */
    loginGet(queryParams: newPet.LoginGetQueryParams): Promise<[newPet.LoginGetErrorResponse, newPet.LoginGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/login\`,
            params: queryParams
        })
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     * @UUID logoutUser
     */
    logoutGet(): Promise<[newPet.LogoutGetErrorResponse, newPet.LogoutGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/logout\`
        })
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    create(bodyParams: newPet.CreateBodyParams): Promise<[newPet.CreateErrorResponse, newPet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/user\`,
            data: bodyParams
        })
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > compare createZodDecorator true getFullText 1`] = `
"import { newPetZod } from "./newPetZod";
import type { newPet } from "./newPetZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "./newZod";
import { request } from "./newRequest";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class NewPetAPI {
    /**
     *
     * @summary summary
     * @description
     * @UUID test
     */
    @zodValidate
    @responseZodSchema(newPetZod.testPostResponse)
    newtestPost(@paramsZodSchema(newPetZod.testPostBodyParams) bodyParams: newPet.TestPostBodyParams): Promise<[newPet.TestPostErrorResponse, newPet.TestPostResponse]> {
        return request({
            method: 'post',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testput
     */
    @zodValidate
    @responseZodSchema(newPetZod.testPutResponse)
    newtestPut(@paramsZodSchema(newPetZod.testPutBodyParams) bodyParams: newPet.TestPutBodyParams): Promise<[newPet.TestPutErrorResponse, newPet.TestPutResponse]> {
        return request({
            method: 'put',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testdelete
     */
    @zodValidate
    @responseZodSchema(newPetZod.delByTestResponse)
    newdelByTest(@paramsZodSchema(newPetZod.delByTestBodyParams) bodyParams: newPet.DelByTestBodyParams): Promise<[newPet.DelByTestErrorResponse, newPet.DelByTestResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID test-idget
     */
    @zodValidate
    @responseZodSchema(newPetZod.testIdGetResponse)
    newtestIdGet(@paramsZodSchema(newPetZod.testIdGetQueryParams) queryParams: newPet.TestIdGetQueryParams, @paramsZodSchema(newPetZod.testIdGetPathParams.shape.testId) testId: newPet.TestIdGetPathParams['testId']): Promise<[newPet.TestIdGetErrorResponse, newPet.TestIdGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/test/\${testId}\`,
            params: queryParams,
            paramsSerializer(params: newPet.TestIdGetQueryParams) {
                return qs.stringify(params);
            }
        })
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    @zodValidate
    @responseZodSchema(newPetZod.uploadImagePostResponse)
    newuploadImagePost(@paramsZodSchema(newPetZod.uploadImagePostBodyParams) bodyParams: newPet.UploadImagePostBodyParams, @paramsZodSchema(newPetZod.uploadImagePostPathParams.shape.petId) petId: newPet.UploadImagePostPathParams['petId']): Promise<[newPet.UploadImagePostErrorResponse, newPet.UploadImagePostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     * @UUID addPet
     */
    @zodValidate
    @responseZodSchema(newPetZod.createResponse)
    newcreate(@paramsZodSchema(newPetZod.createBodyParams) bodyParams: newPet.CreateBodyParams): Promise<[newPet.CreateErrorResponse, newPet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     * @UUID updatePet
     */
    @zodValidate
    @responseZodSchema(newPetZod.updateResponse)
    newupdate(@paramsZodSchema(newPetZod.updateBodyParams) bodyParams: newPet.UpdateBodyParams): Promise<[newPet.UpdateErrorResponse, newPet.UpdateResponse]> {
        return request({
            method: 'put',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    @zodValidate
    @responseZodSchema(newPetZod.findByStatusGetResponse)
    newfindByStatusGet(@paramsZodSchema(newPetZod.findByStatusGetQueryParams) queryParams: newPet.FindByStatusGetQueryParams): Promise<[newPet.FindByStatusGetErrorResponse, newPet.FindByStatusGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByStatus\`,
            params: queryParams,
            paramsSerializer(params: newPet.FindByStatusGetQueryParams) {
                return qs.stringify(params);
            }
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    @zodValidate
    @responseZodSchema(newPetZod.findByTagsGetResponse)
    newfindByTagsGet(@paramsZodSchema(newPetZod.findByTagsGetQueryParams) queryParams: newPet.FindByTagsGetQueryParams): Promise<[newPet.FindByTagsGetErrorResponse, newPet.FindByTagsGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByTags\`,
            params: queryParams,
            paramsSerializer(params: newPet.FindByTagsGetQueryParams) {
                return qs.stringify(params);
            }
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    @zodValidate
    @responseZodSchema(newPetZod.findByPetIdResponse)
    newfindByPetId(@paramsZodSchema(newPetZod.findByPetIdPathParams.shape.petId) petId: newPet.FindByPetIdPathParams['petId']): Promise<[newPet.FindByPetIdErrorResponse, newPet.FindByPetIdResponse]> {
        return request({
            method: 'get',
            url: \`/pet/\${petId}\`
        })
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     * @UUID updatePetWithForm
     */
    @zodValidate
    @responseZodSchema(newPetZod.petIdPostResponse)
    newpetIdPost(@paramsZodSchema(newPetZod.petIdPostBodyParams) bodyParams: newPet.PetIdPostBodyParams, @paramsZodSchema(newPetZod.petIdPostPathParams.shape.petId) petId: newPet.PetIdPostPathParams['petId']): Promise<[newPet.PetIdPostErrorResponse, newPet.PetIdPostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     * @UUID deletePet
     */
    @zodValidate
    @responseZodSchema(newPetZod.delByPetIdResponse)
    newdelByPetId(@paramsZodSchema(newPetZod.delByPetIdPathParams.shape.petId) petId: newPet.DelByPetIdPathParams['petId']): Promise<[newPet.DelByPetIdErrorResponse, newPet.DelByPetIdResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/\${petId}\`
        })
    }
}

export const newPetAPI = new NewPetAPI;

import { newPetZod } from "./newPetZod";
import type { newPet } from "./newPetZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { request } from "@/api/request";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     *
     * @summary Place an order for a pet
     * @description
     * @UUID placeOrder
     */
    @zodValidate
    @responseZodSchema(newPetZod.createResponse)
    create(@paramsZodSchema(newPetZod.createBodyParams) bodyParams: newPet.CreateBodyParams): Promise<[newPet.CreateErrorResponse, newPet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/store/order\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    @zodValidate
    @responseZodSchema(newPetZod.findByOrderIdResponse)
    findByOrderId(@paramsZodSchema(newPetZod.findByOrderIdPathParams.shape.orderId) orderId: newPet.FindByOrderIdPathParams['orderId']): Promise<[newPet.FindByOrderIdErrorResponse, newPet.FindByOrderIdResponse]> {
        return request({
            method: 'get',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    @zodValidate
    @responseZodSchema(newPetZod.delByOrderIdResponse)
    delByOrderId(@paramsZodSchema(newPetZod.delByOrderIdPathParams.shape.orderId) orderId: newPet.DelByOrderIdPathParams['orderId']): Promise<[newPet.DelByOrderIdErrorResponse, newPet.DelByOrderIdResponse]> {
        return request({
            method: 'delete',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    @zodValidate
    @responseZodSchema(newPetZod.inventoryGetResponse)
    inventoryGet(): Promise<[newPet.InventoryGetErrorResponse, newPet.InventoryGetResponse]> {
        return request({
            method: 'get',
            url: \`/store/inventory\`
        })
    }
}

export const storeAPI = new StoreAPI;

import { newPetZod } from "./newPetZod";
import type { newPet } from "./newPetZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { request } from "@/api/request";

/**
 *
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithArrayInput
     */
    @zodValidate
    @responseZodSchema(newPetZod.createWithArrayPostResponse)
    createWithArrayPost(@paramsZodSchema(newPetZod.createWithArrayPostBodyParams) bodyParams: newPet.CreateWithArrayPostBodyParams): Promise<[newPet.CreateWithArrayPostErrorResponse, newPet.CreateWithArrayPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithArray\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithListInput
     */
    @zodValidate
    @responseZodSchema(newPetZod.createWithListPostResponse)
    createWithListPost(@paramsZodSchema(newPetZod.createWithListPostBodyParams) bodyParams: newPet.CreateWithListPostBodyParams): Promise<[newPet.CreateWithListPostErrorResponse, newPet.CreateWithListPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithList\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Get user by user name
     * @description
     * @UUID getUserByName
     */
    @zodValidate
    @responseZodSchema(newPetZod.findByUsernameResponse)
    findByUsername(@paramsZodSchema(newPetZod.findByUsernamePathParams.shape.username) username: newPet.FindByUsernamePathParams['username']): Promise<[newPet.FindByUsernameErrorResponse, newPet.FindByUsernameResponse]> {
        return request({
            method: 'get',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    @zodValidate
    @responseZodSchema(newPetZod.usernamePutResponse)
    usernamePut(@paramsZodSchema(newPetZod.usernamePutBodyParams) bodyParams: newPet.UsernamePutBodyParams, @paramsZodSchema(newPetZod.usernamePutPathParams.shape.username) username: newPet.UsernamePutPathParams['username']): Promise<[newPet.UsernamePutErrorResponse, newPet.UsernamePutResponse]> {
        return request({
            method: 'put',
            url: \`/user/\${username}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    @zodValidate
    @responseZodSchema(newPetZod.delByUsernameResponse)
    delByUsername(@paramsZodSchema(newPetZod.delByUsernamePathParams.shape.username) username: newPet.DelByUsernamePathParams['username']): Promise<[newPet.DelByUsernameErrorResponse, newPet.DelByUsernameResponse]> {
        return request({
            method: 'delete',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     * @UUID loginUser
     */
    @zodValidate
    @responseZodSchema(newPetZod.loginGetResponse)
    loginGet(@paramsZodSchema(newPetZod.loginGetQueryParams) queryParams: newPet.LoginGetQueryParams): Promise<[newPet.LoginGetErrorResponse, newPet.LoginGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/login\`,
            params: queryParams
        })
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     * @UUID logoutUser
     */
    @zodValidate
    @responseZodSchema(newPetZod.logoutGetResponse)
    logoutGet(): Promise<[newPet.LogoutGetErrorResponse, newPet.LogoutGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/logout\`
        })
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    @zodValidate
    @responseZodSchema(newPetZod.createResponse)
    create(@paramsZodSchema(newPetZod.createBodyParams) bodyParams: newPet.CreateBodyParams): Promise<[newPet.CreateErrorResponse, newPet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/user\`,
            data: bodyParams
        })
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > createZodDecorator false getFullText 1`] = `
"import type { Pet } from "./Pet";
import { request } from "@/api/request";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class PetAPI {
    /**
     *
     * @summary summary
     * @description
     * @UUID test
     */
    testPost(bodyParams: Pet.TestPostBodyParams): Promise<[Pet.TestPostErrorResponse, Pet.TestPostResponse]> {
        return request({
            method: 'post',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testput
     */
    testPut(bodyParams: Pet.TestPutBodyParams): Promise<[Pet.TestPutErrorResponse, Pet.TestPutResponse]> {
        return request({
            method: 'put',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testdelete
     */
    delByTest(bodyParams: Pet.DelByTestBodyParams): Promise<[Pet.DelByTestErrorResponse, Pet.DelByTestResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID test-idget
     */
    testIdGet(queryParams: Pet.TestIdGetQueryParams, testId: Pet.TestIdGetPathParams['testId']): Promise<[Pet.TestIdGetErrorResponse, Pet.TestIdGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/test/\${testId}\`,
            params: queryParams,
            paramsSerializer(params: Pet.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    uploadImagePost(bodyParams: Pet.UploadImagePostBodyParams, petId: Pet.UploadImagePostPathParams['petId']): Promise<[Pet.UploadImagePostErrorResponse, Pet.UploadImagePostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     * @UUID addPet
     */
    create(bodyParams: Pet.CreateBodyParams): Promise<[Pet.CreateErrorResponse, Pet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     * @UUID updatePet
     */
    update(bodyParams: Pet.UpdateBodyParams): Promise<[Pet.UpdateErrorResponse, Pet.UpdateResponse]> {
        return request({
            method: 'put',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    findByStatusGet(queryParams: Pet.FindByStatusGetQueryParams): Promise<[Pet.FindByStatusGetErrorResponse, Pet.FindByStatusGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByStatus\`,
            params: queryParams,
            paramsSerializer(params: Pet.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    findByTagsGet(queryParams: Pet.FindByTagsGetQueryParams): Promise<[Pet.FindByTagsGetErrorResponse, Pet.FindByTagsGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByTags\`,
            params: queryParams,
            paramsSerializer(params: Pet.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    findByPetId(petId: Pet.FindByPetIdPathParams['petId']): Promise<[Pet.FindByPetIdErrorResponse, Pet.FindByPetIdResponse]> {
        return request({
            method: 'get',
            url: \`/pet/\${petId}\`
        })
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     * @UUID updatePetWithForm
     */
    petIdPost(bodyParams: Pet.PetIdPostBodyParams, petId: Pet.PetIdPostPathParams['petId']): Promise<[Pet.PetIdPostErrorResponse, Pet.PetIdPostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     * @UUID deletePet
     */
    delByPetId(petId: Pet.DelByPetIdPathParams['petId']): Promise<[Pet.DelByPetIdErrorResponse, Pet.DelByPetIdResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/\${petId}\`
        })
    }
}

export const petAPI = new PetAPI;

import type { Store } from "./Store";
import { request } from "@/api/request";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     *
     * @summary Place an order for a pet
     * @description
     * @UUID placeOrder
     */
    create(bodyParams: Store.CreateBodyParams): Promise<[Store.CreateErrorResponse, Store.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/store/order\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    findByOrderId(orderId: Store.FindByOrderIdPathParams['orderId']): Promise<[Store.FindByOrderIdErrorResponse, Store.FindByOrderIdResponse]> {
        return request({
            method: 'get',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    delByOrderId(orderId: Store.DelByOrderIdPathParams['orderId']): Promise<[Store.DelByOrderIdErrorResponse, Store.DelByOrderIdResponse]> {
        return request({
            method: 'delete',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    inventoryGet(): Promise<[Store.InventoryGetErrorResponse, Store.InventoryGetResponse]> {
        return request({
            method: 'get',
            url: \`/store/inventory\`
        })
    }
}

export const storeAPI = new StoreAPI;

import type { User } from "./User";
import { request } from "@/api/request";

/**
 *
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithArrayInput
     */
    createWithArrayPost(bodyParams: User.CreateWithArrayPostBodyParams): Promise<[User.CreateWithArrayPostErrorResponse, User.CreateWithArrayPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithArray\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithListInput
     */
    createWithListPost(bodyParams: User.CreateWithListPostBodyParams): Promise<[User.CreateWithListPostErrorResponse, User.CreateWithListPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithList\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Get user by user name
     * @description
     * @UUID getUserByName
     */
    findByUsername(username: User.FindByUsernamePathParams['username']): Promise<[User.FindByUsernameErrorResponse, User.FindByUsernameResponse]> {
        return request({
            method: 'get',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    usernamePut(bodyParams: User.UsernamePutBodyParams, username: User.UsernamePutPathParams['username']): Promise<[User.UsernamePutErrorResponse, User.UsernamePutResponse]> {
        return request({
            method: 'put',
            url: \`/user/\${username}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    delByUsername(username: User.DelByUsernamePathParams['username']): Promise<[User.DelByUsernameErrorResponse, User.DelByUsernameResponse]> {
        return request({
            method: 'delete',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     * @UUID loginUser
     */
    loginGet(queryParams: User.LoginGetQueryParams): Promise<[User.LoginGetErrorResponse, User.LoginGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/login\`,
            params: queryParams
        })
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     * @UUID logoutUser
     */
    logoutGet(): Promise<[User.LogoutGetErrorResponse, User.LogoutGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/logout\`
        })
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    create(bodyParams: User.CreateBodyParams): Promise<[User.CreateErrorResponse, User.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/user\`,
            data: bodyParams
        })
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > createZodDecorator true getFullText 1`] = `
"import { petZod } from "./petZod";
import type { Pet } from "./petZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { request } from "@/api/request";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class PetAPI {
    /**
     *
     * @summary summary
     * @description
     * @UUID test
     */
    @zodValidate
    @responseZodSchema(petZod.testPostResponse)
    testPost(@paramsZodSchema(petZod.testPostBodyParams) bodyParams: Pet.TestPostBodyParams): Promise<[Pet.TestPostErrorResponse, Pet.TestPostResponse]> {
        return request({
            method: 'post',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testput
     */
    @zodValidate
    @responseZodSchema(petZod.testPutResponse)
    testPut(@paramsZodSchema(petZod.testPutBodyParams) bodyParams: Pet.TestPutBodyParams): Promise<[Pet.TestPutErrorResponse, Pet.TestPutResponse]> {
        return request({
            method: 'put',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testdelete
     */
    @zodValidate
    @responseZodSchema(petZod.delByTestResponse)
    delByTest(@paramsZodSchema(petZod.delByTestBodyParams) bodyParams: Pet.DelByTestBodyParams): Promise<[Pet.DelByTestErrorResponse, Pet.DelByTestResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID test-idget
     */
    @zodValidate
    @responseZodSchema(petZod.testIdGetResponse)
    testIdGet(@paramsZodSchema(petZod.testIdGetQueryParams) queryParams: Pet.TestIdGetQueryParams, @paramsZodSchema(petZod.testIdGetPathParams.shape.testId) testId: Pet.TestIdGetPathParams['testId']): Promise<[Pet.TestIdGetErrorResponse, Pet.TestIdGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/test/\${testId}\`,
            params: queryParams,
            paramsSerializer(params: Pet.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    @zodValidate
    @responseZodSchema(petZod.uploadImagePostResponse)
    uploadImagePost(@paramsZodSchema(petZod.uploadImagePostBodyParams) bodyParams: Pet.UploadImagePostBodyParams, @paramsZodSchema(petZod.uploadImagePostPathParams.shape.petId) petId: Pet.UploadImagePostPathParams['petId']): Promise<[Pet.UploadImagePostErrorResponse, Pet.UploadImagePostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     * @UUID addPet
     */
    @zodValidate
    @responseZodSchema(petZod.createResponse)
    create(@paramsZodSchema(petZod.createBodyParams) bodyParams: Pet.CreateBodyParams): Promise<[Pet.CreateErrorResponse, Pet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     * @UUID updatePet
     */
    @zodValidate
    @responseZodSchema(petZod.updateResponse)
    update(@paramsZodSchema(petZod.updateBodyParams) bodyParams: Pet.UpdateBodyParams): Promise<[Pet.UpdateErrorResponse, Pet.UpdateResponse]> {
        return request({
            method: 'put',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    @zodValidate
    @responseZodSchema(petZod.findByStatusGetResponse)
    findByStatusGet(@paramsZodSchema(petZod.findByStatusGetQueryParams) queryParams: Pet.FindByStatusGetQueryParams): Promise<[Pet.FindByStatusGetErrorResponse, Pet.FindByStatusGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByStatus\`,
            params: queryParams,
            paramsSerializer(params: Pet.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    @zodValidate
    @responseZodSchema(petZod.findByTagsGetResponse)
    findByTagsGet(@paramsZodSchema(petZod.findByTagsGetQueryParams) queryParams: Pet.FindByTagsGetQueryParams): Promise<[Pet.FindByTagsGetErrorResponse, Pet.FindByTagsGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByTags\`,
            params: queryParams,
            paramsSerializer(params: Pet.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    @zodValidate
    @responseZodSchema(petZod.findByPetIdResponse)
    findByPetId(@paramsZodSchema(petZod.findByPetIdPathParams.shape.petId) petId: Pet.FindByPetIdPathParams['petId']): Promise<[Pet.FindByPetIdErrorResponse, Pet.FindByPetIdResponse]> {
        return request({
            method: 'get',
            url: \`/pet/\${petId}\`
        })
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     * @UUID updatePetWithForm
     */
    @zodValidate
    @responseZodSchema(petZod.petIdPostResponse)
    petIdPost(@paramsZodSchema(petZod.petIdPostBodyParams) bodyParams: Pet.PetIdPostBodyParams, @paramsZodSchema(petZod.petIdPostPathParams.shape.petId) petId: Pet.PetIdPostPathParams['petId']): Promise<[Pet.PetIdPostErrorResponse, Pet.PetIdPostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     * @UUID deletePet
     */
    @zodValidate
    @responseZodSchema(petZod.delByPetIdResponse)
    delByPetId(@paramsZodSchema(petZod.delByPetIdPathParams.shape.petId) petId: Pet.DelByPetIdPathParams['petId']): Promise<[Pet.DelByPetIdErrorResponse, Pet.DelByPetIdResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/\${petId}\`
        })
    }
}

export const petAPI = new PetAPI;

import { storeZod } from "./storeZod";
import type { Store } from "./storeZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { request } from "@/api/request";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     *
     * @summary Place an order for a pet
     * @description
     * @UUID placeOrder
     */
    @zodValidate
    @responseZodSchema(storeZod.createResponse)
    create(@paramsZodSchema(storeZod.createBodyParams) bodyParams: Store.CreateBodyParams): Promise<[Store.CreateErrorResponse, Store.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/store/order\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    @zodValidate
    @responseZodSchema(storeZod.findByOrderIdResponse)
    findByOrderId(@paramsZodSchema(storeZod.findByOrderIdPathParams.shape.orderId) orderId: Store.FindByOrderIdPathParams['orderId']): Promise<[Store.FindByOrderIdErrorResponse, Store.FindByOrderIdResponse]> {
        return request({
            method: 'get',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    @zodValidate
    @responseZodSchema(storeZod.delByOrderIdResponse)
    delByOrderId(@paramsZodSchema(storeZod.delByOrderIdPathParams.shape.orderId) orderId: Store.DelByOrderIdPathParams['orderId']): Promise<[Store.DelByOrderIdErrorResponse, Store.DelByOrderIdResponse]> {
        return request({
            method: 'delete',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    @zodValidate
    @responseZodSchema(storeZod.inventoryGetResponse)
    inventoryGet(): Promise<[Store.InventoryGetErrorResponse, Store.InventoryGetResponse]> {
        return request({
            method: 'get',
            url: \`/store/inventory\`
        })
    }
}

export const storeAPI = new StoreAPI;

import { userZod } from "./userZod";
import type { User } from "./userZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { request } from "@/api/request";

/**
 *
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithArrayInput
     */
    @zodValidate
    @responseZodSchema(userZod.createWithArrayPostResponse)
    createWithArrayPost(@paramsZodSchema(userZod.createWithArrayPostBodyParams) bodyParams: User.CreateWithArrayPostBodyParams): Promise<[User.CreateWithArrayPostErrorResponse, User.CreateWithArrayPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithArray\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithListInput
     */
    @zodValidate
    @responseZodSchema(userZod.createWithListPostResponse)
    createWithListPost(@paramsZodSchema(userZod.createWithListPostBodyParams) bodyParams: User.CreateWithListPostBodyParams): Promise<[User.CreateWithListPostErrorResponse, User.CreateWithListPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithList\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Get user by user name
     * @description
     * @UUID getUserByName
     */
    @zodValidate
    @responseZodSchema(userZod.findByUsernameResponse)
    findByUsername(@paramsZodSchema(userZod.findByUsernamePathParams.shape.username) username: User.FindByUsernamePathParams['username']): Promise<[User.FindByUsernameErrorResponse, User.FindByUsernameResponse]> {
        return request({
            method: 'get',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    @zodValidate
    @responseZodSchema(userZod.usernamePutResponse)
    usernamePut(@paramsZodSchema(userZod.usernamePutBodyParams) bodyParams: User.UsernamePutBodyParams, @paramsZodSchema(userZod.usernamePutPathParams.shape.username) username: User.UsernamePutPathParams['username']): Promise<[User.UsernamePutErrorResponse, User.UsernamePutResponse]> {
        return request({
            method: 'put',
            url: \`/user/\${username}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    @zodValidate
    @responseZodSchema(userZod.delByUsernameResponse)
    delByUsername(@paramsZodSchema(userZod.delByUsernamePathParams.shape.username) username: User.DelByUsernamePathParams['username']): Promise<[User.DelByUsernameErrorResponse, User.DelByUsernameResponse]> {
        return request({
            method: 'delete',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     * @UUID loginUser
     */
    @zodValidate
    @responseZodSchema(userZod.loginGetResponse)
    loginGet(@paramsZodSchema(userZod.loginGetQueryParams) queryParams: User.LoginGetQueryParams): Promise<[User.LoginGetErrorResponse, User.LoginGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/login\`,
            params: queryParams
        })
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     * @UUID logoutUser
     */
    @zodValidate
    @responseZodSchema(userZod.logoutGetResponse)
    logoutGet(): Promise<[User.LogoutGetErrorResponse, User.LogoutGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/logout\`
        })
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    @zodValidate
    @responseZodSchema(userZod.createResponse)
    create(@paramsZodSchema(userZod.createBodyParams) bodyParams: User.CreateBodyParams): Promise<[User.CreateErrorResponse, User.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/user\`,
            data: bodyParams
        })
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > zodDecoratorImportDeclaration requestImportDeclaration  getFullText 1`] = `
"import { petZod } from "./petZod";
import type { Pet } from "./petZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "./test/zod";
import { request } from "./test/request";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class PetAPI {
    /**
     *
     * @summary summary
     * @description
     * @UUID test
     */
    @zodValidate
    @responseZodSchema(petZod.testPostResponse)
    testPost(@paramsZodSchema(petZod.testPostBodyParams) bodyParams: Pet.TestPostBodyParams): Promise<[Pet.TestPostErrorResponse, Pet.TestPostResponse]> {
        return request({
            method: 'post',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testput
     */
    @zodValidate
    @responseZodSchema(petZod.testPutResponse)
    testPut(@paramsZodSchema(petZod.testPutBodyParams) bodyParams: Pet.TestPutBodyParams): Promise<[Pet.TestPutErrorResponse, Pet.TestPutResponse]> {
        return request({
            method: 'put',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID testdelete
     */
    @zodValidate
    @responseZodSchema(petZod.delByTestResponse)
    delByTest(@paramsZodSchema(petZod.delByTestBodyParams) bodyParams: Pet.DelByTestBodyParams): Promise<[Pet.DelByTestErrorResponse, Pet.DelByTestResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/test\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary summary
     * @description
     * @UUID test-idget
     */
    @zodValidate
    @responseZodSchema(petZod.testIdGetResponse)
    testIdGet(@paramsZodSchema(petZod.testIdGetQueryParams) queryParams: Pet.TestIdGetQueryParams, @paramsZodSchema(petZod.testIdGetPathParams.shape.testId) testId: Pet.TestIdGetPathParams['testId']): Promise<[Pet.TestIdGetErrorResponse, Pet.TestIdGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/test/\${testId}\`,
            params: queryParams,
            paramsSerializer(params: Pet.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    @zodValidate
    @responseZodSchema(petZod.uploadImagePostResponse)
    uploadImagePost(@paramsZodSchema(petZod.uploadImagePostBodyParams) bodyParams: Pet.UploadImagePostBodyParams, @paramsZodSchema(petZod.uploadImagePostPathParams.shape.petId) petId: Pet.UploadImagePostPathParams['petId']): Promise<[Pet.UploadImagePostErrorResponse, Pet.UploadImagePostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     * @UUID addPet
     */
    @zodValidate
    @responseZodSchema(petZod.createResponse)
    create(@paramsZodSchema(petZod.createBodyParams) bodyParams: Pet.CreateBodyParams): Promise<[Pet.CreateErrorResponse, Pet.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     * @UUID updatePet
     */
    @zodValidate
    @responseZodSchema(petZod.updateResponse)
    update(@paramsZodSchema(petZod.updateBodyParams) bodyParams: Pet.UpdateBodyParams): Promise<[Pet.UpdateErrorResponse, Pet.UpdateResponse]> {
        return request({
            method: 'put',
            url: \`/pet\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    @zodValidate
    @responseZodSchema(petZod.findByStatusGetResponse)
    findByStatusGet(@paramsZodSchema(petZod.findByStatusGetQueryParams) queryParams: Pet.FindByStatusGetQueryParams): Promise<[Pet.FindByStatusGetErrorResponse, Pet.FindByStatusGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByStatus\`,
            params: queryParams,
            paramsSerializer(params: Pet.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    @zodValidate
    @responseZodSchema(petZod.findByTagsGetResponse)
    findByTagsGet(@paramsZodSchema(petZod.findByTagsGetQueryParams) queryParams: Pet.FindByTagsGetQueryParams): Promise<[Pet.FindByTagsGetErrorResponse, Pet.FindByTagsGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByTags\`,
            params: queryParams,
            paramsSerializer(params: Pet.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    @zodValidate
    @responseZodSchema(petZod.findByPetIdResponse)
    findByPetId(@paramsZodSchema(petZod.findByPetIdPathParams.shape.petId) petId: Pet.FindByPetIdPathParams['petId']): Promise<[Pet.FindByPetIdErrorResponse, Pet.FindByPetIdResponse]> {
        return request({
            method: 'get',
            url: \`/pet/\${petId}\`
        })
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     * @UUID updatePetWithForm
     */
    @zodValidate
    @responseZodSchema(petZod.petIdPostResponse)
    petIdPost(@paramsZodSchema(petZod.petIdPostBodyParams) bodyParams: Pet.PetIdPostBodyParams, @paramsZodSchema(petZod.petIdPostPathParams.shape.petId) petId: Pet.PetIdPostPathParams['petId']): Promise<[Pet.PetIdPostErrorResponse, Pet.PetIdPostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     * @UUID deletePet
     */
    @zodValidate
    @responseZodSchema(petZod.delByPetIdResponse)
    delByPetId(@paramsZodSchema(petZod.delByPetIdPathParams.shape.petId) petId: Pet.DelByPetIdPathParams['petId']): Promise<[Pet.DelByPetIdErrorResponse, Pet.DelByPetIdResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/\${petId}\`
        })
    }
}

export const petAPI = new PetAPI;

import { storeZod } from "./storeZod";
import type { Store } from "./storeZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "./test/zod";
import { request } from "./test/request";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     *
     * @summary Place an order for a pet
     * @description
     * @UUID placeOrder
     */
    @zodValidate
    @responseZodSchema(storeZod.createResponse)
    create(@paramsZodSchema(storeZod.createBodyParams) bodyParams: Store.CreateBodyParams): Promise<[Store.CreateErrorResponse, Store.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/store/order\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    @zodValidate
    @responseZodSchema(storeZod.findByOrderIdResponse)
    findByOrderId(@paramsZodSchema(storeZod.findByOrderIdPathParams.shape.orderId) orderId: Store.FindByOrderIdPathParams['orderId']): Promise<[Store.FindByOrderIdErrorResponse, Store.FindByOrderIdResponse]> {
        return request({
            method: 'get',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    @zodValidate
    @responseZodSchema(storeZod.delByOrderIdResponse)
    delByOrderId(@paramsZodSchema(storeZod.delByOrderIdPathParams.shape.orderId) orderId: Store.DelByOrderIdPathParams['orderId']): Promise<[Store.DelByOrderIdErrorResponse, Store.DelByOrderIdResponse]> {
        return request({
            method: 'delete',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    @zodValidate
    @responseZodSchema(storeZod.inventoryGetResponse)
    inventoryGet(): Promise<[Store.InventoryGetErrorResponse, Store.InventoryGetResponse]> {
        return request({
            method: 'get',
            url: \`/store/inventory\`
        })
    }
}

export const storeAPI = new StoreAPI;

import { userZod } from "./userZod";
import type { User } from "./userZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "./test/zod";
import { request } from "./test/request";

/**
 *
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithArrayInput
     */
    @zodValidate
    @responseZodSchema(userZod.createWithArrayPostResponse)
    createWithArrayPost(@paramsZodSchema(userZod.createWithArrayPostBodyParams) bodyParams: User.CreateWithArrayPostBodyParams): Promise<[User.CreateWithArrayPostErrorResponse, User.CreateWithArrayPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithArray\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     * @UUID createUsersWithListInput
     */
    @zodValidate
    @responseZodSchema(userZod.createWithListPostResponse)
    createWithListPost(@paramsZodSchema(userZod.createWithListPostBodyParams) bodyParams: User.CreateWithListPostBodyParams): Promise<[User.CreateWithListPostErrorResponse, User.CreateWithListPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithList\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Get user by user name
     * @description
     * @UUID getUserByName
     */
    @zodValidate
    @responseZodSchema(userZod.findByUsernameResponse)
    findByUsername(@paramsZodSchema(userZod.findByUsernamePathParams.shape.username) username: User.FindByUsernamePathParams['username']): Promise<[User.FindByUsernameErrorResponse, User.FindByUsernameResponse]> {
        return request({
            method: 'get',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    @zodValidate
    @responseZodSchema(userZod.usernamePutResponse)
    usernamePut(@paramsZodSchema(userZod.usernamePutBodyParams) bodyParams: User.UsernamePutBodyParams, @paramsZodSchema(userZod.usernamePutPathParams.shape.username) username: User.UsernamePutPathParams['username']): Promise<[User.UsernamePutErrorResponse, User.UsernamePutResponse]> {
        return request({
            method: 'put',
            url: \`/user/\${username}\`,
            data: bodyParams
        })
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    @zodValidate
    @responseZodSchema(userZod.delByUsernameResponse)
    delByUsername(@paramsZodSchema(userZod.delByUsernamePathParams.shape.username) username: User.DelByUsernamePathParams['username']): Promise<[User.DelByUsernameErrorResponse, User.DelByUsernameResponse]> {
        return request({
            method: 'delete',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     * @UUID loginUser
     */
    @zodValidate
    @responseZodSchema(userZod.loginGetResponse)
    loginGet(@paramsZodSchema(userZod.loginGetQueryParams) queryParams: User.LoginGetQueryParams): Promise<[User.LoginGetErrorResponse, User.LoginGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/login\`,
            params: queryParams
        })
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     * @UUID logoutUser
     */
    @zodValidate
    @responseZodSchema(userZod.logoutGetResponse)
    logoutGet(): Promise<[User.LogoutGetErrorResponse, User.LogoutGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/logout\`
        })
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    @zodValidate
    @responseZodSchema(userZod.createResponse)
    create(@paramsZodSchema(userZod.createBodyParams) bodyParams: User.CreateBodyParams): Promise<[User.CreateErrorResponse, User.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/user\`,
            data: bodyParams
        })
    }
}

export const userAPI = new UserAPI;
"
`;
