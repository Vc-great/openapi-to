// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`RequestGenerator > requestGenerator getFullText 1`] = `
"import { PetAPIZod } from "./PetAPIZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { PetAPIType } from "./PetAPIType";
import { ErrorResponse } from "./model/ErrorResponse";
import { request } from "./request";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 */
class PetAPI {
    /**
     *
     * @summary summary
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.TestPostResponse)
    testPost(@paramsZodSchema(PetAPIZod.TestPostBodyParams) bodyParams: PetAPIType.TestPostBodyParams): Promise<[ErrorResponse, PetAPIType.TestPostResponse]> {
        return request({
            method: 'post',
            url: \`/pet/test\`,
            data: body
        })
    }

    /**
     *
     * @summary summary
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.TestPutResponse)
    testPut(@paramsZodSchema(PetAPIZod.TestPutBodyParams) bodyParams: PetAPIType.TestPutBodyParams): Promise<[ErrorResponse, PetAPIType.TestPutResponse]> {
        return request({
            method: 'put',
            url: \`/pet/test\`,
            data: body
        })
    }

    /**
     *
     * @summary summary
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.DelByTestResponse)
    delByTest(@paramsZodSchema(PetAPIZod.DelByTestBodyParams) bodyParams: PetAPIType.DelByTestBodyParams): Promise<[ErrorResponse, PetAPIType.DelByTestResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/test\`,
            data: body
        })
    }

    /**
     *
     * @summary summary
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.TestIdGetResponse)
    testIdGet(@paramsZodSchema(PetAPIZod.testIdGetQueryParams) queryParams: PetAPIType.testIdGetQueryParams, @paramsZodSchema(PetAPIZod.testIdGetPathParams) testId: PetAPIType.testIdGetPathParams): Promise<[ErrorResponse, PetAPIType.TestIdGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/test/\${testId}\`,
            params: query,
            paramsSerializer(params: PetAPIType.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.UploadImagePostResponse)
    uploadImagePost(@paramsZodSchema(PetAPIZod.UploadImagePostBodyParams) bodyParams: PetAPIType.UploadImagePostBodyParams, @paramsZodSchema(PetAPIZod.uploadImagePostPathParams) petId: PetAPIType.uploadImagePostPathParams): Promise<[ErrorResponse, PetAPIType.UploadImagePostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data: body
        })
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.CreateResponse)
    create(@paramsZodSchema(PetAPIZod.CreateBodyParams) bodyParams: PetAPIType.CreateBodyParams): Promise<[ErrorResponse, PetAPIType.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/pet\`,
            data: body
        })
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.UpdateResponse)
    update(@paramsZodSchema(PetAPIZod.UpdateBodyParams) bodyParams: PetAPIType.UpdateBodyParams): Promise<[ErrorResponse, PetAPIType.UpdateResponse]> {
        return request({
            method: 'put',
            url: \`/pet\`,
            data: body
        })
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.FindByStatusGetResponse)
    findByStatusGet(@paramsZodSchema(PetAPIZod.findByStatusGetQueryParams) queryParams: PetAPIType.findByStatusGetQueryParams): Promise<[ErrorResponse, PetAPIType.FindByStatusGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByStatus\`,
            params: query,
            paramsSerializer(params: PetAPIType.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.FindByTagsGetResponse)
    findByTagsGet(@paramsZodSchema(PetAPIZod.findByTagsGetQueryParams) queryParams: PetAPIType.findByTagsGetQueryParams): Promise<[ErrorResponse, PetAPIType.FindByTagsGetResponse]> {
        return request({
            method: 'get',
            url: \`/pet/findByTags\`,
            params: query,
            paramsSerializer(params: PetAPIType.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.FindByPetIdResponse)
    findByPetId(@paramsZodSchema(PetAPIZod.findByPetIdPathParams) petId: PetAPIType.findByPetIdPathParams): Promise<[ErrorResponse, PetAPIType.FindByPetIdResponse]> {
        return request({
            method: 'get',
            url: \`/pet/\${petId}\`
        })
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.PetIdPostResponse)
    petIdPost(@paramsZodSchema(PetAPIZod.PetIdPostBodyParams) bodyParams: PetAPIType.PetIdPostBodyParams, @paramsZodSchema(PetAPIZod.petIdPostPathParams) petId: PetAPIType.petIdPostPathParams): Promise<[ErrorResponse, PetAPIType.PetIdPostResponse]> {
        return request({
            method: 'post',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data: body
        })
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     */
    @zodValidate
    @responseZodSchema(PetAPIZod.DelByPetIdResponse)
    delByPetId(@paramsZodSchema(PetAPIZod.delByPetIdPathParams) petId: PetAPIType.delByPetIdPathParams): Promise<[ErrorResponse, PetAPIType.DelByPetIdResponse]> {
        return request({
            method: 'delete',
            url: \`/pet/\${petId}\`
        })
    }
}

export const petAPI = new PetAPI;

import { StoreAPIZod } from "./StoreAPIZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { StoreAPIType } from "./StoreAPIType";
import { ErrorResponse } from "./model/ErrorResponse";
import { request } from "./request";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 */
class StoreAPI {
    /**
     *
     * @summary Place an order for a pet
     * @description
     */
    @zodValidate
    @responseZodSchema(StoreAPIZod.CreateResponse)
    create(@paramsZodSchema(StoreAPIZod.CreateBodyParams) bodyParams: StoreAPIType.CreateBodyParams): Promise<[ErrorResponse, StoreAPIType.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/store/order\`,
            data: body
        })
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     */
    @zodValidate
    @responseZodSchema(StoreAPIZod.FindByOrderIdResponse)
    findByOrderId(@paramsZodSchema(StoreAPIZod.findByOrderIdPathParams) orderId: StoreAPIType.findByOrderIdPathParams): Promise<[ErrorResponse, StoreAPIType.FindByOrderIdResponse]> {
        return request({
            method: 'get',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     */
    @zodValidate
    @responseZodSchema(StoreAPIZod.DelByOrderIdResponse)
    delByOrderId(@paramsZodSchema(StoreAPIZod.delByOrderIdPathParams) orderId: StoreAPIType.delByOrderIdPathParams): Promise<[ErrorResponse, StoreAPIType.DelByOrderIdResponse]> {
        return request({
            method: 'delete',
            url: \`/store/order/\${orderId}\`
        })
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     */
    @zodValidate
    @responseZodSchema(StoreAPIZod.InventoryGetResponse)
    inventoryGet(): Promise<[ErrorResponse, StoreAPIType.InventoryGetResponse]> {
        return request({
            method: 'get',
            url: \`/store/inventory\`
        })
    }
}

export const storeAPI = new StoreAPI;

import { UserAPIZod } from "./UserAPIZod";
import { paramsZodSchema, responseZodSchema, zodValidate } from "@/utils/zod";
import { UserAPIType } from "./UserAPIType";
import { ErrorResponse } from "./model/ErrorResponse";
import { request } from "./request";

/**
 *
 * @tag user
 * @description Operations about user
 */
class UserAPI {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.CreateWithArrayPostResponse)
    createWithArrayPost(@paramsZodSchema(UserAPIZod.CreateWithArrayPostBodyParams) bodyParams: UserAPIType.CreateWithArrayPostBodyParams): Promise<[ErrorResponse, UserAPIType.CreateWithArrayPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithArray\`,
            data: body
        })
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.CreateWithListPostResponse)
    createWithListPost(@paramsZodSchema(UserAPIZod.CreateWithListPostBodyParams) bodyParams: UserAPIType.CreateWithListPostBodyParams): Promise<[ErrorResponse, UserAPIType.CreateWithListPostResponse]> {
        return request({
            method: 'post',
            url: \`/user/createWithList\`,
            data: body
        })
    }

    /**
     *
     * @summary Get user by user name
     * @description
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.FindByUsernameResponse)
    findByUsername(@paramsZodSchema(UserAPIZod.findByUsernamePathParams) username: UserAPIType.findByUsernamePathParams): Promise<[ErrorResponse, UserAPIType.FindByUsernameResponse]> {
        return request({
            method: 'get',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.UsernamePutResponse)
    usernamePut(@paramsZodSchema(UserAPIZod.UsernamePutBodyParams) bodyParams: UserAPIType.UsernamePutBodyParams, @paramsZodSchema(UserAPIZod.usernamePutPathParams) username: UserAPIType.usernamePutPathParams): Promise<[ErrorResponse, UserAPIType.UsernamePutResponse]> {
        return request({
            method: 'put',
            url: \`/user/\${username}\`,
            data: body
        })
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.DelByUsernameResponse)
    delByUsername(@paramsZodSchema(UserAPIZod.delByUsernamePathParams) username: UserAPIType.delByUsernamePathParams): Promise<[ErrorResponse, UserAPIType.DelByUsernameResponse]> {
        return request({
            method: 'delete',
            url: \`/user/\${username}\`
        })
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.LoginGetResponse)
    loginGet(@paramsZodSchema(UserAPIZod.loginGetQueryParams) queryParams: UserAPIType.loginGetQueryParams): Promise<[ErrorResponse, UserAPIType.LoginGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/login\`,
            params: query
        })
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.LogoutGetResponse)
    logoutGet(): Promise<[ErrorResponse, UserAPIType.LogoutGetResponse]> {
        return request({
            method: 'get',
            url: \`/user/logout\`
        })
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     */
    @zodValidate
    @responseZodSchema(UserAPIZod.CreateResponse)
    create(@paramsZodSchema(UserAPIZod.CreateBodyParams) bodyParams: UserAPIType.CreateBodyParams): Promise<[ErrorResponse, UserAPIType.CreateResponse]> {
        return request({
            method: 'post',
            url: \`/user\`,
            data: body
        })
    }
}

export const userAPI = new UserAPI;
"
`;
