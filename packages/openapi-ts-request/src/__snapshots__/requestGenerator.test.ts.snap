// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`RequestGenerator > all false  getFullText 1`] = `
"import type { Pet } from "./Pet";
import type { AxiosResponse } from "axios";
import { request } from "@/api/request";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class PetAPI {
    /**
     * @summary summary
     * @UUID test
     */
    async testPost(data: Pet.TestPostMutationRequest) {
        const res = await request<Pet.TestPostMutationResponse, AxiosResponse<Pet.TestPostMutationResponse>, Pet.TestPostMutationRequest>({
            method: 'POST',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testput
     */
    async testPut(data: Pet.TestPutMutationRequest) {
        const res = await request<Pet.TestPutMutationResponse, AxiosResponse<Pet.TestPutMutationResponse>, Pet.TestPutMutationRequest>({
            method: 'PUT',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testdelete
     */
    async delByTest(data: Pet.DelByTestMutationRequest) {
        const res = await request<Pet.DelByTestMutationResponse, AxiosResponse<Pet.DelByTestMutationResponse>, Pet.DelByTestMutationRequest>({
            method: 'DELETE',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID test-idget
     */
    async testIdGet(params: Pet.TestIdGetQueryParams, testId: Pet.TestIdGetPathParams['testId']) {
        const res = await request<Pet.TestIdGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/test/\${testId}\`,
            params,
            paramsSerializer(params: Pet.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    async uploadImagePost(data: Pet.UploadImagePostMutationRequest, petId: Pet.UploadImagePostPathParams['petId']) {
        const res = await request<Pet.UploadImagePostMutationResponse, AxiosResponse<Pet.UploadImagePostMutationResponse>, Pet.UploadImagePostMutationRequest>({
            method: 'POST',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data
        })
        return res.data
    }

    /**
     * @summary Add a new pet to the store
     * @UUID addPet
     */
    async create(data: Pet.CreateMutationRequest) {
        const res = await request<Pet.CreateMutationResponse, AxiosResponse<Pet.CreateMutationResponse>, Pet.CreateMutationRequest>({
            method: 'POST',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Update an existing pet
     * @UUID updatePet
     */
    async update(data: Pet.UpdateMutationRequest) {
        const res = await request<Pet.UpdateMutationResponse, AxiosResponse<Pet.UpdateMutationResponse>, Pet.UpdateMutationRequest>({
            method: 'PUT',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    async findByStatusGet(params: Pet.FindByStatusGetQueryParams) {
        const res = await request<Pet.FindByStatusGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/findByStatus\`,
            params,
            paramsSerializer(params: Pet.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    async findByTagsGet(params: Pet.FindByTagsGetQueryParams) {
        const res = await request<Pet.FindByTagsGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/findByTags\`,
            params,
            paramsSerializer(params: Pet.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    async findByPetId(petId: Pet.FindByPetIdPathParams['petId']) {
        const res = await request<Pet.FindByPetIdQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }

    /**
     * @summary Updates a pet in the store with form data
     * @UUID updatePetWithForm
     */
    async petIdPost(data: Pet.PetIdPostMutationRequest, petId: Pet.PetIdPostPathParams['petId']) {
        const res = await request<Pet.PetIdPostMutationResponse, AxiosResponse<Pet.PetIdPostMutationResponse>, Pet.PetIdPostMutationRequest>({
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Deletes a pet
     * @UUID deletePet
     */
    async delByPetId(petId: Pet.DelByPetIdPathParams['petId']) {
        const res = await request<Pet.DelByPetIdMutationResponse, AxiosResponse, unknown>({
            method: 'DELETE',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }
}

export const petAPI = new PetAPI;

import type { Store } from "./Store";
import type { AxiosResponse } from "axios";
import { request } from "@/api/request";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     * @summary Place an order for a pet
     * @UUID placeOrder
     */
    async create(data: Store.CreateMutationRequest) {
        const res = await request<Store.CreateMutationResponse, AxiosResponse<Store.CreateMutationResponse>, Store.CreateMutationRequest>({
            method: 'POST',
            url: \`/store/order\`,
            data
        })
        return res.data
    }

    /**
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    async findByOrderId(orderId: Store.FindByOrderIdPathParams['orderId']) {
        const res = await request<Store.FindByOrderIdQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    async delByOrderId(orderId: Store.DelByOrderIdPathParams['orderId']) {
        const res = await request<Store.DelByOrderIdMutationResponse, AxiosResponse, unknown>({
            method: 'DELETE',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    async inventoryGet() {
        const res = await request<Store.InventoryGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/store/inventory\`
        })
        return res.data
    }
}

export const storeAPI = new StoreAPI;

import type { User } from "./User";
import type { AxiosResponse } from "axios";
import { request } from "@/api/request";

/**
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithArrayInput
     */
    async createWithArrayPost(data: User.CreateWithArrayPostMutationRequest) {
        const res = await request<User.CreateWithArrayPostMutationResponse, AxiosResponse<User.CreateWithArrayPostMutationResponse>, User.CreateWithArrayPostMutationRequest>({
            method: 'POST',
            url: \`/user/createWithArray\`,
            data
        })
        return res.data
    }

    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithListInput
     */
    async createWithListPost(data: User.CreateWithListPostMutationRequest) {
        const res = await request<User.CreateWithListPostMutationResponse, AxiosResponse<User.CreateWithListPostMutationResponse>, User.CreateWithListPostMutationRequest>({
            method: 'POST',
            url: \`/user/createWithList\`,
            data
        })
        return res.data
    }

    /**
     * @summary Get user by user name
     * @UUID getUserByName
     */
    async findByUsername(username: User.FindByUsernamePathParams['username']) {
        const res = await request<User.FindByUsernameQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    async usernamePut(data: User.UsernamePutMutationRequest, username: User.UsernamePutPathParams['username']) {
        const res = await request<User.UsernamePutMutationResponse, AxiosResponse<User.UsernamePutMutationResponse>, User.UsernamePutMutationRequest>({
            method: 'PUT',
            url: \`/user/\${username}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    async delByUsername(username: User.DelByUsernamePathParams['username']) {
        const res = await request<User.DelByUsernameMutationResponse, AxiosResponse, unknown>({
            method: 'DELETE',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Logs user into the system
     * @UUID loginUser
     */
    async loginGet(params: User.LoginGetQueryParams) {
        const res = await request<User.LoginGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/user/login\`,
            params
        })
        return res.data
    }

    /**
     * @summary Logs out current logged in user session
     * @UUID logoutUser
     */
    async logoutGet() {
        const res = await request<User.LogoutGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/user/logout\`
        })
        return res.data
    }

    /**
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    async create(data: User.CreateMutationRequest) {
        const res = await request<User.CreateMutationResponse, AxiosResponse<User.CreateMutationResponse>, User.CreateMutationRequest>({
            method: 'POST',
            url: \`/user\`,
            data
        })
        return res.data
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > all true getFullText 1`] = `
"import { newPetZod } from "./newPetZod";
import type { newPet } from "./newPetZod";
import { paramsZodSchema, responseZodSchema, ZodValidation } from "./newZod";
import type { AxiosResponse } from "axios";
import { request } from "./newRequest";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class NewPetAPI {
    /**
     * @summary summary
     * @UUID test
     */
    @ZodValidation
    @responseZodSchema(newPetZod.testPostMutationMutationResponse)
    async newtestPost(@paramsZodSchema(newPetZod.testPostMutationRequest) data: newPet.TestPostMutationRequest) {
        const res = await request<newPet.TestPostMutationResponse, AxiosResponse<newPet.TestPostMutationResponse>, newPet.TestPostMutationRequest>({
            method: 'POST',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testput
     */
    @ZodValidation
    @responseZodSchema(newPetZod.testPutMutationMutationResponse)
    async newtestPut(@paramsZodSchema(newPetZod.testPutMutationRequest) data: newPet.TestPutMutationRequest) {
        const res = await request<newPet.TestPutMutationResponse, AxiosResponse<newPet.TestPutMutationResponse>, newPet.TestPutMutationRequest>({
            method: 'PUT',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testdelete
     */
    @ZodValidation
    @responseZodSchema(newPetZod.delByTestMutationMutationResponse)
    async newdelByTest(@paramsZodSchema(newPetZod.delByTestMutationRequest) data: newPet.DelByTestMutationRequest) {
        const res = await request<newPet.DelByTestMutationResponse, AxiosResponse<newPet.DelByTestMutationResponse>, newPet.DelByTestMutationRequest>({
            method: 'DELETE',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID test-idget
     */
    @ZodValidation
    @responseZodSchema(newPetZod.testIdGetQueryQueryResponse)
    async newtestIdGet(@paramsZodSchema(newPetZod.testIdGetQueryParams) params: newPet.TestIdGetQueryParams, @paramsZodSchema(newPetZod.testIdGetPathParams.shape.testId) testId: newPet.TestIdGetPathParams['testId']) {
        const res = await request<newPet.TestIdGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/test/\${testId}\`,
            params,
            paramsSerializer(params: newPet.TestIdGetQueryParams) {
                return qs.stringify(params);
            }
        })
        return res.data
    }

    /**
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    @ZodValidation
    @responseZodSchema(newPetZod.uploadImagePostMutationMutationResponse)
    async newuploadImagePost(@paramsZodSchema(newPetZod.uploadImagePostMutationRequest) data: newPet.UploadImagePostMutationRequest, @paramsZodSchema(newPetZod.uploadImagePostPathParams.shape.petId) petId: newPet.UploadImagePostPathParams['petId']) {
        const res = await request<newPet.UploadImagePostMutationResponse, AxiosResponse<newPet.UploadImagePostMutationResponse>, newPet.UploadImagePostMutationRequest>({
            method: 'POST',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data
        })
        return res.data
    }

    /**
     * @summary Add a new pet to the store
     * @UUID addPet
     */
    @ZodValidation
    @responseZodSchema(newPetZod.createMutationMutationResponse)
    async newcreate(@paramsZodSchema(newPetZod.createMutationRequest) data: newPet.CreateMutationRequest) {
        const res = await request<newPet.CreateMutationResponse, AxiosResponse<newPet.CreateMutationResponse>, newPet.CreateMutationRequest>({
            method: 'POST',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Update an existing pet
     * @UUID updatePet
     */
    @ZodValidation
    @responseZodSchema(newPetZod.updateMutationMutationResponse)
    async newupdate(@paramsZodSchema(newPetZod.updateMutationRequest) data: newPet.UpdateMutationRequest) {
        const res = await request<newPet.UpdateMutationResponse, AxiosResponse<newPet.UpdateMutationResponse>, newPet.UpdateMutationRequest>({
            method: 'PUT',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    @ZodValidation
    @responseZodSchema(newPetZod.findByStatusGetQueryQueryResponse)
    async newfindByStatusGet(@paramsZodSchema(newPetZod.findByStatusGetQueryParams) params: newPet.FindByStatusGetQueryParams) {
        const res = await request<newPet.FindByStatusGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/findByStatus\`,
            params,
            paramsSerializer(params: newPet.FindByStatusGetQueryParams) {
                return qs.stringify(params);
            }
        })
        return res.data
    }

    /**
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    @ZodValidation
    @responseZodSchema(newPetZod.findByTagsGetQueryQueryResponse)
    async newfindByTagsGet(@paramsZodSchema(newPetZod.findByTagsGetQueryParams) params: newPet.FindByTagsGetQueryParams) {
        const res = await request<newPet.FindByTagsGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/findByTags\`,
            params,
            paramsSerializer(params: newPet.FindByTagsGetQueryParams) {
                return qs.stringify(params);
            }
        })
        return res.data
    }

    /**
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    @ZodValidation
    @responseZodSchema(newPetZod.findByPetIdQueryQueryResponse)
    async newfindByPetId(@paramsZodSchema(newPetZod.findByPetIdPathParams.shape.petId) petId: newPet.FindByPetIdPathParams['petId']) {
        const res = await request<newPet.FindByPetIdQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }

    /**
     * @summary Updates a pet in the store with form data
     * @UUID updatePetWithForm
     */
    @ZodValidation
    @responseZodSchema(newPetZod.petIdPostMutationMutationResponse)
    async newpetIdPost(@paramsZodSchema(newPetZod.petIdPostMutationRequest) data: newPet.PetIdPostMutationRequest, @paramsZodSchema(newPetZod.petIdPostPathParams.shape.petId) petId: newPet.PetIdPostPathParams['petId']) {
        const res = await request<newPet.PetIdPostMutationResponse, AxiosResponse<newPet.PetIdPostMutationResponse>, newPet.PetIdPostMutationRequest>({
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Deletes a pet
     * @UUID deletePet
     */
    @ZodValidation
    @responseZodSchema(newPetZod.delByPetIdMutationMutationResponse)
    async newdelByPetId(@paramsZodSchema(newPetZod.delByPetIdPathParams.shape.petId) petId: newPet.DelByPetIdPathParams['petId']) {
        const res = await request<newPet.DelByPetIdMutationResponse, AxiosResponse, unknown>({
            method: 'DELETE',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }
}

export const newPetAPI = new NewPetAPI;

import { newPetZod } from "./newPetZod";
import type { newPet } from "./newPetZod";
import { paramsZodSchema, responseZodSchema, ZodValidation } from "./test/zod";
import type { AxiosResponse } from "axios";
import { request } from "./test/request";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     * @summary Place an order for a pet
     * @UUID placeOrder
     */
    @ZodValidation
    @responseZodSchema(newPetZod.createMutationMutationResponse)
    async create(@paramsZodSchema(newPetZod.createMutationRequest) data: newPet.CreateMutationRequest) {
        const res = await request<newPet.CreateMutationResponse, AxiosResponse<newPet.CreateMutationResponse>, newPet.CreateMutationRequest>({
            method: 'POST',
            url: \`/store/order\`,
            data
        })
        return res.data
    }

    /**
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    @ZodValidation
    @responseZodSchema(newPetZod.findByOrderIdQueryQueryResponse)
    async findByOrderId(@paramsZodSchema(newPetZod.findByOrderIdPathParams.shape.orderId) orderId: newPet.FindByOrderIdPathParams['orderId']) {
        const res = await request<newPet.FindByOrderIdQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    @ZodValidation
    @responseZodSchema(newPetZod.delByOrderIdMutationMutationResponse)
    async delByOrderId(@paramsZodSchema(newPetZod.delByOrderIdPathParams.shape.orderId) orderId: newPet.DelByOrderIdPathParams['orderId']) {
        const res = await request<newPet.DelByOrderIdMutationResponse, AxiosResponse, unknown>({
            method: 'DELETE',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    @ZodValidation
    @responseZodSchema(newPetZod.inventoryGetQueryQueryResponse)
    async inventoryGet() {
        const res = await request<newPet.InventoryGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/store/inventory\`
        })
        return res.data
    }
}

export const storeAPI = new StoreAPI;

import { newPetZod } from "./newPetZod";
import type { newPet } from "./newPetZod";
import { paramsZodSchema, responseZodSchema, ZodValidation } from "./test/zod";
import type { AxiosResponse } from "axios";
import { request } from "./test/request";

/**
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithArrayInput
     */
    @ZodValidation
    @responseZodSchema(newPetZod.createWithArrayPostMutationMutationResponse)
    async createWithArrayPost(@paramsZodSchema(newPetZod.createWithArrayPostMutationRequest) data: newPet.CreateWithArrayPostMutationRequest) {
        const res = await request<newPet.CreateWithArrayPostMutationResponse, AxiosResponse<newPet.CreateWithArrayPostMutationResponse>, newPet.CreateWithArrayPostMutationRequest>({
            method: 'POST',
            url: \`/user/createWithArray\`,
            data
        })
        return res.data
    }

    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithListInput
     */
    @ZodValidation
    @responseZodSchema(newPetZod.createWithListPostMutationMutationResponse)
    async createWithListPost(@paramsZodSchema(newPetZod.createWithListPostMutationRequest) data: newPet.CreateWithListPostMutationRequest) {
        const res = await request<newPet.CreateWithListPostMutationResponse, AxiosResponse<newPet.CreateWithListPostMutationResponse>, newPet.CreateWithListPostMutationRequest>({
            method: 'POST',
            url: \`/user/createWithList\`,
            data
        })
        return res.data
    }

    /**
     * @summary Get user by user name
     * @UUID getUserByName
     */
    @ZodValidation
    @responseZodSchema(newPetZod.findByUsernameQueryQueryResponse)
    async findByUsername(@paramsZodSchema(newPetZod.findByUsernamePathParams.shape.username) username: newPet.FindByUsernamePathParams['username']) {
        const res = await request<newPet.FindByUsernameQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    @ZodValidation
    @responseZodSchema(newPetZod.usernamePutMutationMutationResponse)
    async usernamePut(@paramsZodSchema(newPetZod.usernamePutMutationRequest) data: newPet.UsernamePutMutationRequest, @paramsZodSchema(newPetZod.usernamePutPathParams.shape.username) username: newPet.UsernamePutPathParams['username']) {
        const res = await request<newPet.UsernamePutMutationResponse, AxiosResponse<newPet.UsernamePutMutationResponse>, newPet.UsernamePutMutationRequest>({
            method: 'PUT',
            url: \`/user/\${username}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    @ZodValidation
    @responseZodSchema(newPetZod.delByUsernameMutationMutationResponse)
    async delByUsername(@paramsZodSchema(newPetZod.delByUsernamePathParams.shape.username) username: newPet.DelByUsernamePathParams['username']) {
        const res = await request<newPet.DelByUsernameMutationResponse, AxiosResponse, unknown>({
            method: 'DELETE',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Logs user into the system
     * @UUID loginUser
     */
    @ZodValidation
    @responseZodSchema(newPetZod.loginGetQueryQueryResponse)
    async loginGet(@paramsZodSchema(newPetZod.loginGetQueryParams) params: newPet.LoginGetQueryParams) {
        const res = await request<newPet.LoginGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/user/login\`,
            params
        })
        return res.data
    }

    /**
     * @summary Logs out current logged in user session
     * @UUID logoutUser
     */
    @ZodValidation
    @responseZodSchema(newPetZod.logoutGetQueryQueryResponse)
    async logoutGet() {
        const res = await request<newPet.LogoutGetQueryResponse, AxiosResponse, unknown>({
            method: 'GET',
            url: \`/user/logout\`
        })
        return res.data
    }

    /**
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    @ZodValidation
    @responseZodSchema(newPetZod.createMutationMutationResponse)
    async create(@paramsZodSchema(newPetZod.createMutationRequest) data: newPet.CreateMutationRequest) {
        const res = await request<newPet.CreateMutationResponse, AxiosResponse<newPet.CreateMutationResponse>, newPet.CreateMutationRequest>({
            method: 'POST',
            url: \`/user\`,
            data
        })
        return res.data
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > requestType common getFullText 1`] = `
"import type { Pet } from "./Pet";
import { request } from "@/api/request";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class PetAPI {
    /**
     * @summary summary
     * @UUID test
     */
    async testPost(data: Pet.TestPostMutationRequest): Promise<Pet.TestPostMutationResponse> {
        const res = await request({
            method: 'POST',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testput
     */
    async testPut(data: Pet.TestPutMutationRequest): Promise<Pet.TestPutMutationResponse> {
        const res = await request({
            method: 'PUT',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testdelete
     */
    async delByTest(data: Pet.DelByTestMutationRequest): Promise<Pet.DelByTestMutationResponse> {
        const res = await request({
            method: 'DELETE',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID test-idget
     */
    async testIdGet(params: Pet.TestIdGetQueryParams, testId: Pet.TestIdGetPathParams['testId']): Promise<Pet.TestIdGetQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/pet/test/\${testId}\`,
            params,
            paramsSerializer(params: Pet.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    async uploadImagePost(data: Pet.UploadImagePostMutationRequest, petId: Pet.UploadImagePostPathParams['petId']): Promise<Pet.UploadImagePostMutationResponse> {
        const res = await request({
            method: 'POST',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data
        })
        return res.data
    }

    /**
     * @summary Add a new pet to the store
     * @UUID addPet
     */
    async create(data: Pet.CreateMutationRequest): Promise<Pet.CreateMutationResponse> {
        const res = await request({
            method: 'POST',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Update an existing pet
     * @UUID updatePet
     */
    async update(data: Pet.UpdateMutationRequest): Promise<Pet.UpdateMutationResponse> {
        const res = await request({
            method: 'PUT',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    async findByStatusGet(params: Pet.FindByStatusGetQueryParams): Promise<Pet.FindByStatusGetQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/pet/findByStatus\`,
            params,
            paramsSerializer(params: Pet.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    async findByTagsGet(params: Pet.FindByTagsGetQueryParams): Promise<Pet.FindByTagsGetQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/pet/findByTags\`,
            params,
            paramsSerializer(params: Pet.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    async findByPetId(petId: Pet.FindByPetIdPathParams['petId']): Promise<Pet.FindByPetIdQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }

    /**
     * @summary Updates a pet in the store with form data
     * @UUID updatePetWithForm
     */
    async petIdPost(data: Pet.PetIdPostMutationRequest, petId: Pet.PetIdPostPathParams['petId']): Promise<Pet.PetIdPostMutationResponse> {
        const res = await request({
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Deletes a pet
     * @UUID deletePet
     */
    async delByPetId(petId: Pet.DelByPetIdPathParams['petId']): Promise<Pet.DelByPetIdMutationResponse> {
        const res = await request({
            method: 'DELETE',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }
}

export const petAPI = new PetAPI;

import type { Store } from "./Store";
import { request } from "@/api/request";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     * @summary Place an order for a pet
     * @UUID placeOrder
     */
    async create(data: Store.CreateMutationRequest): Promise<Store.CreateMutationResponse> {
        const res = await request({
            method: 'POST',
            url: \`/store/order\`,
            data
        })
        return res.data
    }

    /**
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    async findByOrderId(orderId: Store.FindByOrderIdPathParams['orderId']): Promise<Store.FindByOrderIdQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    async delByOrderId(orderId: Store.DelByOrderIdPathParams['orderId']): Promise<Store.DelByOrderIdMutationResponse> {
        const res = await request({
            method: 'DELETE',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    async inventoryGet(): Promise<Store.InventoryGetQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/store/inventory\`
        })
        return res.data
    }
}

export const storeAPI = new StoreAPI;

import type { User } from "./User";
import { request } from "@/api/request";

/**
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithArrayInput
     */
    async createWithArrayPost(data: User.CreateWithArrayPostMutationRequest): Promise<User.CreateWithArrayPostMutationResponse> {
        const res = await request({
            method: 'POST',
            url: \`/user/createWithArray\`,
            data
        })
        return res.data
    }

    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithListInput
     */
    async createWithListPost(data: User.CreateWithListPostMutationRequest): Promise<User.CreateWithListPostMutationResponse> {
        const res = await request({
            method: 'POST',
            url: \`/user/createWithList\`,
            data
        })
        return res.data
    }

    /**
     * @summary Get user by user name
     * @UUID getUserByName
     */
    async findByUsername(username: User.FindByUsernamePathParams['username']): Promise<User.FindByUsernameQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    async usernamePut(data: User.UsernamePutMutationRequest, username: User.UsernamePutPathParams['username']): Promise<User.UsernamePutMutationResponse> {
        const res = await request({
            method: 'PUT',
            url: \`/user/\${username}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    async delByUsername(username: User.DelByUsernamePathParams['username']): Promise<User.DelByUsernameMutationResponse> {
        const res = await request({
            method: 'DELETE',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Logs user into the system
     * @UUID loginUser
     */
    async loginGet(params: User.LoginGetQueryParams): Promise<User.LoginGetQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/user/login\`,
            params
        })
        return res.data
    }

    /**
     * @summary Logs out current logged in user session
     * @UUID logoutUser
     */
    async logoutGet(): Promise<User.LogoutGetQueryResponse> {
        const res = await request({
            method: 'GET',
            url: \`/user/logout\`
        })
        return res.data
    }

    /**
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    async create(data: User.CreateMutationRequest): Promise<User.CreateMutationResponse> {
        const res = await request({
            method: 'POST',
            url: \`/user\`,
            data
        })
        return res.data
    }
}

export const userAPI = new UserAPI;
"
`;

exports[`RequestGenerator > requestType commonWithArrayResponse getFullText 1`] = `
"import type { Pet } from "./Pet";
import { request } from "@/api/request";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID API-pet
 */
class PetAPI {
    /**
     * @summary summary
     * @UUID test
     */
    async testPost(data: Pet.TestPostMutationRequest): Promise<[Pet.TestPostError, Pet.TestPostMutationResponse]> {
        const res = await request({
            method: 'POST',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testput
     */
    async testPut(data: Pet.TestPutMutationRequest): Promise<[Pet.TestPutError, Pet.TestPutMutationResponse]> {
        const res = await request({
            method: 'PUT',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID testdelete
     */
    async delByTest(data: Pet.DelByTestMutationRequest): Promise<[Pet.DelByTestError, Pet.DelByTestMutationResponse]> {
        const res = await request({
            method: 'DELETE',
            url: \`/pet/test\`,
            data
        })
        return res.data
    }

    /**
     * @summary summary
     * @UUID test-idget
     */
    async testIdGet(params: Pet.TestIdGetQueryParams, testId: Pet.TestIdGetPathParams['testId']): Promise<[Pet.TestIdGetError, Pet.TestIdGetQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/pet/test/\${testId}\`,
            params,
            paramsSerializer(params: Pet.TestIdGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    async uploadImagePost(data: Pet.UploadImagePostMutationRequest, petId: Pet.UploadImagePostPathParams['petId']): Promise<[Pet.UploadImagePostError, Pet.UploadImagePostMutationResponse]> {
        const res = await request({
            method: 'POST',
            headers: {
                'Content-Type': 'multipart/form-data'
            },
            url: \`/pet/\${petId}/uploadImage\`,
            data
        })
        return res.data
    }

    /**
     * @summary Add a new pet to the store
     * @UUID addPet
     */
    async create(data: Pet.CreateMutationRequest): Promise<[Pet.CreateError, Pet.CreateMutationResponse]> {
        const res = await request({
            method: 'POST',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Update an existing pet
     * @UUID updatePet
     */
    async update(data: Pet.UpdateMutationRequest): Promise<[Pet.UpdateError, Pet.UpdateMutationResponse]> {
        const res = await request({
            method: 'PUT',
            url: \`/pet\`,
            data
        })
        return res.data
    }

    /**
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    async findByStatusGet(params: Pet.FindByStatusGetQueryParams): Promise<[Pet.FindByStatusGetError, Pet.FindByStatusGetQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/pet/findByStatus\`,
            params,
            paramsSerializer(params: Pet.FindByStatusGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    async findByTagsGet(params: Pet.FindByTagsGetQueryParams): Promise<[Pet.FindByTagsGetError, Pet.FindByTagsGetQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/pet/findByTags\`,
            params,
            paramsSerializer(params: Pet.FindByTagsGetQueryParams) {
                return qs.stringify(params)
            }
        })
        return res.data
    }

    /**
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    async findByPetId(petId: Pet.FindByPetIdPathParams['petId']): Promise<[Pet.FindByPetIdError, Pet.FindByPetIdQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }

    /**
     * @summary Updates a pet in the store with form data
     * @UUID updatePetWithForm
     */
    async petIdPost(data: Pet.PetIdPostMutationRequest, petId: Pet.PetIdPostPathParams['petId']): Promise<[Pet.PetIdPostError, Pet.PetIdPostMutationResponse]> {
        const res = await request({
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: \`/pet/\${petId}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Deletes a pet
     * @UUID deletePet
     */
    async delByPetId(petId: Pet.DelByPetIdPathParams['petId']): Promise<[Pet.DelByPetIdError, Pet.DelByPetIdMutationResponse]> {
        const res = await request({
            method: 'DELETE',
            url: \`/pet/\${petId}\`
        })
        return res.data
    }
}

export const petAPI = new PetAPI;

import type { Store } from "./Store";
import { request } from "@/api/request";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID API-store
 */
class StoreAPI {
    /**
     * @summary Place an order for a pet
     * @UUID placeOrder
     */
    async create(data: Store.CreateMutationRequest): Promise<[Store.CreateError, Store.CreateMutationResponse]> {
        const res = await request({
            method: 'POST',
            url: \`/store/order\`,
            data
        })
        return res.data
    }

    /**
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    async findByOrderId(orderId: Store.FindByOrderIdPathParams['orderId']): Promise<[Store.FindByOrderIdError, Store.FindByOrderIdQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    async delByOrderId(orderId: Store.DelByOrderIdPathParams['orderId']): Promise<[Store.DelByOrderIdError, Store.DelByOrderIdMutationResponse]> {
        const res = await request({
            method: 'DELETE',
            url: \`/store/order/\${orderId}\`
        })
        return res.data
    }

    /**
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    async inventoryGet(): Promise<[Store.InventoryGetError, Store.InventoryGetQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/store/inventory\`
        })
        return res.data
    }
}

export const storeAPI = new StoreAPI;

import type { User } from "./User";
import { request } from "@/api/request";

/**
 * @tag user
 * @description Operations about user
 * @UUID API-user
 */
class UserAPI {
    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithArrayInput
     */
    async createWithArrayPost(data: User.CreateWithArrayPostMutationRequest): Promise<[User.CreateWithArrayPostError, User.CreateWithArrayPostMutationResponse]> {
        const res = await request({
            method: 'POST',
            url: \`/user/createWithArray\`,
            data
        })
        return res.data
    }

    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithListInput
     */
    async createWithListPost(data: User.CreateWithListPostMutationRequest): Promise<[User.CreateWithListPostError, User.CreateWithListPostMutationResponse]> {
        const res = await request({
            method: 'POST',
            url: \`/user/createWithList\`,
            data
        })
        return res.data
    }

    /**
     * @summary Get user by user name
     * @UUID getUserByName
     */
    async findByUsername(username: User.FindByUsernamePathParams['username']): Promise<[User.FindByUsernameError, User.FindByUsernameQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    async usernamePut(data: User.UsernamePutMutationRequest, username: User.UsernamePutPathParams['username']): Promise<[User.UsernamePutError, User.UsernamePutMutationResponse]> {
        const res = await request({
            method: 'PUT',
            url: \`/user/\${username}\`,
            data
        })
        return res.data
    }

    /**
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    async delByUsername(username: User.DelByUsernamePathParams['username']): Promise<[User.DelByUsernameError, User.DelByUsernameMutationResponse]> {
        const res = await request({
            method: 'DELETE',
            url: \`/user/\${username}\`
        })
        return res.data
    }

    /**
     * @summary Logs user into the system
     * @UUID loginUser
     */
    async loginGet(params: User.LoginGetQueryParams): Promise<[User.LoginGetError, User.LoginGetQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/user/login\`,
            params
        })
        return res.data
    }

    /**
     * @summary Logs out current logged in user session
     * @UUID logoutUser
     */
    async logoutGet(): Promise<[User.LogoutGetError, User.LogoutGetQueryResponse]> {
        const res = await request({
            method: 'GET',
            url: \`/user/logout\`
        })
        return res.data
    }

    /**
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    async create(data: User.CreateMutationRequest): Promise<[User.CreateError, User.CreateMutationResponse]> {
        const res = await request({
            method: 'POST',
            url: \`/user\`,
            data
        })
        return res.data
    }
}

export const userAPI = new UserAPI;
"
`;
