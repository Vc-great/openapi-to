// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`faker > getFullText 1`] = `
"import { faker } from "@faker-js/faker";
import { testDto2, test32145, apiResponse, pet } from "./fakerModels";
import type { Pet } from "./Pet";

/**
 *
 * @tag pet
 * @description Everything about your Pets
 */
class PetFaker {
    /**
     *
     * @summary summary
     * @description
     */
    testPost(): NonNullable<Pet.TestPostResponse> {
        return testDto2()
    }

    /**
     *
     * @summary summary
     * @description
     */
    testPut(): NonNullable<Pet.TestPutResponse> {
        return testDto2()
    }

    /**
     *
     * @summary summary
     * @description
     */
    delByTest(): NonNullable<Pet.DelByTestResponse> {
        return test32145()
    }

    /**
     *
     * @summary summary
     * @description
     */
    testIdGet(): NonNullable<Pet.TestIdGetResponse> {
        return testDto2()
    }

    /**
     *
     * @summary uploads an image
     * @description pet
     */
    uploadImagePost(): NonNullable<Pet.UploadImagePostResponse> {
        return apiResponse()
    }

    /**
     *
     * @summary Add a new pet to the store
     * @description
     */
    create(): NonNullable<Pet.CreateResponse> {
        return {}
    }

    /**
     *
     * @summary Update an existing pet
     * @description
     */
    update(): NonNullable<Pet.UpdateResponse> {
        return {}
    }

    /**
     *
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     */
    findByStatusGet(): NonNullable<Pet.FindByStatusGetResponse> {
        return faker.helpers.multiple(() => pet(), {
            count: 10,
        })
    }

    /**
     *
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    findByTagsGet(): NonNullable<Pet.FindByTagsGetResponse> {
        return faker.helpers.multiple(() => pet(), {
            count: 10,
        })
    }

    /**
     *
     * @summary Find pet by ID
     * @description Returns a single pet
     */
    findByPetId(): NonNullable<Pet.FindByPetIdResponse> {
        return pet()
    }

    /**
     *
     * @summary Updates a pet in the store with form data
     * @description
     */
    petIdPost(): NonNullable<Pet.PetIdPostResponse> {
        return {}
    }

    /**
     *
     * @summary Deletes a pet
     * @description
     */
    delByPetId(): NonNullable<Pet.DelByPetIdResponse> {
        return {}
    }
}

export const petFaker = new PetFaker;

import { faker } from "@faker-js/faker";
import { testDto2, test32145, apiResponse, pet, order } from "./fakerModels";
import type { Store } from "./Store";

/**
 *
 * @tag store
 * @description Access to Petstore orders
 */
class StoreFaker {
    /**
     *
     * @summary Place an order for a pet
     * @description
     */
    create(): NonNullable<Store.CreateResponse> {
        return order()
    }

    /**
     *
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     */
    findByOrderId(): NonNullable<Store.FindByOrderIdResponse> {
        return order()
    }

    /**
     *
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     */
    delByOrderId(): NonNullable<Store.DelByOrderIdResponse> {
        return {}
    }

    /**
     *
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     */
    inventoryGet(): NonNullable<Store.InventoryGetResponse> {
        return {}
    }
}

export const storeFaker = new StoreFaker;

import { faker } from "@faker-js/faker";
import { testDto2, test32145, apiResponse, pet, order, user } from "./fakerModels";
import type { User } from "./User";

/**
 *
 * @tag user
 * @description Operations about user
 */
class UserFaker {
    /**
     *
     * @summary Creates list of users with given input array
     * @description
     */
    createWithArrayPost(): NonNullable<User.CreateWithArrayPostResponse> {
        return {}
    }

    /**
     *
     * @summary Creates list of users with given input array
     * @description
     */
    createWithListPost(): NonNullable<User.CreateWithListPostResponse> {
        return {}
    }

    /**
     *
     * @summary Get user by user name
     * @description
     */
    findByUsername(): NonNullable<User.FindByUsernameResponse> {
        return user()
    }

    /**
     *
     * @summary Updated user
     * @description This can only be done by the logged in user.
     */
    usernamePut(): NonNullable<User.UsernamePutResponse> {
        return {}
    }

    /**
     *
     * @summary Delete user
     * @description This can only be done by the logged in user.
     */
    delByUsername(): NonNullable<User.DelByUsernameResponse> {
        return {}
    }

    /**
     *
     * @summary Logs user into the system
     * @description
     */
    loginGet(): NonNullable<User.LoginGetResponse> {
        return
    }

    /**
     *
     * @summary Logs out current logged in user session
     * @description
     */
    logoutGet(): NonNullable<User.LogoutGetResponse> {
        return {}
    }

    /**
     *
     * @summary Create user
     * @description This can only be done by the logged in user.
     */
    create(): NonNullable<User.CreateResponse> {
        return {}
    }
}

export const userFaker = new UserFaker;

import { testdata } from "./testdata";
import { faker } from "@faker-js/faker";
import type { Test32145 } from "../models";

/** */
export function test32145(): Test32145 {
    return {
        /**description*/
        code: faker.number.int(),
        /***/
        meta: testdata()
    }
}

import { faker } from "@faker-js/faker";
import type { Test3214 } from "../models";

/** */
export function test3214(): Test3214 {
    return {
        /**默认值*/
        columnDefault: faker.string.alpha(),
        /**description*/
        columnLength: faker.number.int(),
        /**description*/
        columnName: faker.string.alpha(),
        /**description*/
        columnRemark: faker.string.alpha(),
        /**description*/
        columnScale: faker.number.int(),
        /**description*/
        columnType: faker.string.alpha(),
        /**description*/
        delFlag: faker.datatype.boolean(),
        /***/
        formId: faker.number.int(),
        /**id*/
        id: faker.number.int(),
        /**description*/
        notNull: faker.datatype.boolean()
    }
}

import { faker } from "@faker-js/faker";
import type { Testdata } from "../models";

/** */
export function testdata(): Testdata {
    return {
        /**description*/
        number: faker.number.int(),
        /**description*/
        numberOfElements: faker.number.int(),
        /**description*/
        totalElements: faker.number.int(),
        /**description*/
        totalPages: faker.number.int()
    }
}

import { faker } from "@faker-js/faker";
import type { Sort } from "../models";

/** */
export function sort(): Sort {
    return {
        /***/
        empty: faker.datatype.boolean(),
        /***/
        sorted: faker.datatype.boolean(),
        /***/
        unsorted: faker.datatype.boolean()
    }
}

import { test3214 } from "./test3214";
import { faker } from "@faker-js/faker";
import type { TestDto3 } from "../models";

/** */
export function testDto3(): TestDto3 {
    return {
        /***/
        test3214: faker.helpers.multiple(() => test3214(), {
            count: 10,
        })
    }
}

import { testDto3 } from "./testDto3";
import { testdata } from "./testdata";
import { faker } from "@faker-js/faker";
import type { TestDto2 } from "../models";

/** */
export function testDto2(): TestDto2 {
    return {
        /***/
        content: testDto3(),
        /***/
        meta: testdata()
    }
}

import { faker } from "@faker-js/faker";
import type { Test321 } from "../models";

/** */
export function test321(): Test321 {
    return {
        /***/
        id: faker.number.int()
    }
}

import { test321 } from "./test321";
import { faker } from "@faker-js/faker";
import type { TestDto } from "../models";

/** */
export function testDto(): TestDto {
    return {
        /**test321*/
        test321: faker.helpers.multiple(() => test321(), {
            count: 10,
        })
    }
}

import { apiResponse } from "./apiResponse";
import { faker } from "@faker-js/faker";
import type { RefList } from "../models";

/** */
export function refList(): RefList {
    return {
        /***/
        content: apiResponse(),
        /**string*/
        string: faker.string.alpha(),
        /***/
        name: faker.string.alpha(),
        /**title*/
        title: faker.string.alpha(),
        /**type*/
        type: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { ApiResponse } from "../models";

/** */
export function apiResponse(): ApiResponse {
    return {
        /***/
        code: faker.number.int(),
        /***/
        type: faker.string.alpha(),
        /***/
        message: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Category } from "../models";

/** */
export function category(): Category {
    return {
        /***/
        id: faker.number.int(),
        /***/
        name: faker.string.alpha()
    }
}

import { category } from "./category";
import { tag } from "./tag";
import { faker } from "@faker-js/faker";
import type { Pet } from "../models";

/** */
export function pet(): Pet {
    return {
        /***/
        id: faker.number.int(),
        /***/
        category: category(),
        /***/
        name: faker.string.alpha(),
        /***/
        photoUrls: faker.helpers.multiple(() => faker.string.alpha(), {
            count: 10,
        }),
        /***/
        tags: faker.helpers.multiple(() => tag(), {
            count: 10,
        }),
        /**pet status in the store*/
        status: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Tag } from "../models";

/** */
export function tag(): Tag {
    return {
        /***/
        id: faker.number.int(),
        /***/
        name: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Order } from "../models";

/** */
export function order(): Order {
    return {
        /***/
        id: faker.number.int(),
        /***/
        petId: faker.number.int(),
        /***/
        quantity: faker.number.int(),
        /***/
        shipDate: faker.string.alpha(),
        /**Order Status*/
        status: faker.string.alpha(),
        /***/
        complete: faker.datatype.boolean()
    }
}

import { faker } from "@faker-js/faker";
import type { User } from "../models";

/** */
export function user(): User {
    return {
        /***/
        id: faker.number.int(),
        /***/
        username: faker.string.alpha(),
        /***/
        firstName: faker.string.alpha(),
        /***/
        lastName: faker.string.alpha(),
        /***/
        email: faker.string.alpha(),
        /***/
        password: faker.string.alpha(),
        /***/
        phone: faker.string.alpha(),
        /**User Status*/
        userStatus: faker.number.int()
    }
}

export * from "./testdata";
export * from "./test32145";
export * from "./test3214";
export * from "./sort";
export * from "./testDto3";
export * from "./testDto2";
export * from "./test321";
export * from "./testDto";
export * from "./apiResponse";
export * from "./refList";
export * from "./category";
export * from "./tag";
export * from "./pet";
export * from "./order";
export * from "./user";
"
`;
