// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`serviceGenerator > service 1`] = `
"import { Injectable } from "@nestjs/common";
import { PetRepository } from "./repository/pet.repository";
import { FindAllQueryDto } from "./domain/findAll-query.dto";
import { FindAllUserVo } from "./domain/FindAllUser.vo";
import { testBodyDto } from "./domain/testBodyDto.dto";
import { testDto2 } from "./domain/testDto2.vo";
import { test32145 } from "./domain/test32145.vo";
import { CreateUpdateUserDto } from "./domain/CreateUpdateUserDto.dto";
import { TestidgetQueryDto } from "./domain/testidget-query.dto";
import { ApiResponse } from "./domain/ApiResponse.vo";
import { Pet } from "./domain/Pet.dto";
import { FindPetsByStatusQueryDto } from "./domain/findPetsByStatus-query.dto";
import { FindPetsByTagsQueryDto } from "./domain/findPetsByTags-query.dto";

@Injectable
export class PetService {
    constructor(private readonly petRepository: PetRepository) {
    }

    async findAll(query: FindAllQueryDto): Promise<FindAllUserVo> {
        return await this.petRepository.findAll(query)
    }

    async test(data: testBodyDto): Promise<testDto2> {
        return await this.petRepository.test(data)
    }

    async testput(data: testBodyDto): Promise<testDto2> {
        return await this.petRepository.testput(data)
    }

    async testdelete(data: number[]): Promise<test32145> {
        return await this.petRepository.testdelete(data)
    }

    async batchCreate(data: CreateUpdateUserDto[]): Promise<testDto2> {
        return await this.petRepository.batchCreate(data)
    }

    async testidget(testId: number, query: TestidgetQueryDto): Promise<testDto2> {
        return await this.petRepository.testidget(testId, query)
    }

    async uploadFile(petId: number, data: any): Promise<ApiResponse> {
        return await this.petRepository.uploadFile(petId, data)
    }

    async addPet(data: Pet): Promise<void> {
        return await this.petRepository.addPet(data)
    }

    async updatePet(data: Pet): Promise<void> {
        return await this.petRepository.updatePet(data)
    }

    async findPetsByStatus(query: FindPetsByStatusQueryDto): Promise<Pet[]> {
        return await this.petRepository.findPetsByStatus(query)
    }

    async findPetsByTags(query: FindPetsByTagsQueryDto): Promise<Pet[]> {
        return await this.petRepository.findPetsByTags(query)
    }

    async getPetById(petId: number): Promise<Pet> {
        return await this.petRepository.getPetById(petId)
    }

    async updatePetWithForm(petId: number, data: any): Promise<void> {
        return await this.petRepository.updatePetWithForm(petId, data)
    }

    async deletePet(petId: number): Promise<void> {
        return await this.petRepository.deletePet(petId)
    }
}

import { Injectable } from "@nestjs/common";
import { StoreRepository } from "./repository/store.repository";
import { Order } from "./domain/Order.dto";

@Injectable
export class StoreService {
    constructor(private readonly storeRepository: StoreRepository) {
    }

    async placeOrder(data: Order): Promise<Order> {
        return await this.storeRepository.placeOrder(data)
    }

    async getOrderById(orderId: number): Promise<Order> {
        return await this.storeRepository.getOrderById(orderId)
    }

    async deleteOrder(orderId: number): Promise<void> {
        return await this.storeRepository.deleteOrder(orderId)
    }

    async getInventory(): Promise<void> {
        return await this.storeRepository.getInventory()
    }
}

import { Injectable } from "@nestjs/common";
import { UserRepository } from "./repository/user.repository";
import { UserArray } from "./domain/UserArray.dto";
import { User } from "./domain/User.vo";
import { LoginUserQueryDto } from "./domain/loginUser-query.dto";

@Injectable
export class UserService {
    constructor(private readonly userRepository: UserRepository) {
    }

    async createUsersWithArrayInput(data: UserArray[]): Promise<void> {
        return await this.userRepository.createUsersWithArrayInput(data)
    }

    async createUsersWithListInput(data: UserArray[]): Promise<void> {
        return await this.userRepository.createUsersWithListInput(data)
    }

    async getUserByName(username: string): Promise<User> {
        return await this.userRepository.getUserByName(username)
    }

    async updateUser(username: string, data: User): Promise<void> {
        return await this.userRepository.updateUser(username, data)
    }

    async deleteUser(username: string): Promise<void> {
        return await this.userRepository.deleteUser(username)
    }

    async loginUser(query: LoginUserQueryDto): Promise<void> {
        return await this.userRepository.loginUser(query)
    }

    async logoutUser(): Promise<void> {
        return await this.userRepository.logoutUser()
    }

    async createUser(data: User): Promise<void> {
        return await this.userRepository.createUser(data)
    }
}
"
`;
