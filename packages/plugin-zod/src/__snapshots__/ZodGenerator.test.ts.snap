// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`zodGenerator > compare zodGenerator getFullText 1`] = `
"import { z } from "zod";
import { testDto2Schema, test32145Schema, apiResponseSchema, petSchema } from "./zod-schemas";
export const petFindByStatusGetQueryParamsStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
export const PetFindByStatusGetQueryParamsStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
export const PetFindByStatusGetQueryParamsStatusEnumOption = [{
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Available,
    value: PetFindByStatusGetQueryParamsStatusEnum.Available
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Pending,
    value: PetFindByStatusGetQueryParamsStatusEnum.Pending
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Sold,
    value: PetFindByStatusGetQueryParamsStatusEnum.Sold
}];
/**
 * @description OK
 */
const testPostMutationResponse = z.lazy(() => testDto2Schema);
const testPostError = z.unknown();
/**
 * @description OK
 */
const testPutMutationResponse = z.lazy(() => testDto2Schema);
const testPutError = z.unknown();
const delByTestMutationRequest = z.number().array();
/**
 * @description OK
 */
const delByTestMutationResponse = z.lazy(() => test32145Schema);
const delByTestError = z.unknown();
/**
 * @description queryParams
 */
const testIdGetQueryParams = z.object({
    /**
    *@description:fields
    */
    fields: z.string().array().optional(),
    /**
    *@description:页码 (0..N)，默认为0
    */
    page: z.number(),
    /**
    *@description:每页显示的数目,默认为10
    */
    size: z.number()
});
/**
 * @description pathParams
 */
export const testIdGetPathParams = z.object({
    /**
    *@description:test-id
    */
    testId: z.number().optional(),
    /**
    *@description:test-id
    */
    testId2: z.string().optional()
});
/**
 * @description OK
 */
const testIdGetQueryResponse = z.lazy(() => testDto2Schema);
const testIdGetError = z.unknown();
/**
 * @description queryParams
 */
const uploadImageOctetStreamPostQueryParams = z.object({
    /**
    *@description:Additional Metadata
    */
    additionalMetadata: z.string().optional()
});
/**
 * @description pathParams
 */
export const uploadImageOctetStreamPostPathParams = z.object({
    /**
    *@description:ID of pet to update
    */
    petId: z.number()
});
const uploadImageOctetStreamPostMutationRequest = z.instanceof(File);
/**
 * @description successful operation
 */
const uploadImageOctetStreamPostMutationResponse = z.lazy(() => apiResponseSchema);
const uploadImageOctetStreamPostError = z.unknown();
/**
 * @description pathParams
 */
export const uploadImagePostPathParams = z.object({
    /**
    *@description:ID of pet to update
    */
    petId: z.number()
});
const uploadImagePostMutationRequest = z.object({
    /**
    *@description:Additional data to pass to server
    */
    additionalMetadata: z.string().optional(),
    /**
    *@description:file to upload
    */
    file: z.string().optional()
});
/**
 * @description successful operation
 */
const uploadImagePostMutationResponse = z.lazy(() => apiResponseSchema);
const uploadImagePostError = z.unknown();
const createError = z.unknown();
const createMutationResponse = z.unknown();
const updateError = z.unknown();
const updateMutationResponse = z.unknown();
/**
 * @description queryParams
 */
const findByStatusGetQueryParams = z.object({
    /**
    *@description:Status values that need to be considered for filter
    */
    status: z.nativeEnum(PetFindByStatusGetQueryParamsStatusEnum)
});
/**
 * @description successful operation
 */
const findByStatusGetQueryResponse = z.lazy(() => petSchema.array());
const findByStatusGetError = z.unknown();
/**
 * @description queryParams
 */
const findByTagsGetQueryParams = z.object({
    /**
    *@description:Tags to filter by
    */
    tags: z.string().array()
});
/**
 * @description successful operation
 */
const findByTagsGetQueryResponse = z.lazy(() => petSchema.array());
const findByTagsGetError = z.unknown();
/**
 * @description pathParams
 */
export const findByPetIdPathParams = z.object({
    /**
    *@description:ID of pet to return
    */
    petId: z.number()
});
/**
 * @description successful operation
 */
const findByPetIdQueryResponse = z.lazy(() => petSchema);
const findByPetIdError = z.unknown();
/**
 * @description pathParams
 */
export const petIdPostPathParams = z.object({
    /**
    *@description:ID of pet that needs to be updated
    */
    petId: z.number()
});
const petIdPostMutationRequest = z.object({
    /**
    *@description:Updated name of the pet
    */
    name: z.string().optional(),
    /**
    *@description:Updated status of the pet
    */
    status: z.string().optional()
});
const petIdPostError = z.unknown();
const petIdPostMutationResponse = z.unknown();
/**
 * @description pathParams
 */
export const delByPetIdPathParams = z.object({
    /**
    *@description:Pet id to delete
    */
    petId: z.number()
});
const delByPetIdError = z.unknown();
const delByPetIdMutationResponse = z.unknown();
/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID zod-pet
 */
export const newPetZod = {
    /**
    *@description:OK
    */
    testPostMutationResponse,
    testPostError,
    /**
    *@description:OK
    */
    testPutMutationResponse,
    testPutError,
    delByTestMutationRequest,
    /**
    *@description:OK
    */
    delByTestMutationResponse,
    delByTestError,
    /**
    *@description:queryParams
    */
    testIdGetQueryParams,
    /**
    *@description:pathParams
    */
    testIdGetPathParams,
    /**
    *@description:OK
    */
    testIdGetQueryResponse,
    testIdGetError,
    /**
    *@description:queryParams
    */
    uploadImageOctetStreamPostQueryParams,
    /**
    *@description:pathParams
    */
    uploadImageOctetStreamPostPathParams,
    uploadImageOctetStreamPostMutationRequest,
    /**
    *@description:successful operation
    */
    uploadImageOctetStreamPostMutationResponse,
    uploadImageOctetStreamPostError,
    /**
    *@description:pathParams
    */
    uploadImagePostPathParams,
    uploadImagePostMutationRequest,
    /**
    *@description:successful operation
    */
    uploadImagePostMutationResponse,
    uploadImagePostError,
    createError,
    createMutationResponse,
    updateError,
    updateMutationResponse,
    /**
    *@description:queryParams
    */
    findByStatusGetQueryParams,
    /**
    *@description:successful operation
    */
    findByStatusGetQueryResponse,
    findByStatusGetError,
    /**
    *@description:queryParams
    */
    findByTagsGetQueryParams,
    /**
    *@description:successful operation
    */
    findByTagsGetQueryResponse,
    findByTagsGetError,
    /**
    *@description:pathParams
    */
    findByPetIdPathParams,
    /**
    *@description:successful operation
    */
    findByPetIdQueryResponse,
    findByPetIdError,
    /**
    *@description:pathParams
    */
    petIdPostPathParams,
    petIdPostMutationRequest,
    petIdPostError,
    petIdPostMutationResponse,
    /**
    *@description:pathParams
    */
    delByPetIdPathParams,
    delByPetIdError,
    delByPetIdMutationResponse
};

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID zod-pet
 */
export namespace Pet {
    /**
     * @description OK
     */
    export type TestPostMutationResponse = z.infer<typeof testPostMutationResponse>;
    export type TestPostError = z.infer<typeof testPostError>;
    /**
     * @description OK
     */
    export type TestPutMutationResponse = z.infer<typeof testPutMutationResponse>;
    export type TestPutError = z.infer<typeof testPutError>;
    export type DelByTestMutationRequest = z.infer<typeof delByTestMutationRequest>;
    /**
     * @description OK
     */
    export type DelByTestMutationResponse = z.infer<typeof delByTestMutationResponse>;
    export type DelByTestError = z.infer<typeof delByTestError>;
    /**
     * @description queryParams
     */
    export type TestIdGetQueryParams = z.infer<typeof testIdGetQueryParams>;
    /**
     * @description pathParams
     */
    export type TestIdGetPathParams = z.infer<typeof testIdGetPathParams>;
    /**
     * @description OK
     */
    export type TestIdGetQueryResponse = z.infer<typeof testIdGetQueryResponse>;
    export type TestIdGetError = z.infer<typeof testIdGetError>;
    /**
     * @description queryParams
     */
    export type UploadImageOctetStreamPostQueryParams = z.infer<typeof uploadImageOctetStreamPostQueryParams>;
    /**
     * @description pathParams
     */
    export type UploadImageOctetStreamPostPathParams = z.infer<typeof uploadImageOctetStreamPostPathParams>;
    export type UploadImageOctetStreamPostMutationRequest = z.infer<typeof uploadImageOctetStreamPostMutationRequest>;
    /**
     * @description successful operation
     */
    export type UploadImageOctetStreamPostMutationResponse = z.infer<typeof uploadImageOctetStreamPostMutationResponse>;
    export type UploadImageOctetStreamPostError = z.infer<typeof uploadImageOctetStreamPostError>;
    /**
     * @description pathParams
     */
    export type UploadImagePostPathParams = z.infer<typeof uploadImagePostPathParams>;
    export type UploadImagePostMutationRequest = z.infer<typeof uploadImagePostMutationRequest>;
    /**
     * @description successful operation
     */
    export type UploadImagePostMutationResponse = z.infer<typeof uploadImagePostMutationResponse>;
    export type UploadImagePostError = z.infer<typeof uploadImagePostError>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateMutationResponse = z.infer<typeof createMutationResponse>;
    export type UpdateError = z.infer<typeof updateError>;
    export type UpdateMutationResponse = z.infer<typeof updateMutationResponse>;
    /**
     * @description queryParams
     */
    export type FindByStatusGetQueryParams = z.infer<typeof findByStatusGetQueryParams>;
    /**
     * @description successful operation
     */
    export type FindByStatusGetQueryResponse = z.infer<typeof findByStatusGetQueryResponse>;
    export type FindByStatusGetError = z.infer<typeof findByStatusGetError>;
    /**
     * @description queryParams
     */
    export type FindByTagsGetQueryParams = z.infer<typeof findByTagsGetQueryParams>;
    /**
     * @description successful operation
     */
    export type FindByTagsGetQueryResponse = z.infer<typeof findByTagsGetQueryResponse>;
    export type FindByTagsGetError = z.infer<typeof findByTagsGetError>;
    /**
     * @description pathParams
     */
    export type FindByPetIdPathParams = z.infer<typeof findByPetIdPathParams>;
    /**
     * @description successful operation
     */
    export type FindByPetIdQueryResponse = z.infer<typeof findByPetIdQueryResponse>;
    export type FindByPetIdError = z.infer<typeof findByPetIdError>;
    /**
     * @description pathParams
     */
    export type PetIdPostPathParams = z.infer<typeof petIdPostPathParams>;
    export type PetIdPostMutationRequest = z.infer<typeof petIdPostMutationRequest>;
    export type PetIdPostError = z.infer<typeof petIdPostError>;
    export type PetIdPostMutationResponse = z.infer<typeof petIdPostMutationResponse>;
    /**
     * @description pathParams
     */
    export type DelByPetIdPathParams = z.infer<typeof delByPetIdPathParams>;
    export type DelByPetIdError = z.infer<typeof delByPetIdError>;
    export type DelByPetIdMutationResponse = z.infer<typeof delByPetIdMutationResponse>;
}

import { z } from "zod";
import { orderSchema } from "./zod-schemas";
const createMutationRequest = z.lazy(() => orderSchema);
/**
 * @description successful operation
 */
const createMutationResponse = z.lazy(() => orderSchema);
const createError = z.unknown();
/**
 * @description pathParams
 */
export const findByOrderIdPathParams = z.object({
    /**
    *@description:ID of pet that needs to be fetched
    */
    orderId: z.number()
});
/**
 * @description successful operation
 */
const findByOrderIdQueryResponse = z.lazy(() => orderSchema);
const findByOrderIdError = z.unknown();
/**
 * @description pathParams
 */
export const delByOrderIdPathParams = z.object({
    /**
    *@description:ID of the order that needs to be deleted
    */
    orderId: z.number()
});
const delByOrderIdError = z.unknown();
const delByOrderIdMutationResponse = z.unknown();
/**
 * @description successful operation
 */
const inventoryGetQueryResponse = z.object({});
const inventoryGetError = z.unknown();
/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID zod-store
 */
export const storeZod = {
    createMutationRequest,
    /**
    *@description:successful operation
    */
    createMutationResponse,
    createError,
    /**
    *@description:pathParams
    */
    findByOrderIdPathParams,
    /**
    *@description:successful operation
    */
    findByOrderIdQueryResponse,
    findByOrderIdError,
    /**
    *@description:pathParams
    */
    delByOrderIdPathParams,
    delByOrderIdError,
    delByOrderIdMutationResponse,
    /**
    *@description:successful operation
    */
    inventoryGetQueryResponse,
    inventoryGetError
};

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID zod-store
 */
export namespace Store {
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    /**
     * @description successful operation
     */
    export type CreateMutationResponse = z.infer<typeof createMutationResponse>;
    export type CreateError = z.infer<typeof createError>;
    /**
     * @description pathParams
     */
    export type FindByOrderIdPathParams = z.infer<typeof findByOrderIdPathParams>;
    /**
     * @description successful operation
     */
    export type FindByOrderIdQueryResponse = z.infer<typeof findByOrderIdQueryResponse>;
    export type FindByOrderIdError = z.infer<typeof findByOrderIdError>;
    /**
     * @description pathParams
     */
    export type DelByOrderIdPathParams = z.infer<typeof delByOrderIdPathParams>;
    export type DelByOrderIdError = z.infer<typeof delByOrderIdError>;
    export type DelByOrderIdMutationResponse = z.infer<typeof delByOrderIdMutationResponse>;
    /**
     * @description successful operation
     */
    export type InventoryGetQueryResponse = z.infer<typeof inventoryGetQueryResponse>;
    export type InventoryGetError = z.infer<typeof inventoryGetError>;
}

import { z } from "zod";
import { userSchema } from "./zod-schemas";
const createWithArrayPostError = z.unknown();
const createWithArrayPostMutationResponse = z.unknown();
const createWithListPostError = z.unknown();
const createWithListPostMutationResponse = z.unknown();
/**
 * @description pathParams
 */
export const findByUsernamePathParams = z.object({
    /**
    *@description:The name that needs to be fetched. Use user1 for testing. 
    */
    username: z.string()
});
/**
 * @description successful operation
 */
const findByUsernameQueryResponse = z.lazy(() => userSchema);
const findByUsernameError = z.unknown();
/**
 * @description pathParams
 */
export const usernamePutPathParams = z.object({
    /**
    *@description:name that need to be updated
    */
    username: z.string()
});
const usernamePutMutationRequest = z.lazy(() => userSchema);
const usernamePutError = z.unknown();
const usernamePutMutationResponse = z.unknown();
/**
 * @description pathParams
 */
export const delByUsernamePathParams = z.object({
    /**
    *@description:The name that needs to be deleted
    */
    username: z.string()
});
const delByUsernameError = z.unknown();
const delByUsernameMutationResponse = z.unknown();
/**
 * @description queryParams
 */
const loginGetQueryParams = z.object({
    /**
    *@description:The user name for login
    */
    username: z.string(),
    /**
    *@description:The password for login in clear text
    */
    password: z.string()
});
/**
 * @description successful operation
 */
const loginGetQueryResponse;
const loginGetError = z.unknown();
const logoutGetError = z.unknown();
const logoutGetQueryResponse = z.unknown();
const createMutationRequest = z.lazy(() => userSchema);
const createError = z.unknown();
const createMutationResponse = z.unknown();
/**
 * @tag user
 * @description Operations about user
 * @UUID zod-user
 */
export const userZod = {
    createWithArrayPostError,
    createWithArrayPostMutationResponse,
    createWithListPostError,
    createWithListPostMutationResponse,
    /**
    *@description:pathParams
    */
    findByUsernamePathParams,
    /**
    *@description:successful operation
    */
    findByUsernameQueryResponse,
    findByUsernameError,
    /**
    *@description:pathParams
    */
    usernamePutPathParams,
    usernamePutMutationRequest,
    usernamePutError,
    usernamePutMutationResponse,
    /**
    *@description:pathParams
    */
    delByUsernamePathParams,
    delByUsernameError,
    delByUsernameMutationResponse,
    /**
    *@description:queryParams
    */
    loginGetQueryParams,
    /**
    *@description:successful operation
    */
    loginGetQueryResponse,
    loginGetError,
    logoutGetError,
    logoutGetQueryResponse,
    createMutationRequest,
    createError,
    createMutationResponse
};

/**
 * @tag user
 * @description Operations about user
 * @UUID zod-user
 */
export namespace User {
    export type CreateWithArrayPostError = z.infer<typeof createWithArrayPostError>;
    export type CreateWithArrayPostMutationResponse = z.infer<typeof createWithArrayPostMutationResponse>;
    export type CreateWithListPostError = z.infer<typeof createWithListPostError>;
    export type CreateWithListPostMutationResponse = z.infer<typeof createWithListPostMutationResponse>;
    /**
     * @description pathParams
     */
    export type FindByUsernamePathParams = z.infer<typeof findByUsernamePathParams>;
    /**
     * @description successful operation
     */
    export type FindByUsernameQueryResponse = z.infer<typeof findByUsernameQueryResponse>;
    export type FindByUsernameError = z.infer<typeof findByUsernameError>;
    /**
     * @description pathParams
     */
    export type UsernamePutPathParams = z.infer<typeof usernamePutPathParams>;
    export type UsernamePutMutationRequest = z.infer<typeof usernamePutMutationRequest>;
    export type UsernamePutError = z.infer<typeof usernamePutError>;
    export type UsernamePutMutationResponse = z.infer<typeof usernamePutMutationResponse>;
    /**
     * @description pathParams
     */
    export type DelByUsernamePathParams = z.infer<typeof delByUsernamePathParams>;
    export type DelByUsernameError = z.infer<typeof delByUsernameError>;
    export type DelByUsernameMutationResponse = z.infer<typeof delByUsernameMutationResponse>;
    /**
     * @description queryParams
     */
    export type LoginGetQueryParams = z.infer<typeof loginGetQueryParams>;
    /**
     * @description successful operation
     */
    export type LoginGetQueryResponse = z.infer<typeof loginGetQueryResponse>;
    export type LoginGetError = z.infer<typeof loginGetError>;
    export type LogoutGetError = z.infer<typeof logoutGetError>;
    export type LogoutGetQueryResponse = z.infer<typeof logoutGetQueryResponse>;
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateMutationResponse = z.infer<typeof createMutationResponse>;
}

import { testdataSchema } from "./testdata.schema";
import { z } from "zod";
/** @UUID zod-test32145 */
export const test32145Schema = z.object({
    /**
    *@description:description
    */
    code: z.number().optional(),
    meta: z.lazy(() => testdata).optional()
});
/** @UUID zod-test32145 */
export type Test32145Model = z.infer<typeof test32145Schema>;

/**
 * @description description
 */
export const test3214ColumnTypeEnumLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/**
 * @description description
 */
export const Test3214ColumnTypeEnum = {
    Char: 'CHAR',
    Char2: 'CHAR2',
    Char3: 'CHAR3'
} as const;
/** description */
export const Test3214ColumnTypeEnumOption = [{
    label: test3214ColumnTypeEnumLabel.Char,
    value: Test3214ColumnTypeEnum.Char
}, {
    label: test3214ColumnTypeEnumLabel.Char2,
    value: Test3214ColumnTypeEnum.Char2
}, {
    label: test3214ColumnTypeEnumLabel.Char3,
    value: Test3214ColumnTypeEnum.Char3
}];
import { z } from "zod";
/** @UUID zod-test3214 */
export const test3214Schema = z.object({
    /**
    *@description:默认值
    */
    columnDefault: z.string().optional(),
    /**
    *@description:description
    */
    columnLength: z.number().optional(),
    /**
    *@description:description
    */
    columnName: z.string().optional(),
    /**
    *@description:description
    */
    columnRemark: z.string().optional(),
    /**
    *@description:description
    */
    columnScale: z.number().optional(),
    /**
    *@description:description
    */
    columnType: z.nativeEnum(Test3214ColumnTypeEnum).optional(),
    /**
    *@description:description
    */
    delFlag: z.boolean().optional(),
    formId: z.number().optional(),
    /**
    *@description:id
    */
    id: z.number().optional(),
    /**
    *@description:description
    */
    notNull: z.boolean().optional()
});
/** @UUID zod-test3214 */
export type Test3214Model = z.infer<typeof test3214Schema>;

import { z } from "zod";
/** @UUID zod-testdata */
export const testdataSchema = z.object({
    /**
    *@description:description
    */
    number: z.number().optional(),
    /**
    *@description:description
    */
    numberOfElements: z.number().optional(),
    /**
    *@description:description
    */
    totalElements: z.number().optional(),
    /**
    *@description:description
    */
    totalPages: z.number().optional()
});
/** @UUID zod-testdata */
export type TestdataModel = z.infer<typeof testdataSchema>;

import { z } from "zod";
/** @UUID zod-sort */
export const sortSchema = z.object({
    empty: z.boolean().optional(),
    sorted: z.boolean().optional(),
    unsorted: z.boolean().optional()
});
/** @UUID zod-sort */
export type SortModel = z.infer<typeof sortSchema>;

import { test3214Schema } from "./test3214.schema";
import { z } from "zod";
/** @UUID zod-testDto3 */
export const testDto3Schema = z.object({
    test3214: z.lazy(() => test3214Schema.array()).optional()
});
/** @UUID zod-testDto3 */
export type TestDto3Model = z.infer<typeof testDto3Schema>;

import { testDto3Schema } from "./testDto3.schema";
import { testdataSchema } from "./testdata.schema";
import { z } from "zod";
/** @UUID zod-testDto2 */
export const testDto2Schema = z.object({
    content: z.lazy(() => testDto3).optional(),
    meta: z.lazy(() => testdata).optional()
});
/** @UUID zod-testDto2 */
export type TestDto2Model = z.infer<typeof testDto2Schema>;

import { z } from "zod";
/** @UUID zod-test321 */
export const test321Schema = z.object({
    id: z.number().optional()
});
/** @UUID zod-test321 */
export type Test321Model = z.infer<typeof test321Schema>;

import { test321Schema } from "./test321.schema";
import { z } from "zod";
/** @UUID zod-testDto */
export const testDtoSchema = z.object({
    /**
    *@description:test321
    */
    test321: z.lazy(() => test321Schema.array()).optional()
});
/** @UUID zod-testDto */
export type TestDtoModel = z.infer<typeof testDtoSchema>;

import { apiResponseSchema } from "./apiResponse.schema";
import { z } from "zod";
/** @UUID zod-refList */
export const refListSchema = z.object({
    content: z.lazy(() => apiResponse).optional(),
    /**
    *@description:string
    */
    string: z.string().optional(),
    name: z.string().optional(),
    /**
    *@description:title
    */
    title: z.string().optional(),
    /**
    *@description:type
    */
    type: z.string().optional()
});
/** @UUID zod-refList */
export type RefListModel = z.infer<typeof refListSchema>;

import { z } from "zod";
/** @UUID zod-apiResponse */
export const apiResponseSchema = z.object({
    code: z.number().optional(),
    type: z.string().optional(),
    message: z.string().optional()
});
/** @UUID zod-apiResponse */
export type ApiResponseModel = z.infer<typeof apiResponseSchema>;

import { z } from "zod";
/** @UUID zod-category */
export const categorySchema = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});
/** @UUID zod-category */
export type CategoryModel = z.infer<typeof categorySchema>;

import { categorySchema } from "./category.schema";
import { tagSchema } from "./tag.schema";
/**
 * @description pet status in the store
 */
export const petStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/**
 * @description pet status in the store
 */
export const PetStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
/** pet status in the store */
export const PetStatusEnumOption = [{
    label: petStatusEnumLabel.Available,
    value: PetStatusEnum.Available
}, {
    label: petStatusEnumLabel.Pending,
    value: PetStatusEnum.Pending
}, {
    label: petStatusEnumLabel.Sold,
    value: PetStatusEnum.Sold
}];
import { z } from "zod";
/** @UUID zod-pet */
export const newPetZod = z.object({
    id: z.number().optional(),
    category: z.lazy(() => category).optional(),
    name: z.string(),
    photoUrls: z.string().array(),
    tags: z.lazy(() => tagSchema.array()).optional(),
    /**
    *@description:pet status in the store
    */
    status: z.nativeEnum(PetStatusEnum).optional()
});
/** @UUID zod-pet */
export type PetModel = z.infer<typeof petSchema>;

import { z } from "zod";
/** @UUID zod-tag */
export const tagSchema = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});
/** @UUID zod-tag */
export type TagModel = z.infer<typeof tagSchema>;

/**
 * @description Order Status
 */
export const orderStatusEnumLabel = {
    Placed: '',
    Approved: '',
    Delivered: ''
};
/**
 * @description Order Status
 */
export const OrderStatusEnum = {
    Placed: 'placed',
    Approved: 'approved',
    Delivered: 'delivered'
} as const;
/** Order Status */
export const OrderStatusEnumOption = [{
    label: orderStatusEnumLabel.Placed,
    value: OrderStatusEnum.Placed
}, {
    label: orderStatusEnumLabel.Approved,
    value: OrderStatusEnum.Approved
}, {
    label: orderStatusEnumLabel.Delivered,
    value: OrderStatusEnum.Delivered
}];
import { z } from "zod";
/** @UUID zod-order */
export const orderSchema = z.object({
    id: z.number().optional(),
    petId: z.number().optional(),
    quantity: z.number().optional(),
    shipDate: z.string().optional(),
    /**
    *@description:Order Status
    */
    status: z.nativeEnum(OrderStatusEnum).optional(),
    complete: z.boolean().optional()
});
/** @UUID zod-order */
export type OrderModel = z.infer<typeof orderSchema>;

import { z } from "zod";
/** @UUID zod-user */
export const userZod = z.object({
    id: z.number().optional(),
    username: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    password: z.string().optional(),
    phone: z.string().optional(),
    /**
    *@description:User Status
    */
    userStatus: z.number().optional()
});
/** @UUID zod-user */
export type UserModel = z.infer<typeof userSchema>;

export * from "./test32145.schema";
export * from "./test3214.schema";
export * from "./testdata.schema";
export * from "./sort.schema";
export * from "./testDto3.schema";
export * from "./testDto2.schema";
export * from "./test321.schema";
export * from "./testDto.schema";
export * from "./refList.schema";
export * from "./apiResponse.schema";
export * from "./category.schema";
export * from "./newPetZod.schema";
export * from "./tag.schema";
export * from "./order.schema";
export * from "./userZod.schema";
"
`;

exports[`zodGenerator > zodGenerator getFullText 1`] = `
"import { z } from "zod";
import { testDto2Schema, test32145Schema, apiResponseSchema, petSchema } from "./zod-schemas";
export const petFindByStatusGetQueryParamsStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
export const PetFindByStatusGetQueryParamsStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
export const PetFindByStatusGetQueryParamsStatusEnumOption = [{
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Available,
    value: PetFindByStatusGetQueryParamsStatusEnum.Available
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Pending,
    value: PetFindByStatusGetQueryParamsStatusEnum.Pending
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Sold,
    value: PetFindByStatusGetQueryParamsStatusEnum.Sold
}];
/**
 * @description OK
 */
const testPostMutationResponse = z.lazy(() => testDto2Schema);
const testPostError = z.unknown();
/**
 * @description OK
 */
const testPutMutationResponse = z.lazy(() => testDto2Schema);
const testPutError = z.unknown();
const delByTestMutationRequest = z.number().array();
/**
 * @description OK
 */
const delByTestMutationResponse = z.lazy(() => test32145Schema);
const delByTestError = z.unknown();
/**
 * @description queryParams
 */
const testIdGetQueryParams = z.object({
    /**
    *@description:fields
    */
    fields: z.string().array().optional(),
    /**
    *@description:页码 (0..N)，默认为0
    */
    page: z.number(),
    /**
    *@description:每页显示的数目,默认为10
    */
    size: z.number()
});
/**
 * @description pathParams
 */
export const testIdGetPathParams = z.object({
    /**
    *@description:test-id
    */
    testId: z.number().optional(),
    /**
    *@description:test-id
    */
    testId2: z.string().optional()
});
/**
 * @description OK
 */
const testIdGetQueryResponse = z.lazy(() => testDto2Schema);
const testIdGetError = z.unknown();
/**
 * @description queryParams
 */
const uploadImageOctetStreamPostQueryParams = z.object({
    /**
    *@description:Additional Metadata
    */
    additionalMetadata: z.string().optional()
});
/**
 * @description pathParams
 */
export const uploadImageOctetStreamPostPathParams = z.object({
    /**
    *@description:ID of pet to update
    */
    petId: z.number()
});
const uploadImageOctetStreamPostMutationRequest = z.instanceof(File);
/**
 * @description successful operation
 */
const uploadImageOctetStreamPostMutationResponse = z.lazy(() => apiResponseSchema);
const uploadImageOctetStreamPostError = z.unknown();
/**
 * @description pathParams
 */
export const uploadImagePostPathParams = z.object({
    /**
    *@description:ID of pet to update
    */
    petId: z.number()
});
const uploadImagePostMutationRequest = z.object({
    /**
    *@description:Additional data to pass to server
    */
    additionalMetadata: z.string().optional(),
    /**
    *@description:file to upload
    */
    file: z.string().optional()
});
/**
 * @description successful operation
 */
const uploadImagePostMutationResponse = z.lazy(() => apiResponseSchema);
const uploadImagePostError = z.unknown();
const createError = z.unknown();
const createMutationResponse = z.unknown();
const updateError = z.unknown();
const updateMutationResponse = z.unknown();
/**
 * @description queryParams
 */
const findByStatusGetQueryParams = z.object({
    /**
    *@description:Status values that need to be considered for filter
    */
    status: z.nativeEnum(PetFindByStatusGetQueryParamsStatusEnum)
});
/**
 * @description successful operation
 */
const findByStatusGetQueryResponse = z.lazy(() => petSchema.array());
const findByStatusGetError = z.unknown();
/**
 * @description queryParams
 */
const findByTagsGetQueryParams = z.object({
    /**
    *@description:Tags to filter by
    */
    tags: z.string().array()
});
/**
 * @description successful operation
 */
const findByTagsGetQueryResponse = z.lazy(() => petSchema.array());
const findByTagsGetError = z.unknown();
/**
 * @description pathParams
 */
export const findByPetIdPathParams = z.object({
    /**
    *@description:ID of pet to return
    */
    petId: z.number()
});
/**
 * @description successful operation
 */
const findByPetIdQueryResponse = z.lazy(() => petSchema);
const findByPetIdError = z.unknown();
/**
 * @description pathParams
 */
export const petIdPostPathParams = z.object({
    /**
    *@description:ID of pet that needs to be updated
    */
    petId: z.number()
});
const petIdPostMutationRequest = z.object({
    /**
    *@description:Updated name of the pet
    */
    name: z.string().optional(),
    /**
    *@description:Updated status of the pet
    */
    status: z.string().optional()
});
const petIdPostError = z.unknown();
const petIdPostMutationResponse = z.unknown();
/**
 * @description pathParams
 */
export const delByPetIdPathParams = z.object({
    /**
    *@description:Pet id to delete
    */
    petId: z.number()
});
const delByPetIdError = z.unknown();
const delByPetIdMutationResponse = z.unknown();
/**
 * @tag pet
 * @description Everything about your Pets
 */
export const petSchemas = {
    /**
    *@description:OK
    */
    testPostMutationResponse,
    testPostError,
    /**
    *@description:OK
    */
    testPutMutationResponse,
    testPutError,
    delByTestMutationRequest,
    /**
    *@description:OK
    */
    delByTestMutationResponse,
    delByTestError,
    /**
    *@description:queryParams
    */
    testIdGetQueryParams,
    /**
    *@description:pathParams
    */
    testIdGetPathParams,
    /**
    *@description:OK
    */
    testIdGetQueryResponse,
    testIdGetError,
    /**
    *@description:queryParams
    */
    uploadImageOctetStreamPostQueryParams,
    /**
    *@description:pathParams
    */
    uploadImageOctetStreamPostPathParams,
    uploadImageOctetStreamPostMutationRequest,
    /**
    *@description:successful operation
    */
    uploadImageOctetStreamPostMutationResponse,
    uploadImageOctetStreamPostError,
    /**
    *@description:pathParams
    */
    uploadImagePostPathParams,
    uploadImagePostMutationRequest,
    /**
    *@description:successful operation
    */
    uploadImagePostMutationResponse,
    uploadImagePostError,
    createError,
    createMutationResponse,
    updateError,
    updateMutationResponse,
    /**
    *@description:queryParams
    */
    findByStatusGetQueryParams,
    /**
    *@description:successful operation
    */
    findByStatusGetQueryResponse,
    findByStatusGetError,
    /**
    *@description:queryParams
    */
    findByTagsGetQueryParams,
    /**
    *@description:successful operation
    */
    findByTagsGetQueryResponse,
    findByTagsGetError,
    /**
    *@description:pathParams
    */
    findByPetIdPathParams,
    /**
    *@description:successful operation
    */
    findByPetIdQueryResponse,
    findByPetIdError,
    /**
    *@description:pathParams
    */
    petIdPostPathParams,
    petIdPostMutationRequest,
    petIdPostError,
    petIdPostMutationResponse,
    /**
    *@description:pathParams
    */
    delByPetIdPathParams,
    delByPetIdError,
    delByPetIdMutationResponse
};

/**
 * @tag pet
 * @description Everything about your Pets
 */
export namespace Pet {
    /**
     * @description OK
     */
    export type TestPostMutationResponse = z.infer<typeof testPostMutationResponse>;
    export type TestPostError = z.infer<typeof testPostError>;
    /**
     * @description OK
     */
    export type TestPutMutationResponse = z.infer<typeof testPutMutationResponse>;
    export type TestPutError = z.infer<typeof testPutError>;
    export type DelByTestMutationRequest = z.infer<typeof delByTestMutationRequest>;
    /**
     * @description OK
     */
    export type DelByTestMutationResponse = z.infer<typeof delByTestMutationResponse>;
    export type DelByTestError = z.infer<typeof delByTestError>;
    /**
     * @description queryParams
     */
    export type TestIdGetQueryParams = z.infer<typeof testIdGetQueryParams>;
    /**
     * @description pathParams
     */
    export type TestIdGetPathParams = z.infer<typeof testIdGetPathParams>;
    /**
     * @description OK
     */
    export type TestIdGetQueryResponse = z.infer<typeof testIdGetQueryResponse>;
    export type TestIdGetError = z.infer<typeof testIdGetError>;
    /**
     * @description queryParams
     */
    export type UploadImageOctetStreamPostQueryParams = z.infer<typeof uploadImageOctetStreamPostQueryParams>;
    /**
     * @description pathParams
     */
    export type UploadImageOctetStreamPostPathParams = z.infer<typeof uploadImageOctetStreamPostPathParams>;
    export type UploadImageOctetStreamPostMutationRequest = z.infer<typeof uploadImageOctetStreamPostMutationRequest>;
    /**
     * @description successful operation
     */
    export type UploadImageOctetStreamPostMutationResponse = z.infer<typeof uploadImageOctetStreamPostMutationResponse>;
    export type UploadImageOctetStreamPostError = z.infer<typeof uploadImageOctetStreamPostError>;
    /**
     * @description pathParams
     */
    export type UploadImagePostPathParams = z.infer<typeof uploadImagePostPathParams>;
    export type UploadImagePostMutationRequest = z.infer<typeof uploadImagePostMutationRequest>;
    /**
     * @description successful operation
     */
    export type UploadImagePostMutationResponse = z.infer<typeof uploadImagePostMutationResponse>;
    export type UploadImagePostError = z.infer<typeof uploadImagePostError>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateMutationResponse = z.infer<typeof createMutationResponse>;
    export type UpdateError = z.infer<typeof updateError>;
    export type UpdateMutationResponse = z.infer<typeof updateMutationResponse>;
    /**
     * @description queryParams
     */
    export type FindByStatusGetQueryParams = z.infer<typeof findByStatusGetQueryParams>;
    /**
     * @description successful operation
     */
    export type FindByStatusGetQueryResponse = z.infer<typeof findByStatusGetQueryResponse>;
    export type FindByStatusGetError = z.infer<typeof findByStatusGetError>;
    /**
     * @description queryParams
     */
    export type FindByTagsGetQueryParams = z.infer<typeof findByTagsGetQueryParams>;
    /**
     * @description successful operation
     */
    export type FindByTagsGetQueryResponse = z.infer<typeof findByTagsGetQueryResponse>;
    export type FindByTagsGetError = z.infer<typeof findByTagsGetError>;
    /**
     * @description pathParams
     */
    export type FindByPetIdPathParams = z.infer<typeof findByPetIdPathParams>;
    /**
     * @description successful operation
     */
    export type FindByPetIdQueryResponse = z.infer<typeof findByPetIdQueryResponse>;
    export type FindByPetIdError = z.infer<typeof findByPetIdError>;
    /**
     * @description pathParams
     */
    export type PetIdPostPathParams = z.infer<typeof petIdPostPathParams>;
    export type PetIdPostMutationRequest = z.infer<typeof petIdPostMutationRequest>;
    export type PetIdPostError = z.infer<typeof petIdPostError>;
    export type PetIdPostMutationResponse = z.infer<typeof petIdPostMutationResponse>;
    /**
     * @description pathParams
     */
    export type DelByPetIdPathParams = z.infer<typeof delByPetIdPathParams>;
    export type DelByPetIdError = z.infer<typeof delByPetIdError>;
    export type DelByPetIdMutationResponse = z.infer<typeof delByPetIdMutationResponse>;
}

import { z } from "zod";
import { orderSchema } from "./zod-schemas";
const createMutationRequest = z.lazy(() => orderSchema);
/**
 * @description successful operation
 */
const createMutationResponse = z.lazy(() => orderSchema);
const createError = z.unknown();
/**
 * @description pathParams
 */
export const findByOrderIdPathParams = z.object({
    /**
    *@description:ID of pet that needs to be fetched
    */
    orderId: z.number()
});
/**
 * @description successful operation
 */
const findByOrderIdQueryResponse = z.lazy(() => orderSchema);
const findByOrderIdError = z.unknown();
/**
 * @description pathParams
 */
export const delByOrderIdPathParams = z.object({
    /**
    *@description:ID of the order that needs to be deleted
    */
    orderId: z.number()
});
const delByOrderIdError = z.unknown();
const delByOrderIdMutationResponse = z.unknown();
/**
 * @description successful operation
 */
const inventoryGetQueryResponse = z.object({});
const inventoryGetError = z.unknown();
/**
 * @tag store
 * @description Access to Petstore orders
 */
export const storeSchemas = {
    createMutationRequest,
    /**
    *@description:successful operation
    */
    createMutationResponse,
    createError,
    /**
    *@description:pathParams
    */
    findByOrderIdPathParams,
    /**
    *@description:successful operation
    */
    findByOrderIdQueryResponse,
    findByOrderIdError,
    /**
    *@description:pathParams
    */
    delByOrderIdPathParams,
    delByOrderIdError,
    delByOrderIdMutationResponse,
    /**
    *@description:successful operation
    */
    inventoryGetQueryResponse,
    inventoryGetError
};

/**
 * @tag store
 * @description Access to Petstore orders
 */
export namespace Store {
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    /**
     * @description successful operation
     */
    export type CreateMutationResponse = z.infer<typeof createMutationResponse>;
    export type CreateError = z.infer<typeof createError>;
    /**
     * @description pathParams
     */
    export type FindByOrderIdPathParams = z.infer<typeof findByOrderIdPathParams>;
    /**
     * @description successful operation
     */
    export type FindByOrderIdQueryResponse = z.infer<typeof findByOrderIdQueryResponse>;
    export type FindByOrderIdError = z.infer<typeof findByOrderIdError>;
    /**
     * @description pathParams
     */
    export type DelByOrderIdPathParams = z.infer<typeof delByOrderIdPathParams>;
    export type DelByOrderIdError = z.infer<typeof delByOrderIdError>;
    export type DelByOrderIdMutationResponse = z.infer<typeof delByOrderIdMutationResponse>;
    /**
     * @description successful operation
     */
    export type InventoryGetQueryResponse = z.infer<typeof inventoryGetQueryResponse>;
    export type InventoryGetError = z.infer<typeof inventoryGetError>;
}

import { z } from "zod";
import { userSchema } from "./zod-schemas";
const createWithArrayPostError = z.unknown();
const createWithArrayPostMutationResponse = z.unknown();
const createWithListPostError = z.unknown();
const createWithListPostMutationResponse = z.unknown();
/**
 * @description pathParams
 */
export const findByUsernamePathParams = z.object({
    /**
    *@description:The name that needs to be fetched. Use user1 for testing. 
    */
    username: z.string()
});
/**
 * @description successful operation
 */
const findByUsernameQueryResponse = z.lazy(() => userSchema);
const findByUsernameError = z.unknown();
/**
 * @description pathParams
 */
export const usernamePutPathParams = z.object({
    /**
    *@description:name that need to be updated
    */
    username: z.string()
});
const usernamePutMutationRequest = z.lazy(() => userSchema);
const usernamePutError = z.unknown();
const usernamePutMutationResponse = z.unknown();
/**
 * @description pathParams
 */
export const delByUsernamePathParams = z.object({
    /**
    *@description:The name that needs to be deleted
    */
    username: z.string()
});
const delByUsernameError = z.unknown();
const delByUsernameMutationResponse = z.unknown();
/**
 * @description queryParams
 */
const loginGetQueryParams = z.object({
    /**
    *@description:The user name for login
    */
    username: z.string(),
    /**
    *@description:The password for login in clear text
    */
    password: z.string()
});
/**
 * @description successful operation
 */
const loginGetQueryResponse;
const loginGetError = z.unknown();
const logoutGetError = z.unknown();
const logoutGetQueryResponse = z.unknown();
const createMutationRequest = z.lazy(() => userSchema);
const createError = z.unknown();
const createMutationResponse = z.unknown();
/**
 * @tag user
 * @description Operations about user
 */
export const userSchemas = {
    createWithArrayPostError,
    createWithArrayPostMutationResponse,
    createWithListPostError,
    createWithListPostMutationResponse,
    /**
    *@description:pathParams
    */
    findByUsernamePathParams,
    /**
    *@description:successful operation
    */
    findByUsernameQueryResponse,
    findByUsernameError,
    /**
    *@description:pathParams
    */
    usernamePutPathParams,
    usernamePutMutationRequest,
    usernamePutError,
    usernamePutMutationResponse,
    /**
    *@description:pathParams
    */
    delByUsernamePathParams,
    delByUsernameError,
    delByUsernameMutationResponse,
    /**
    *@description:queryParams
    */
    loginGetQueryParams,
    /**
    *@description:successful operation
    */
    loginGetQueryResponse,
    loginGetError,
    logoutGetError,
    logoutGetQueryResponse,
    createMutationRequest,
    createError,
    createMutationResponse
};

/**
 * @tag user
 * @description Operations about user
 */
export namespace User {
    export type CreateWithArrayPostError = z.infer<typeof createWithArrayPostError>;
    export type CreateWithArrayPostMutationResponse = z.infer<typeof createWithArrayPostMutationResponse>;
    export type CreateWithListPostError = z.infer<typeof createWithListPostError>;
    export type CreateWithListPostMutationResponse = z.infer<typeof createWithListPostMutationResponse>;
    /**
     * @description pathParams
     */
    export type FindByUsernamePathParams = z.infer<typeof findByUsernamePathParams>;
    /**
     * @description successful operation
     */
    export type FindByUsernameQueryResponse = z.infer<typeof findByUsernameQueryResponse>;
    export type FindByUsernameError = z.infer<typeof findByUsernameError>;
    /**
     * @description pathParams
     */
    export type UsernamePutPathParams = z.infer<typeof usernamePutPathParams>;
    export type UsernamePutMutationRequest = z.infer<typeof usernamePutMutationRequest>;
    export type UsernamePutError = z.infer<typeof usernamePutError>;
    export type UsernamePutMutationResponse = z.infer<typeof usernamePutMutationResponse>;
    /**
     * @description pathParams
     */
    export type DelByUsernamePathParams = z.infer<typeof delByUsernamePathParams>;
    export type DelByUsernameError = z.infer<typeof delByUsernameError>;
    export type DelByUsernameMutationResponse = z.infer<typeof delByUsernameMutationResponse>;
    /**
     * @description queryParams
     */
    export type LoginGetQueryParams = z.infer<typeof loginGetQueryParams>;
    /**
     * @description successful operation
     */
    export type LoginGetQueryResponse = z.infer<typeof loginGetQueryResponse>;
    export type LoginGetError = z.infer<typeof loginGetError>;
    export type LogoutGetError = z.infer<typeof logoutGetError>;
    export type LogoutGetQueryResponse = z.infer<typeof logoutGetQueryResponse>;
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateMutationResponse = z.infer<typeof createMutationResponse>;
}

import { testdataSchema } from "./testdata.schema";
import { z } from "zod";
export const test32145Schema = z.object({
    /**
    *@description:description
    */
    code: z.number().optional(),
    meta: z.lazy(() => testdataSchema).optional()
});
export type Test32145Model = z.infer<typeof test32145Schema>;

/**
 * @description description
 */
export const test3214ColumnTypeEnumLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/**
 * @description description
 */
export const Test3214ColumnTypeEnum = {
    Char: 'CHAR',
    Char2: 'CHAR2',
    Char3: 'CHAR3'
} as const;
/** description */
export const Test3214ColumnTypeEnumOption = [{
    label: test3214ColumnTypeEnumLabel.Char,
    value: Test3214ColumnTypeEnum.Char
}, {
    label: test3214ColumnTypeEnumLabel.Char2,
    value: Test3214ColumnTypeEnum.Char2
}, {
    label: test3214ColumnTypeEnumLabel.Char3,
    value: Test3214ColumnTypeEnum.Char3
}];
import { z } from "zod";
export const test3214Schema = z.object({
    /**
    *@description:默认值
    */
    columnDefault: z.string().optional(),
    /**
    *@description:description
    */
    columnLength: z.number().optional(),
    /**
    *@description:description
    */
    columnName: z.string().optional(),
    /**
    *@description:description
    */
    columnRemark: z.string().optional(),
    /**
    *@description:description
    */
    columnScale: z.number().optional(),
    /**
    *@description:description
    */
    columnType: z.nativeEnum(Test3214ColumnTypeEnum).optional(),
    /**
    *@description:description
    */
    delFlag: z.boolean().optional(),
    formId: z.number().optional(),
    /**
    *@description:id
    */
    id: z.number().optional(),
    /**
    *@description:description
    */
    notNull: z.boolean().optional()
});
export type Test3214Model = z.infer<typeof test3214Schema>;

import { z } from "zod";
export const testdataSchema = z.object({
    /**
    *@description:description
    */
    number: z.number().optional(),
    /**
    *@description:description
    */
    numberOfElements: z.number().optional(),
    /**
    *@description:description
    */
    totalElements: z.number().optional(),
    /**
    *@description:description
    */
    totalPages: z.number().optional()
});
export type TestdataModel = z.infer<typeof testdataSchema>;

import { z } from "zod";
export const sortSchema = z.object({
    empty: z.boolean().optional(),
    sorted: z.boolean().optional(),
    unsorted: z.boolean().optional()
});
export type SortModel = z.infer<typeof sortSchema>;

import { test3214Schema } from "./test3214.schema";
import { z } from "zod";
export const testDto3Schema = z.object({
    test3214: z.lazy(() => test3214Schema.array()).optional()
});
export type TestDto3Model = z.infer<typeof testDto3Schema>;

import { testDto3Schema } from "./testDto3.schema";
import { testdataSchema } from "./testdata.schema";
import { z } from "zod";
export const testDto2Schema = z.object({
    content: z.lazy(() => testDto3Schema).optional(),
    meta: z.lazy(() => testdataSchema).optional()
});
export type TestDto2Model = z.infer<typeof testDto2Schema>;

import { z } from "zod";
export const test321Schema = z.object({
    id: z.number().optional()
});
export type Test321Model = z.infer<typeof test321Schema>;

import { test321Schema } from "./test321.schema";
import { z } from "zod";
export const testDtoSchema = z.object({
    /**
    *@description:test321
    */
    test321: z.lazy(() => test321Schema.array()).optional()
});
export type TestDtoModel = z.infer<typeof testDtoSchema>;

import { apiResponseSchema } from "./apiResponse.schema";
import { z } from "zod";
export const refListSchema = z.object({
    content: z.lazy(() => apiResponseSchema).optional(),
    /**
    *@description:string
    */
    string: z.string().optional(),
    name: z.string().optional(),
    /**
    *@description:title
    */
    title: z.string().optional(),
    /**
    *@description:type
    */
    type: z.string().optional()
});
export type RefListModel = z.infer<typeof refListSchema>;

import { z } from "zod";
export const apiResponseSchema = z.object({
    code: z.number().optional(),
    type: z.string().optional(),
    message: z.string().optional()
});
export type ApiResponseModel = z.infer<typeof apiResponseSchema>;

import { z } from "zod";
export const categorySchema = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});
export type CategoryModel = z.infer<typeof categorySchema>;

import { categorySchema } from "./category.schema";
import { tagSchema } from "./tag.schema";
/**
 * @description pet status in the store
 */
export const petStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/**
 * @description pet status in the store
 */
export const PetStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
/** pet status in the store */
export const PetStatusEnumOption = [{
    label: petStatusEnumLabel.Available,
    value: PetStatusEnum.Available
}, {
    label: petStatusEnumLabel.Pending,
    value: PetStatusEnum.Pending
}, {
    label: petStatusEnumLabel.Sold,
    value: PetStatusEnum.Sold
}];
import { z } from "zod";
export const petSchema = z.object({
    id: z.number().optional(),
    category: z.lazy(() => categorySchema).optional(),
    name: z.string(),
    photoUrls: z.string().array(),
    tags: z.lazy(() => tagSchema.array()).optional(),
    /**
    *@description:pet status in the store
    */
    status: z.nativeEnum(PetStatusEnum).optional()
});
export type PetModel = z.infer<typeof petSchema>;

import { z } from "zod";
export const tagSchema = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});
export type TagModel = z.infer<typeof tagSchema>;

/**
 * @description Order Status
 */
export const orderStatusEnumLabel = {
    Placed: '',
    Approved: '',
    Delivered: ''
};
/**
 * @description Order Status
 */
export const OrderStatusEnum = {
    Placed: 'placed',
    Approved: 'approved',
    Delivered: 'delivered'
} as const;
/** Order Status */
export const OrderStatusEnumOption = [{
    label: orderStatusEnumLabel.Placed,
    value: OrderStatusEnum.Placed
}, {
    label: orderStatusEnumLabel.Approved,
    value: OrderStatusEnum.Approved
}, {
    label: orderStatusEnumLabel.Delivered,
    value: OrderStatusEnum.Delivered
}];
import { z } from "zod";
export const orderSchema = z.object({
    id: z.number().optional(),
    petId: z.number().optional(),
    quantity: z.number().optional(),
    shipDate: z.string().optional(),
    /**
    *@description:Order Status
    */
    status: z.nativeEnum(OrderStatusEnum).optional(),
    complete: z.boolean().optional()
});
export type OrderModel = z.infer<typeof orderSchema>;

import { z } from "zod";
export const userSchema = z.object({
    id: z.number().optional(),
    username: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    password: z.string().optional(),
    phone: z.string().optional(),
    /**
    *@description:User Status
    */
    userStatus: z.number().optional()
});
export type UserModel = z.infer<typeof userSchema>;

export * from "./test32145.schema";
export * from "./test3214.schema";
export * from "./testdata.schema";
export * from "./sort.schema";
export * from "./testDto3.schema";
export * from "./testDto2.schema";
export * from "./test321.schema";
export * from "./testDto.schema";
export * from "./refList.schema";
export * from "./apiResponse.schema";
export * from "./category.schema";
export * from "./pet.schema";
export * from "./tag.schema";
export * from "./order.schema";
export * from "./user.schema";
"
`;
