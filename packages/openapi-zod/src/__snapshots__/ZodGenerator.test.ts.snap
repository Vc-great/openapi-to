// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`zodGenerator > compare zodGenerator getFullText 1`] = `
"import { z } from "zod";
import { testDto2, test32145, apiResponse, pet } from "./zodModels";
/** OK */
const testPostResponse = z.lazy(() => testDto2);
const testPostError = z.unknown();
/** OK */
const testPutResponse = z.lazy(() => testDto2);
const testPutError = z.unknown();
const delByTestMutationRequest = z.number().array();
/** OK */
const delByTestResponse = z.lazy(() => test32145);
const delByTestError = z.unknown();
/** queryParams */
const testIdGetQueryParams = z.object({
    fields: z.string().array().optional(),
    page: z.number(),
    size: z.number()
});
/** pathParams */
export const testIdGetPathParams = z.object({
    testId: z.number().optional(),
    testId2: z.string().optional()
});
/** OK */
const testIdGetResponse = z.lazy(() => testDto2);
const testIdGetError = z.unknown();
/** pathParams */
export const uploadImagePostPathParams = z.object({
    petId: z.number()
});
const uploadImagePostMutationRequest = z.object({
    /**Additional data to pass to server*/
    additionalMetadata: z.string().optional(),
    /**file to upload*/
    file: z.string().optional()
});
/** successful operation */
const uploadImagePostResponse = z.lazy(() => apiResponse);
const uploadImagePostError = z.unknown();
const createError = z.unknown();
const createResponse = z.unknown();
const updateError = z.unknown();
const updateResponse = z.unknown();
/** queryParams */
const findByStatusGetQueryParams = z.object({
    status: z.string().array()
});
/** successful operation */
const findByStatusGetResponse = z.lazy(() => pet.array());
const findByStatusGetError = z.unknown();
/** queryParams */
const findByTagsGetQueryParams = z.object({
    tags: z.string().array()
});
/** successful operation */
const findByTagsGetResponse = z.lazy(() => pet.array());
const findByTagsGetError = z.unknown();
/** pathParams */
export const findByPetIdPathParams = z.object({
    petId: z.number()
});
/** successful operation */
const findByPetIdResponse = z.lazy(() => pet);
const findByPetIdError = z.unknown();
/** pathParams */
export const petIdPostPathParams = z.object({
    petId: z.number()
});
const petIdPostMutationRequest = z.object({
    /**Updated name of the pet*/
    name: z.string().optional(),
    /**Updated status of the pet*/
    status: z.string().optional()
});
const petIdPostError = z.unknown();
const petIdPostResponse = z.unknown();
/** pathParams */
export const delByPetIdPathParams = z.object({
    petId: z.number()
});
const delByPetIdError = z.unknown();
const delByPetIdResponse = z.unknown();
/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID zod-pet
 */
export const newPetZod = {
    /**OK*/
    testPostResponse,
    testPostError,
    /**OK*/
    testPutResponse,
    testPutError,
    delByTestMutationRequest,
    /**OK*/
    delByTestResponse,
    delByTestError,
    /**queryParams*/
    testIdGetQueryParams,
    /**pathParams*/
    testIdGetPathParams,
    /**OK*/
    testIdGetResponse,
    testIdGetError,
    /**pathParams*/
    uploadImagePostPathParams,
    uploadImagePostMutationRequest,
    /**successful operation*/
    uploadImagePostResponse,
    uploadImagePostError,
    createError,
    createResponse,
    updateError,
    updateResponse,
    /**queryParams*/
    findByStatusGetQueryParams,
    /**successful operation*/
    findByStatusGetResponse,
    findByStatusGetError,
    /**queryParams*/
    findByTagsGetQueryParams,
    /**successful operation*/
    findByTagsGetResponse,
    findByTagsGetError,
    /**pathParams*/
    findByPetIdPathParams,
    /**successful operation*/
    findByPetIdResponse,
    findByPetIdError,
    /**pathParams*/
    petIdPostPathParams,
    petIdPostMutationRequest,
    petIdPostError,
    petIdPostResponse,
    /**pathParams*/
    delByPetIdPathParams,
    delByPetIdError,
    delByPetIdResponse
};

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID zod-pet
 */
export namespace Pet {
    /** OK */
    export type TestPostResponse = z.infer<typeof testPostResponse>;
    export type TestPostError = z.infer<typeof testPostError>;
    /** OK */
    export type TestPutResponse = z.infer<typeof testPutResponse>;
    export type TestPutError = z.infer<typeof testPutError>;
    export type DelByTestMutationRequest = z.infer<typeof delByTestMutationRequest>;
    /** OK */
    export type DelByTestResponse = z.infer<typeof delByTestResponse>;
    export type DelByTestError = z.infer<typeof delByTestError>;
    /** queryParams */
    export type TestIdGetQueryParams = z.infer<typeof testIdGetQueryParams>;
    /** pathParams */
    export type TestIdGetPathParams = z.infer<typeof testIdGetPathParams>;
    /** OK */
    export type TestIdGetResponse = z.infer<typeof testIdGetResponse>;
    export type TestIdGetError = z.infer<typeof testIdGetError>;
    /** pathParams */
    export type UploadImagePostPathParams = z.infer<typeof uploadImagePostPathParams>;
    export type UploadImagePostMutationRequest = z.infer<typeof uploadImagePostMutationRequest>;
    /** successful operation */
    export type UploadImagePostResponse = z.infer<typeof uploadImagePostResponse>;
    export type UploadImagePostError = z.infer<typeof uploadImagePostError>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateResponse = z.infer<typeof createResponse>;
    export type UpdateError = z.infer<typeof updateError>;
    export type UpdateResponse = z.infer<typeof updateResponse>;
    /** queryParams */
    export type FindByStatusGetQueryParams = z.infer<typeof findByStatusGetQueryParams>;
    /** successful operation */
    export type FindByStatusGetResponse = z.infer<typeof findByStatusGetResponse>;
    export type FindByStatusGetError = z.infer<typeof findByStatusGetError>;
    /** queryParams */
    export type FindByTagsGetQueryParams = z.infer<typeof findByTagsGetQueryParams>;
    /** successful operation */
    export type FindByTagsGetResponse = z.infer<typeof findByTagsGetResponse>;
    export type FindByTagsGetError = z.infer<typeof findByTagsGetError>;
    /** pathParams */
    export type FindByPetIdPathParams = z.infer<typeof findByPetIdPathParams>;
    /** successful operation */
    export type FindByPetIdResponse = z.infer<typeof findByPetIdResponse>;
    export type FindByPetIdError = z.infer<typeof findByPetIdError>;
    /** pathParams */
    export type PetIdPostPathParams = z.infer<typeof petIdPostPathParams>;
    export type PetIdPostMutationRequest = z.infer<typeof petIdPostMutationRequest>;
    export type PetIdPostError = z.infer<typeof petIdPostError>;
    export type PetIdPostResponse = z.infer<typeof petIdPostResponse>;
    /** pathParams */
    export type DelByPetIdPathParams = z.infer<typeof delByPetIdPathParams>;
    export type DelByPetIdError = z.infer<typeof delByPetIdError>;
    export type DelByPetIdResponse = z.infer<typeof delByPetIdResponse>;
}

import { z } from "zod";
import { order } from "./zodModels";
const createMutationRequest = z.lazy(() => order);
/** successful operation */
const createResponse = z.lazy(() => order);
const createError = z.unknown();
/** pathParams */
export const findByOrderIdPathParams = z.object({
    orderId: z.number()
});
/** successful operation */
const findByOrderIdResponse = z.lazy(() => order);
const findByOrderIdError = z.unknown();
/** pathParams */
export const delByOrderIdPathParams = z.object({
    orderId: z.number()
});
const delByOrderIdError = z.unknown();
const delByOrderIdResponse = z.unknown();
/** successful operation */
const inventoryGetResponse = z.object({});
const inventoryGetError = z.unknown();
/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID zod-store
 */
export const storeZod = {
    createMutationRequest,
    /**successful operation*/
    createResponse,
    createError,
    /**pathParams*/
    findByOrderIdPathParams,
    /**successful operation*/
    findByOrderIdResponse,
    findByOrderIdError,
    /**pathParams*/
    delByOrderIdPathParams,
    delByOrderIdError,
    delByOrderIdResponse,
    /**successful operation*/
    inventoryGetResponse,
    inventoryGetError
};

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID zod-store
 */
export namespace Store {
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    /** successful operation */
    export type CreateResponse = z.infer<typeof createResponse>;
    export type CreateError = z.infer<typeof createError>;
    /** pathParams */
    export type FindByOrderIdPathParams = z.infer<typeof findByOrderIdPathParams>;
    /** successful operation */
    export type FindByOrderIdResponse = z.infer<typeof findByOrderIdResponse>;
    export type FindByOrderIdError = z.infer<typeof findByOrderIdError>;
    /** pathParams */
    export type DelByOrderIdPathParams = z.infer<typeof delByOrderIdPathParams>;
    export type DelByOrderIdError = z.infer<typeof delByOrderIdError>;
    export type DelByOrderIdResponse = z.infer<typeof delByOrderIdResponse>;
    /** successful operation */
    export type InventoryGetResponse = z.infer<typeof inventoryGetResponse>;
    export type InventoryGetError = z.infer<typeof inventoryGetError>;
}

import { z } from "zod";
import { user } from "./zodModels";
const createWithArrayPostError = z.unknown();
const createWithArrayPostResponse = z.unknown();
const createWithListPostError = z.unknown();
const createWithListPostResponse = z.unknown();
/** pathParams */
export const findByUsernamePathParams = z.object({
    username: z.string()
});
/** successful operation */
const findByUsernameResponse = z.lazy(() => user);
const findByUsernameError = z.unknown();
/** pathParams */
export const usernamePutPathParams = z.object({
    username: z.string()
});
const usernamePutMutationRequest = z.lazy(() => user);
const usernamePutError = z.unknown();
const usernamePutResponse = z.unknown();
/** pathParams */
export const delByUsernamePathParams = z.object({
    username: z.string()
});
const delByUsernameError = z.unknown();
const delByUsernameResponse = z.unknown();
/** queryParams */
const loginGetQueryParams = z.object({
    username: z.string(),
    password: z.string()
});
/** successful operation */
const loginGetResponse;
const loginGetError = z.unknown();
const logoutGetError = z.unknown();
const logoutGetResponse = z.unknown();
const createMutationRequest = z.lazy(() => user);
const createError = z.unknown();
const createResponse = z.unknown();
/**
 * @tag user
 * @description Operations about user
 * @UUID zod-user
 */
export const userZod = {
    createWithArrayPostError,
    createWithArrayPostResponse,
    createWithListPostError,
    createWithListPostResponse,
    /**pathParams*/
    findByUsernamePathParams,
    /**successful operation*/
    findByUsernameResponse,
    findByUsernameError,
    /**pathParams*/
    usernamePutPathParams,
    usernamePutMutationRequest,
    usernamePutError,
    usernamePutResponse,
    /**pathParams*/
    delByUsernamePathParams,
    delByUsernameError,
    delByUsernameResponse,
    /**queryParams*/
    loginGetQueryParams,
    /**successful operation*/
    loginGetResponse,
    loginGetError,
    logoutGetError,
    logoutGetResponse,
    createMutationRequest,
    createError,
    createResponse
};

/**
 * @tag user
 * @description Operations about user
 * @UUID zod-user
 */
export namespace User {
    export type CreateWithArrayPostError = z.infer<typeof createWithArrayPostError>;
    export type CreateWithArrayPostResponse = z.infer<typeof createWithArrayPostResponse>;
    export type CreateWithListPostError = z.infer<typeof createWithListPostError>;
    export type CreateWithListPostResponse = z.infer<typeof createWithListPostResponse>;
    /** pathParams */
    export type FindByUsernamePathParams = z.infer<typeof findByUsernamePathParams>;
    /** successful operation */
    export type FindByUsernameResponse = z.infer<typeof findByUsernameResponse>;
    export type FindByUsernameError = z.infer<typeof findByUsernameError>;
    /** pathParams */
    export type UsernamePutPathParams = z.infer<typeof usernamePutPathParams>;
    export type UsernamePutMutationRequest = z.infer<typeof usernamePutMutationRequest>;
    export type UsernamePutError = z.infer<typeof usernamePutError>;
    export type UsernamePutResponse = z.infer<typeof usernamePutResponse>;
    /** pathParams */
    export type DelByUsernamePathParams = z.infer<typeof delByUsernamePathParams>;
    export type DelByUsernameError = z.infer<typeof delByUsernameError>;
    export type DelByUsernameResponse = z.infer<typeof delByUsernameResponse>;
    /** queryParams */
    export type LoginGetQueryParams = z.infer<typeof loginGetQueryParams>;
    /** successful operation */
    export type LoginGetResponse = z.infer<typeof loginGetResponse>;
    export type LoginGetError = z.infer<typeof loginGetError>;
    export type LogoutGetError = z.infer<typeof logoutGetError>;
    export type LogoutGetResponse = z.infer<typeof logoutGetResponse>;
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateResponse = z.infer<typeof createResponse>;
}

import { testdata } from "./testdata";
import { z } from "zod";
/** @UUID zod-Test32145 */
export const test32145 = z.object({
    /**description*/
    code: z.number().optional(),
    meta: z.lazy(() => testdata).optional()
});

import { z } from "zod";
/** @UUID zod-Test3214 */
export const test3214 = z.object({
    /**默认值*/
    columnDefault: z.string().optional(),
    /**description*/
    columnLength: z.number().optional(),
    /**description*/
    columnName: z.string().optional(),
    /**description*/
    columnRemark: z.string().optional(),
    /**description*/
    columnScale: z.number().optional(),
    /**description*/
    columnType: z.string().optional(),
    /**description*/
    delFlag: z.boolean().optional(),
    formId: z.number().optional(),
    /**id*/
    id: z.number().optional(),
    /**description*/
    notNull: z.boolean().optional()
});

import { z } from "zod";
/** @UUID zod-Testdata */
export const testdata = z.object({
    /**description*/
    number: z.number().optional(),
    /**description*/
    numberOfElements: z.number().optional(),
    /**description*/
    totalElements: z.number().optional(),
    /**description*/
    totalPages: z.number().optional()
});

import { z } from "zod";
/** @UUID zod-Sort */
export const sort = z.object({
    empty: z.boolean().optional(),
    sorted: z.boolean().optional(),
    unsorted: z.boolean().optional()
});

import { test3214 } from "./test3214";
import { z } from "zod";
/** @UUID zod-TestDto3 */
export const testDto3 = z.object({
    test3214: z.lazy(() => test3214.array()).optional()
});

import { testDto3 } from "./testDto3";
import { testdata } from "./testdata";
import { z } from "zod";
/** @UUID zod-TestDto2 */
export const testDto2 = z.object({
    content: z.lazy(() => testDto3).optional(),
    meta: z.lazy(() => testdata).optional()
});

import { z } from "zod";
/** @UUID zod-Test321 */
export const newTest321 = z.object({
    id: z.number().optional()
});

import { test321 } from "./test321";
import { z } from "zod";
/** @UUID zod-TestDto */
export const newTestDto = z.object({
    /**test321*/
    test321: z.lazy(() => test321.array()).optional()
});

import { apiResponse } from "./apiResponse";
import { z } from "zod";
/** @UUID zod-RefList */
export const refList = z.object({
    content: z.lazy(() => apiResponse).optional(),
    /**string*/
    string: z.string().optional(),
    name: z.string().optional(),
    /**title*/
    title: z.string().optional(),
    /**type*/
    type: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-ApiResponse */
export const apiResponse = z.object({
    code: z.number().optional(),
    type: z.string().optional(),
    message: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-Category */
export const category = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});

import { category } from "./category";
import { tag } from "./tag";
import { z } from "zod";
/** @UUID zod-Pet */
export const pet = z.object({
    id: z.number().optional(),
    category: z.lazy(() => category).optional(),
    name: z.string(),
    photoUrls: z.string().array(),
    tags: z.lazy(() => tag.array()).optional(),
    /**pet status in the store*/
    status: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-Tag */
export const tag = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-Order */
export const order = z.object({
    id: z.number().optional(),
    petId: z.number().optional(),
    quantity: z.number().optional(),
    shipDate: z.string().optional(),
    /**Order Status*/
    status: z.string().optional(),
    complete: z.boolean().optional()
});

import { z } from "zod";
/** @UUID zod-User */
export const user = z.object({
    id: z.number().optional(),
    username: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    password: z.string().optional(),
    phone: z.string().optional(),
    /**User Status*/
    userStatus: z.number().optional()
});

/** description */
export const ColumnTypeLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/** pet status in the store */
export const StatusLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/** Order Status */
export const Status1Label = {
    Placed: '',
    Approved: '',
    Delivered: ''
};

/** description */
const enum ColumnType {
    Char = "CHAR",
    Char2 = "CHAR2",
    Char3 = "CHAR3"
}

/** pet status in the store */
const enum Status {
    Available = "available",
    Pending = "pending",
    Sold = "sold"
}

/** Order Status */
const enum Status1 {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered"
}

/** description */
export const columnTypeOption = [{
    label: ColumnTypeLabel.Char,
    value: ColumnType.Char
}, {
    label: ColumnTypeLabel.Char2,
    value: ColumnType.Char2
}, {
    label: ColumnTypeLabel.Char3,
    value: ColumnType.Char3
}];
/** pet status in the store */
export const statusOption = [{
    label: StatusLabel.Available,
    value: Status.Available
}, {
    label: StatusLabel.Pending,
    value: Status.Pending
}, {
    label: StatusLabel.Sold,
    value: Status.Sold
}];
/** Order Status */
export const status1Option = [{
    label: Status1Label.Placed,
    value: Status1.Placed
}, {
    label: Status1Label.Approved,
    value: Status1.Approved
}, {
    label: Status1Label.Delivered,
    value: Status1.Delivered
}];

export * from "./enum";
export * from "./test32145";
export * from "./test3214";
export * from "./testdata";
export * from "./sort";
export * from "./testDto3";
export * from "./testDto2";
export * from "./newTest321";
export * from "./newTestDto";
export * from "./refList";
export * from "./apiResponse";
export * from "./category";
export * from "./pet";
export * from "./tag";
export * from "./order";
export * from "./user";
"
`;

exports[`zodGenerator > zodGenerator getFullText 1`] = `
"import { z } from "zod";
import { testDto2, test32145, apiResponse, pet } from "./zodModels";
/** OK */
const testPostResponse = z.lazy(() => testDto2);
const testPostError = z.unknown();
/** OK */
const testPutResponse = z.lazy(() => testDto2);
const testPutError = z.unknown();
const delByTestMutationRequest = z.number().array();
/** OK */
const delByTestResponse = z.lazy(() => test32145);
const delByTestError = z.unknown();
/** queryParams */
const testIdGetQueryParams = z.object({
    fields: z.string().array().optional(),
    page: z.number(),
    size: z.number()
});
/** pathParams */
export const testIdGetPathParams = z.object({
    testId: z.number().optional(),
    testId2: z.string().optional()
});
/** OK */
const testIdGetResponse = z.lazy(() => testDto2);
const testIdGetError = z.unknown();
/** pathParams */
export const uploadImagePostPathParams = z.object({
    petId: z.number()
});
const uploadImagePostMutationRequest = z.object({
    /**Additional data to pass to server*/
    additionalMetadata: z.string().optional(),
    /**file to upload*/
    file: z.string().optional()
});
/** successful operation */
const uploadImagePostResponse = z.lazy(() => apiResponse);
const uploadImagePostError = z.unknown();
const createError = z.unknown();
const createResponse = z.unknown();
const updateError = z.unknown();
const updateResponse = z.unknown();
/** queryParams */
const findByStatusGetQueryParams = z.object({
    status: z.string().array()
});
/** successful operation */
const findByStatusGetResponse = z.lazy(() => pet.array());
const findByStatusGetError = z.unknown();
/** queryParams */
const findByTagsGetQueryParams = z.object({
    tags: z.string().array()
});
/** successful operation */
const findByTagsGetResponse = z.lazy(() => pet.array());
const findByTagsGetError = z.unknown();
/** pathParams */
export const findByPetIdPathParams = z.object({
    petId: z.number()
});
/** successful operation */
const findByPetIdResponse = z.lazy(() => pet);
const findByPetIdError = z.unknown();
/** pathParams */
export const petIdPostPathParams = z.object({
    petId: z.number()
});
const petIdPostMutationRequest = z.object({
    /**Updated name of the pet*/
    name: z.string().optional(),
    /**Updated status of the pet*/
    status: z.string().optional()
});
const petIdPostError = z.unknown();
const petIdPostResponse = z.unknown();
/** pathParams */
export const delByPetIdPathParams = z.object({
    petId: z.number()
});
const delByPetIdError = z.unknown();
const delByPetIdResponse = z.unknown();
/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID zod-pet
 */
export const petZod = {
    /**OK*/
    testPostResponse,
    testPostError,
    /**OK*/
    testPutResponse,
    testPutError,
    delByTestMutationRequest,
    /**OK*/
    delByTestResponse,
    delByTestError,
    /**queryParams*/
    testIdGetQueryParams,
    /**pathParams*/
    testIdGetPathParams,
    /**OK*/
    testIdGetResponse,
    testIdGetError,
    /**pathParams*/
    uploadImagePostPathParams,
    uploadImagePostMutationRequest,
    /**successful operation*/
    uploadImagePostResponse,
    uploadImagePostError,
    createError,
    createResponse,
    updateError,
    updateResponse,
    /**queryParams*/
    findByStatusGetQueryParams,
    /**successful operation*/
    findByStatusGetResponse,
    findByStatusGetError,
    /**queryParams*/
    findByTagsGetQueryParams,
    /**successful operation*/
    findByTagsGetResponse,
    findByTagsGetError,
    /**pathParams*/
    findByPetIdPathParams,
    /**successful operation*/
    findByPetIdResponse,
    findByPetIdError,
    /**pathParams*/
    petIdPostPathParams,
    petIdPostMutationRequest,
    petIdPostError,
    petIdPostResponse,
    /**pathParams*/
    delByPetIdPathParams,
    delByPetIdError,
    delByPetIdResponse
};

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID zod-pet
 */
export namespace Pet {
    /** OK */
    export type TestPostResponse = z.infer<typeof testPostResponse>;
    export type TestPostError = z.infer<typeof testPostError>;
    /** OK */
    export type TestPutResponse = z.infer<typeof testPutResponse>;
    export type TestPutError = z.infer<typeof testPutError>;
    export type DelByTestMutationRequest = z.infer<typeof delByTestMutationRequest>;
    /** OK */
    export type DelByTestResponse = z.infer<typeof delByTestResponse>;
    export type DelByTestError = z.infer<typeof delByTestError>;
    /** queryParams */
    export type TestIdGetQueryParams = z.infer<typeof testIdGetQueryParams>;
    /** pathParams */
    export type TestIdGetPathParams = z.infer<typeof testIdGetPathParams>;
    /** OK */
    export type TestIdGetResponse = z.infer<typeof testIdGetResponse>;
    export type TestIdGetError = z.infer<typeof testIdGetError>;
    /** pathParams */
    export type UploadImagePostPathParams = z.infer<typeof uploadImagePostPathParams>;
    export type UploadImagePostMutationRequest = z.infer<typeof uploadImagePostMutationRequest>;
    /** successful operation */
    export type UploadImagePostResponse = z.infer<typeof uploadImagePostResponse>;
    export type UploadImagePostError = z.infer<typeof uploadImagePostError>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateResponse = z.infer<typeof createResponse>;
    export type UpdateError = z.infer<typeof updateError>;
    export type UpdateResponse = z.infer<typeof updateResponse>;
    /** queryParams */
    export type FindByStatusGetQueryParams = z.infer<typeof findByStatusGetQueryParams>;
    /** successful operation */
    export type FindByStatusGetResponse = z.infer<typeof findByStatusGetResponse>;
    export type FindByStatusGetError = z.infer<typeof findByStatusGetError>;
    /** queryParams */
    export type FindByTagsGetQueryParams = z.infer<typeof findByTagsGetQueryParams>;
    /** successful operation */
    export type FindByTagsGetResponse = z.infer<typeof findByTagsGetResponse>;
    export type FindByTagsGetError = z.infer<typeof findByTagsGetError>;
    /** pathParams */
    export type FindByPetIdPathParams = z.infer<typeof findByPetIdPathParams>;
    /** successful operation */
    export type FindByPetIdResponse = z.infer<typeof findByPetIdResponse>;
    export type FindByPetIdError = z.infer<typeof findByPetIdError>;
    /** pathParams */
    export type PetIdPostPathParams = z.infer<typeof petIdPostPathParams>;
    export type PetIdPostMutationRequest = z.infer<typeof petIdPostMutationRequest>;
    export type PetIdPostError = z.infer<typeof petIdPostError>;
    export type PetIdPostResponse = z.infer<typeof petIdPostResponse>;
    /** pathParams */
    export type DelByPetIdPathParams = z.infer<typeof delByPetIdPathParams>;
    export type DelByPetIdError = z.infer<typeof delByPetIdError>;
    export type DelByPetIdResponse = z.infer<typeof delByPetIdResponse>;
}

import { z } from "zod";
import { order } from "./zodModels";
const createMutationRequest = z.lazy(() => order);
/** successful operation */
const createResponse = z.lazy(() => order);
const createError = z.unknown();
/** pathParams */
export const findByOrderIdPathParams = z.object({
    orderId: z.number()
});
/** successful operation */
const findByOrderIdResponse = z.lazy(() => order);
const findByOrderIdError = z.unknown();
/** pathParams */
export const delByOrderIdPathParams = z.object({
    orderId: z.number()
});
const delByOrderIdError = z.unknown();
const delByOrderIdResponse = z.unknown();
/** successful operation */
const inventoryGetResponse = z.object({});
const inventoryGetError = z.unknown();
/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID zod-store
 */
export const storeZod = {
    createMutationRequest,
    /**successful operation*/
    createResponse,
    createError,
    /**pathParams*/
    findByOrderIdPathParams,
    /**successful operation*/
    findByOrderIdResponse,
    findByOrderIdError,
    /**pathParams*/
    delByOrderIdPathParams,
    delByOrderIdError,
    delByOrderIdResponse,
    /**successful operation*/
    inventoryGetResponse,
    inventoryGetError
};

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID zod-store
 */
export namespace Store {
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    /** successful operation */
    export type CreateResponse = z.infer<typeof createResponse>;
    export type CreateError = z.infer<typeof createError>;
    /** pathParams */
    export type FindByOrderIdPathParams = z.infer<typeof findByOrderIdPathParams>;
    /** successful operation */
    export type FindByOrderIdResponse = z.infer<typeof findByOrderIdResponse>;
    export type FindByOrderIdError = z.infer<typeof findByOrderIdError>;
    /** pathParams */
    export type DelByOrderIdPathParams = z.infer<typeof delByOrderIdPathParams>;
    export type DelByOrderIdError = z.infer<typeof delByOrderIdError>;
    export type DelByOrderIdResponse = z.infer<typeof delByOrderIdResponse>;
    /** successful operation */
    export type InventoryGetResponse = z.infer<typeof inventoryGetResponse>;
    export type InventoryGetError = z.infer<typeof inventoryGetError>;
}

import { z } from "zod";
import { user } from "./zodModels";
const createWithArrayPostError = z.unknown();
const createWithArrayPostResponse = z.unknown();
const createWithListPostError = z.unknown();
const createWithListPostResponse = z.unknown();
/** pathParams */
export const findByUsernamePathParams = z.object({
    username: z.string()
});
/** successful operation */
const findByUsernameResponse = z.lazy(() => user);
const findByUsernameError = z.unknown();
/** pathParams */
export const usernamePutPathParams = z.object({
    username: z.string()
});
const usernamePutMutationRequest = z.lazy(() => user);
const usernamePutError = z.unknown();
const usernamePutResponse = z.unknown();
/** pathParams */
export const delByUsernamePathParams = z.object({
    username: z.string()
});
const delByUsernameError = z.unknown();
const delByUsernameResponse = z.unknown();
/** queryParams */
const loginGetQueryParams = z.object({
    username: z.string(),
    password: z.string()
});
/** successful operation */
const loginGetResponse;
const loginGetError = z.unknown();
const logoutGetError = z.unknown();
const logoutGetResponse = z.unknown();
const createMutationRequest = z.lazy(() => user);
const createError = z.unknown();
const createResponse = z.unknown();
/**
 * @tag user
 * @description Operations about user
 * @UUID zod-user
 */
export const userZod = {
    createWithArrayPostError,
    createWithArrayPostResponse,
    createWithListPostError,
    createWithListPostResponse,
    /**pathParams*/
    findByUsernamePathParams,
    /**successful operation*/
    findByUsernameResponse,
    findByUsernameError,
    /**pathParams*/
    usernamePutPathParams,
    usernamePutMutationRequest,
    usernamePutError,
    usernamePutResponse,
    /**pathParams*/
    delByUsernamePathParams,
    delByUsernameError,
    delByUsernameResponse,
    /**queryParams*/
    loginGetQueryParams,
    /**successful operation*/
    loginGetResponse,
    loginGetError,
    logoutGetError,
    logoutGetResponse,
    createMutationRequest,
    createError,
    createResponse
};

/**
 * @tag user
 * @description Operations about user
 * @UUID zod-user
 */
export namespace User {
    export type CreateWithArrayPostError = z.infer<typeof createWithArrayPostError>;
    export type CreateWithArrayPostResponse = z.infer<typeof createWithArrayPostResponse>;
    export type CreateWithListPostError = z.infer<typeof createWithListPostError>;
    export type CreateWithListPostResponse = z.infer<typeof createWithListPostResponse>;
    /** pathParams */
    export type FindByUsernamePathParams = z.infer<typeof findByUsernamePathParams>;
    /** successful operation */
    export type FindByUsernameResponse = z.infer<typeof findByUsernameResponse>;
    export type FindByUsernameError = z.infer<typeof findByUsernameError>;
    /** pathParams */
    export type UsernamePutPathParams = z.infer<typeof usernamePutPathParams>;
    export type UsernamePutMutationRequest = z.infer<typeof usernamePutMutationRequest>;
    export type UsernamePutError = z.infer<typeof usernamePutError>;
    export type UsernamePutResponse = z.infer<typeof usernamePutResponse>;
    /** pathParams */
    export type DelByUsernamePathParams = z.infer<typeof delByUsernamePathParams>;
    export type DelByUsernameError = z.infer<typeof delByUsernameError>;
    export type DelByUsernameResponse = z.infer<typeof delByUsernameResponse>;
    /** queryParams */
    export type LoginGetQueryParams = z.infer<typeof loginGetQueryParams>;
    /** successful operation */
    export type LoginGetResponse = z.infer<typeof loginGetResponse>;
    export type LoginGetError = z.infer<typeof loginGetError>;
    export type LogoutGetError = z.infer<typeof logoutGetError>;
    export type LogoutGetResponse = z.infer<typeof logoutGetResponse>;
    export type CreateMutationRequest = z.infer<typeof createMutationRequest>;
    export type CreateError = z.infer<typeof createError>;
    export type CreateResponse = z.infer<typeof createResponse>;
}

import { testdata } from "./testdata";
import { z } from "zod";
/** @UUID zod-Test32145 */
export const test32145 = z.object({
    /**description*/
    code: z.number().optional(),
    meta: z.lazy(() => testdata).optional()
});

import { z } from "zod";
/** @UUID zod-Test3214 */
export const test3214 = z.object({
    /**默认值*/
    columnDefault: z.string().optional(),
    /**description*/
    columnLength: z.number().optional(),
    /**description*/
    columnName: z.string().optional(),
    /**description*/
    columnRemark: z.string().optional(),
    /**description*/
    columnScale: z.number().optional(),
    /**description*/
    columnType: z.string().optional(),
    /**description*/
    delFlag: z.boolean().optional(),
    formId: z.number().optional(),
    /**id*/
    id: z.number().optional(),
    /**description*/
    notNull: z.boolean().optional()
});

import { z } from "zod";
/** @UUID zod-Testdata */
export const testdata = z.object({
    /**description*/
    number: z.number().optional(),
    /**description*/
    numberOfElements: z.number().optional(),
    /**description*/
    totalElements: z.number().optional(),
    /**description*/
    totalPages: z.number().optional()
});

import { z } from "zod";
/** @UUID zod-Sort */
export const sort = z.object({
    empty: z.boolean().optional(),
    sorted: z.boolean().optional(),
    unsorted: z.boolean().optional()
});

import { test3214 } from "./test3214";
import { z } from "zod";
/** @UUID zod-TestDto3 */
export const testDto3 = z.object({
    test3214: z.lazy(() => test3214.array()).optional()
});

import { testDto3 } from "./testDto3";
import { testdata } from "./testdata";
import { z } from "zod";
/** @UUID zod-TestDto2 */
export const testDto2 = z.object({
    content: z.lazy(() => testDto3).optional(),
    meta: z.lazy(() => testdata).optional()
});

import { z } from "zod";
/** @UUID zod-Test321 */
export const test321 = z.object({
    id: z.number().optional()
});

import { test321 } from "./test321";
import { z } from "zod";
/** @UUID zod-TestDto */
export const testDto = z.object({
    /**test321*/
    test321: z.lazy(() => test321.array()).optional()
});

import { apiResponse } from "./apiResponse";
import { z } from "zod";
/** @UUID zod-RefList */
export const refList = z.object({
    content: z.lazy(() => apiResponse).optional(),
    /**string*/
    string: z.string().optional(),
    name: z.string().optional(),
    /**title*/
    title: z.string().optional(),
    /**type*/
    type: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-ApiResponse */
export const apiResponse = z.object({
    code: z.number().optional(),
    type: z.string().optional(),
    message: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-Category */
export const category = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});

import { category } from "./category";
import { tag } from "./tag";
import { z } from "zod";
/** @UUID zod-Pet */
export const pet = z.object({
    id: z.number().optional(),
    category: z.lazy(() => category).optional(),
    name: z.string(),
    photoUrls: z.string().array(),
    tags: z.lazy(() => tag.array()).optional(),
    /**pet status in the store*/
    status: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-Tag */
export const tag = z.object({
    id: z.number().optional(),
    name: z.string().optional()
});

import { z } from "zod";
/** @UUID zod-Order */
export const order = z.object({
    id: z.number().optional(),
    petId: z.number().optional(),
    quantity: z.number().optional(),
    shipDate: z.string().optional(),
    /**Order Status*/
    status: z.string().optional(),
    complete: z.boolean().optional()
});

import { z } from "zod";
/** @UUID zod-User */
export const user = z.object({
    id: z.number().optional(),
    username: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    password: z.string().optional(),
    phone: z.string().optional(),
    /**User Status*/
    userStatus: z.number().optional()
});

/** description */
export const ColumnTypeLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/** pet status in the store */
export const StatusLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/** Order Status */
export const Status1Label = {
    Placed: '',
    Approved: '',
    Delivered: ''
};

/** description */
const enum ColumnType {
    Char = "CHAR",
    Char2 = "CHAR2",
    Char3 = "CHAR3"
}

/** pet status in the store */
const enum Status {
    Available = "available",
    Pending = "pending",
    Sold = "sold"
}

/** Order Status */
const enum Status1 {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered"
}

/** description */
export const columnTypeOption = [{
    label: ColumnTypeLabel.Char,
    value: ColumnType.Char
}, {
    label: ColumnTypeLabel.Char2,
    value: ColumnType.Char2
}, {
    label: ColumnTypeLabel.Char3,
    value: ColumnType.Char3
}];
/** pet status in the store */
export const statusOption = [{
    label: StatusLabel.Available,
    value: Status.Available
}, {
    label: StatusLabel.Pending,
    value: Status.Pending
}, {
    label: StatusLabel.Sold,
    value: Status.Sold
}];
/** Order Status */
export const status1Option = [{
    label: Status1Label.Placed,
    value: Status1.Placed
}, {
    label: Status1Label.Approved,
    value: Status1.Approved
}, {
    label: Status1Label.Delivered,
    value: Status1.Delivered
}];

export * from "./enum";
export * from "./test32145";
export * from "./test3214";
export * from "./testdata";
export * from "./sort";
export * from "./testDto3";
export * from "./testDto2";
export * from "./test321";
export * from "./testDto";
export * from "./refList";
export * from "./apiResponse";
export * from "./category";
export * from "./pet";
export * from "./tag";
export * from "./order";
export * from "./user";
"
`;
