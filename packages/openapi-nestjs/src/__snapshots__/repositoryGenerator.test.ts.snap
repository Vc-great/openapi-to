// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`repositoryGenerator > repository 1`] = `
"import { Injectable, NotFoundException } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { petEntity } from "../entities/pet.entity.ts";
import { PetMappers } from "./PetMappers";
import { Repository } from "typeorm";
import { plainToInstance } from "class-transformer";
import { FindAllQueryDto } from "./domain/findAll-query.dto";
import { FindAllUserVo } from "./domain/FindAllUser.vo";
import { testBodyDto } from "./domain/testBodyDto.dto";
import { testDto2 } from "./domain/testDto2.vo";
import { test32145 } from "./domain/test32145.vo";
import { CreateUpdateUserDto } from "./domain/CreateUpdateUserDto.dto";
import { TestidgetQueryDto } from "./domain/testidget-query.dto";
import { ApiResponse } from "./domain/ApiResponse.vo";
import { Pet } from "./domain/Pet.dto";
import { FindPetsByStatusQueryDto } from "./domain/findPetsByStatus-query.dto";
import { FindPetsByTagsQueryDto } from "./domain/findPetsByTags-query.dto";

@Injectable
export class PetRepository {
    constructor(@InjectRepository(petEntity) private readonly petRepository: Repository<petEntity>) {
    }

    async findAll(query: FindAllQueryDto): Promise<FindAllUserVo> {

        const [data, total] = await this.petRepository.findOne({
            where: {
                email: query.email,
                name: query.name,
                bol: query.bol,
                sort: query.sort,
                createTime: query.createTime,
                status: query.status,
                page: query.page
            },
            skip: (query.pageNo - 1) * query.pageSize,
            take: query.pageSize,

        });

        return plainToInstance(
            FindAllUserVo,
            { data, total },
            {
                exposeDefaultValues: true,
            },
        );
    }

    async test(data: testBodyDto): Promise<testDto2> {
        const newEntity = PetMappers.toPersistence(data);

        const savedEntity = await this.petRepository.save(newEntity);

        return plainToInstance(testDto2, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async testput(data: testBodyDto): Promise<testDto2> {
        const detail = await this.petRepository.findOneBy({});
        if (!detail) {
            throw new NotFoundException(\`id \${id} not found\`);
        }

        const savedEntity = await this.petRepository.save(
            PetMappers.toPersistence(_.assign(detail, data)),
        );
        return plainToInstance(FindOneUserVo, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async testdelete(data: number[]): Promise<test32145> {
        return this.petRepository.softRemove(_.assign(new petEntity(), {}));
    }

    async batchCreate(data: CreateUpdateUserDto[]): Promise<testDto2> {
        const newEntity = PetMappers.toPersistence(data);

        const savedEntity = await this.petRepository.save(newEntity);

        return plainToInstance(testDto2, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async testidget(testId: number, query: TestidgetQueryDto): Promise<testDto2> {
        const newEntity = await this.petRepository.findAndCount({ where: { test- id: query.test - id });
        return plainToInstance(FindOneUserVo, newEntity, {
            exposeDefaultValues: true,
        });
    }

    async uploadFile(petId: number, data: any): Promise<ApiResponse> {
        const newEntity = PetMappers.toPersistence(data);

        const savedEntity = await this.petRepository.save(newEntity);

        return plainToInstance(ApiResponse, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async addPet(data: Pet): Promise<void> {
        const newEntity = PetMappers.toPersistence(data);

        const savedEntity = await this.petRepository.save(newEntity);

        return plainToInstance(undefined, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async updatePet(data: Pet): Promise<void> {
        const detail = await this.petRepository.findOneBy({});
        if (!detail) {
            throw new NotFoundException(\`id \${id} not found\`);
        }

        const savedEntity = await this.petRepository.save(
            PetMappers.toPersistence(_.assign(detail, data)),
        );
        return plainToInstance(FindOneUserVo, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async findPetsByStatus(query: FindPetsByStatusQueryDto): Promise<Pet[]> {

        const [data, total] = await this.petRepository.find({
            where: { status: query.status },



        });

        return plainToInstance(
            undefined,
            { data, total },
            {
                exposeDefaultValues: true,
            },
        );
    }

    async findPetsByTags(query: FindPetsByTagsQueryDto): Promise<Pet[]> {

        const [data, total] = await this.petRepository.find({
            where: { tags: query.tags },



        });

        return plainToInstance(
            undefined,
            { data, total },
            {
                exposeDefaultValues: true,
            },
        );
    }

    async getPetById(petId: number): Promise<Pet> {
        const newEntity = await this.petRepository.findOne({ where: { petId: query.petId });
        return plainToInstance(FindOneUserVo, newEntity, {
            exposeDefaultValues: true,
        });
    }

    async updatePetWithForm(petId: number, data: any): Promise<void> {
        const newEntity = PetMappers.toPersistence(data);

        const savedEntity = await this.petRepository.save(newEntity);

        return plainToInstance(undefined, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async deletePet(petId: number): Promise<void> {
        return this.petRepository.softRemove(_.assign(new petEntity(), { petId }));
    }
}

import { Module } from '@nestjs/common';
import { UserRepository } from './users.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UserEntity } from '@/users/entities/user.entity';

@Module({
    imports: [TypeOrmModule.forFeature([UserEntity])],
    providers: [
        {
            provide: UserRepository,
            useClass: UserRepository,
        },
    ],
    exports: [UserRepository],
})
export class UserPersistenceModule { }

import { petEntity } from '../entities/pet.entity.ts';
import _ from 'lodash';

export class PetMappers {

    static toPersistence(data: any): petEntity {
        return _.assign(new petEntity(), data);
    }
}

import { Injectable, NotFoundException } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { storeEntity } from "../entities/store.entity.ts";
import { StoreMappers } from "./StoreMappers";
import { Repository } from "typeorm";
import { plainToInstance } from "class-transformer";
import { Order } from "./domain/Order.dto";

@Injectable
export class StoreRepository {
    constructor(@InjectRepository(storeEntity) private readonly storeRepository: Repository<storeEntity>) {
    }

    async placeOrder(data: Order): Promise<Order> {
        const newEntity = StoreMappers.toPersistence(data);

        const savedEntity = await this.storeRepository.save(newEntity);

        return plainToInstance(Order, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async getOrderById(orderId: number): Promise<Order> {
        const newEntity = await this.storeRepository.findOne({ where: { orderId: query.orderId });
        return plainToInstance(FindOneUserVo, newEntity, {
            exposeDefaultValues: true,
        });
    }

    async deleteOrder(orderId: number): Promise<void> {
        return this.storeRepository.softRemove(_.assign(new storeEntity(), { orderId }));
    }

    async getInventory(): Promise<void> {

        const [data, total] = await this.storeRepository.findOne({
            where: {},



        });

        return plainToInstance(
            undefined,
            { data, total },
            {
                exposeDefaultValues: true,
            },
        );
    }
}

import { Module } from '@nestjs/common';
import { UserRepository } from './users.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UserEntity } from '@/users/entities/user.entity';

@Module({
    imports: [TypeOrmModule.forFeature([UserEntity])],
    providers: [
        {
            provide: UserRepository,
            useClass: UserRepository,
        },
    ],
    exports: [UserRepository],
})
export class UserPersistenceModule { }

import { storeEntity } from '../entities/store.entity.ts';
import _ from 'lodash';

export class StoreMappers {

    static toPersistence(data: any): storeEntity {
        return _.assign(new storeEntity(), data);
    }
}

import { Injectable, NotFoundException } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { userEntity } from "../entities/user.entity.ts";
import { UserMappers } from "./UserMappers";
import { Repository } from "typeorm";
import { plainToInstance } from "class-transformer";
import { UserArray } from "./domain/UserArray.dto";
import { User } from "./domain/User.vo";
import { LoginUserQueryDto } from "./domain/loginUser-query.dto";

@Injectable
export class UserRepository {
    constructor(@InjectRepository(userEntity) private readonly userRepository: Repository<userEntity>) {
    }

    async createUsersWithArrayInput(data: UserArray[]): Promise<void> {
        const newEntity = UserMappers.toPersistence(data);

        const savedEntity = await this.userRepository.save(newEntity);

        return plainToInstance(undefined, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async createUsersWithListInput(data: UserArray[]): Promise<void> {
        const newEntity = UserMappers.toPersistence(data);

        const savedEntity = await this.userRepository.save(newEntity);

        return plainToInstance(undefined, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async getUserByName(username: string): Promise<User> {
        const newEntity = await this.userRepository.findOne({ where: { username: query.username });
        return plainToInstance(FindOneUserVo, newEntity, {
            exposeDefaultValues: true,
        });
    }

    async updateUser(username: string, data: User): Promise<void> {
        const detail = await this.userRepository.findOneBy({ username });
        if (!detail) {
            throw new NotFoundException(\`id \${id} not found\`);
        }

        const savedEntity = await this.userRepository.save(
            UserMappers.toPersistence(_.assign(detail, data)),
        );
        return plainToInstance(FindOneUserVo, savedEntity, {
            excludeExtraneousValues: true,
        });
    }

    async deleteUser(username: string): Promise<void> {
        return this.userRepository.softRemove(_.assign(new userEntity(), { username }));
    }

    async loginUser(query: LoginUserQueryDto): Promise<void> {

        const [data, total] = await this.userRepository.findOne({
            where: {
                username: query.username,
                password: query.password
            },



        });

        return plainToInstance(
            undefined,
            { data, total },
            {
                exposeDefaultValues: true,
            },
        );
    }

    async logoutUser(): Promise<void> {

        const [data, total] = await this.userRepository.findOne({
            where: {},



        });

        return plainToInstance(
            undefined,
            { data, total },
            {
                exposeDefaultValues: true,
            },
        );
    }

    async createUser(data: User): Promise<void> {
        const newEntity = UserMappers.toPersistence(data);

        const savedEntity = await this.userRepository.save(newEntity);

        return plainToInstance(undefined, savedEntity, {
            excludeExtraneousValues: true,
        });
    }
}

import { Module } from '@nestjs/common';
import { UserRepository } from './users.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UserEntity } from '@/users/entities/user.entity';

@Module({
    imports: [TypeOrmModule.forFeature([UserEntity])],
    providers: [
        {
            provide: UserRepository,
            useClass: UserRepository,
        },
    ],
    exports: [UserRepository],
})
export class UserPersistenceModule { }

import { userEntity } from '../entities/user.entity.ts';
import _ from 'lodash';

export class UserMappers {

    static toPersistence(data: any): userEntity {
        return _.assign(new userEntity(), data);
    }
}
"
`;
