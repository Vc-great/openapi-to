// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`faker > compare getFullText 1`] = `
"import { faker } from "@faker-js/faker";
import { testDto2Faker, test32145Faker, apiResponseFaker, petFaker } from "./faker-models";
import type { Pet } from "./newPet";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID Faker-pet
 */
class PetFaker {
    /**
     * @summary summary
     * @UUID operationIdpost
     */
    newtestPost(): NonNullable<Pet.TestPostMutationResponse> {
        return testDto2Faker()
    }

    /**
     * @summary summary
     * @UUID operationIdput
     */
    newtestPut(): NonNullable<Pet.TestPutMutationResponse> {
        return testDto2Faker()
    }

    /**
     * @summary summary
     * @UUID operationIddelete
     */
    delByTest(): NonNullable<Pet.DelByTestMutationResponse> {
        return test32145Faker()
    }

    /**
     * @summary summary
     * @UUID get/pet/test/{test-id}
     */
    testIdGet(): NonNullable<Pet.TestIdGetQueryResponse> {
        return testDto2Faker()
    }

    /**
     * @summary uploads an image
     * @description pet
     * @UUID uploadFile
     */
    uploadImagePost(): NonNullable<Pet.UploadImagePostMutationResponse> {
        return apiResponseFaker()
    }

    /**
     * @summary Add a new pet to the store
     * @UUID addPet
     */
    create(): NonNullable<Pet.CreateMutationResponse> {
        return {}
    }

    /**
     * @summary Update an existing pet
     * @UUID updatePet
     */
    update(): NonNullable<Pet.UpdateMutationResponse> {
        return {}
    }

    /**
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     * @UUID findPetsByStatus
     */
    findByStatusGet(): NonNullable<Pet.FindByStatusGetQueryResponse> {
        return faker.helpers.multiple(() => petFaker(), {
            count: 10,
        })
    }

    /**
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @UUID findPetsByTags
     */
    findByTagsGet(): NonNullable<Pet.FindByTagsGetQueryResponse> {
        return faker.helpers.multiple(() => petFaker(), {
            count: 10,
        })
    }

    /**
     * @summary Find pet by ID
     * @description Returns a single pet
     * @UUID getPetById
     */
    findByPetId(): NonNullable<Pet.FindByPetIdQueryResponse> {
        return petFaker()
    }

    /**
     * @summary Updates a pet in the store with form data
     * @UUID updatePetWithForm
     */
    petIdPost(): NonNullable<Pet.PetIdPostMutationResponse> {
        return {}
    }

    /**
     * @summary Deletes a pet
     * @UUID deletePet
     */
    delByPetId(): NonNullable<Pet.DelByPetIdMutationResponse> {
        return {}
    }
}

export const petFaker = new PetFaker;

import { faker } from "@faker-js/faker";
import { orderFaker } from "./faker-models";
import type { Pet } from "./Pet";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID Faker-store
 */
class StoreFaker {
    /**
     * @summary Place an order for a pet
     * @UUID placeOrder
     */
    create(): NonNullable<Pet.CreateMutationResponse> {
        return orderFaker()
    }

    /**
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @UUID getOrderById
     */
    findByOrderId(): NonNullable<Pet.FindByOrderIdQueryResponse> {
        return orderFaker()
    }

    /**
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @UUID deleteOrder
     */
    delByOrderId(): NonNullable<Pet.DelByOrderIdMutationResponse> {
        return {}
    }

    /**
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     * @UUID getInventory
     */
    inventoryGet(): NonNullable<Pet.InventoryGetQueryResponse> {
        return {}
    }
}

export const storeFaker = new StoreFaker;

import { faker } from "@faker-js/faker";
import { userFaker } from "./faker-models";
import type { Pet } from "./Pet";

/**
 * @tag user
 * @description Operations about user
 * @UUID Faker-user
 */
class UserFaker {
    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithArrayInput
     */
    createWithArrayPost(): NonNullable<Pet.CreateWithArrayPostMutationResponse> {
        return {}
    }

    /**
     * @summary Creates list of users with given input array
     * @UUID createUsersWithListInput
     */
    createWithListPost(): NonNullable<Pet.CreateWithListPostMutationResponse> {
        return {}
    }

    /**
     * @summary Get user by user name
     * @UUID getUserByName
     */
    findByUsername(): NonNullable<Pet.FindByUsernameQueryResponse> {
        return userFaker()
    }

    /**
     * @summary Updated user
     * @description This can only be done by the logged in user.
     * @UUID updateUser
     */
    usernamePut(): NonNullable<Pet.UsernamePutMutationResponse> {
        return {}
    }

    /**
     * @summary Delete user
     * @description This can only be done by the logged in user.
     * @UUID deleteUser
     */
    delByUsername(): NonNullable<Pet.DelByUsernameMutationResponse> {
        return {}
    }

    /**
     * @summary Logs user into the system
     * @UUID loginUser
     */
    loginGet(): NonNullable<Pet.LoginGetQueryResponse> {
        return
    }

    /**
     * @summary Logs out current logged in user session
     * @UUID logoutUser
     */
    logoutGet(): NonNullable<Pet.LogoutGetQueryResponse> {
        return {}
    }

    /**
     * @summary Create user
     * @description This can only be done by the logged in user.
     * @UUID createUser
     */
    create(): NonNullable<Pet.CreateMutationResponse> {
        return {}
    }
}

export const userFaker = new UserFaker;

import { testdataFaker } from "./testdataFaker";
import { faker } from "@faker-js/faker";
import type { Test32145 } from "../models";

export function test32145Faker(): Test32145 {
    return {
        /**this is description*/
        code: faker.number.int(),
        meta: testdataFaker()
    }
}

import { faker } from "@faker-js/faker";
import type { Test3214 } from "../models";

export function test3214Faker(): Test3214 {
    return {
        /**默认值*/
        columnDefault: faker.string.alpha(),
        /**this is description*/
        columnLength: faker.number.int(),
        /**this is description*/
        columnName: faker.string.alpha(),
        /**this is description*/
        columnRemark: faker.string.alpha(),
        /**this is description*/
        columnScale: faker.number.int(),
        /**this is description*/
        columnType: faker.string.alpha(),
        /**this is description*/
        delFlag: faker.datatype.boolean(),
        formId: faker.number.int(),
        /**id*/
        id: faker.number.int(),
        /**this is description*/
        notNull: faker.datatype.boolean()
    }
}

import { faker } from "@faker-js/faker";
import type { Testdata } from "../models";

export function testdataFaker(): Testdata {
    return {
        /**this is description*/
        number: faker.number.int(),
        /**this is description*/
        numberOfElements: faker.number.int(),
        /**this is description*/
        totalElements: faker.number.int(),
        /**this is description*/
        totalPages: faker.number.int()
    }
}

import { faker } from "@faker-js/faker";
import type { Sort } from "../models";

export function sortFaker(): Sort {
    return {
        empty: faker.datatype.boolean(),
        sorted: faker.datatype.boolean(),
        unsorted: faker.datatype.boolean()
    }
}

import { test3214Faker } from "./test3214Faker";
import { faker } from "@faker-js/faker";
import type { TestDto3 } from "../models";

export function testDto3Faker(): TestDto3 {
    return {
        test3214: faker.helpers.multiple(() => test3214Faker(), {
            count: 10,
        })
    }
}

import { testDto3Faker } from "./testDto3Faker";
import { testdataFaker } from "./testdataFaker";
import { faker } from "@faker-js/faker";
import type { TestDto2 } from "../models";

export function testDto2Faker(): TestDto2 {
    return {
        content: testDto3Faker(),
        meta: testdataFaker()
    }
}

import { faker } from "@faker-js/faker";
import type { Test321 } from "../models";

export function test321Faker(): Test321 {
    return {
        id: faker.number.int()
    }
}

import { test321Faker } from "./test321Faker";
import { faker } from "@faker-js/faker";
import type { TestDto } from "../models";

export function testDtoFaker(): TestDto {
    return {
        /**test321*/
        test321: faker.helpers.multiple(() => test321Faker(), {
            count: 10,
        })
    }
}

import { apiResponseFaker } from "./apiResponseFaker";
import { faker } from "@faker-js/faker";
import type { RefList } from "../models";

export function refListFaker(): RefList {
    return {
        content: apiResponseFaker(),
        /**string*/
        string: faker.string.alpha(),
        name: faker.string.alpha(),
        /**title*/
        title: faker.string.alpha(),
        /**type*/
        type: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { ApiResponse } from "../models";

export function apiResponseFaker(): ApiResponse {
    return {
        code: faker.number.int(),
        type: faker.string.alpha(),
        message: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Category } from "../models";

export function categoryFaker(): Category {
    return {
        id: faker.number.int(),
        name: faker.string.alpha()
    }
}

import { categoryFaker } from "./categoryFaker";
import { tagFaker } from "./tagFaker";
import { faker } from "@faker-js/faker";
import type { Pet } from "../models";

export function petFaker(): Pet {
    return {
        id: faker.number.int(),
        category: categoryFaker(),
        name: faker.string.alpha(),
        photoUrls: faker.helpers.multiple(() => faker.string.alpha(), {
            count: 10,
        }),
        tags: faker.helpers.multiple(() => tagFaker(), {
            count: 10,
        }),
        /**pet status in the store*/
        status: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Tag } from "../models";

export function tagFaker(): Tag {
    return {
        id: faker.number.int(),
        name: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Order } from "../models";

export function orderFaker(): Order {
    return {
        id: faker.number.int(),
        petId: faker.number.int(),
        quantity: faker.number.int(),
        shipDate: faker.string.alpha(),
        /**Order Status*/
        status: faker.string.alpha(),
        complete: faker.datatype.boolean()
    }
}

import { faker } from "@faker-js/faker";
import type { User } from "../models";

export function userFaker(): User {
    return {
        id: faker.number.int(),
        username: faker.string.alpha(),
        firstName: faker.string.alpha(),
        lastName: faker.string.alpha(),
        email: faker.string.alpha(),
        password: faker.string.alpha(),
        phone: faker.string.alpha(),
        /**User Status*/
        userStatus: faker.number.int()
    }
}

export * from "./testdataFaker";
export * from "./test32145.faker";
export * from "./test3214.faker";
export * from "./testdata.faker";
export * from "./sort.faker";
export * from "./test3214Faker";
export * from "./testDto3.faker";
export * from "./testDto3Faker";
export * from "./testDto2.faker";
export * from "./test321.faker";
export * from "./test321Faker";
export * from "./testDto.faker";
export * from "./apiResponseFaker";
export * from "./refList.faker";
export * from "./apiResponse.faker";
export * from "./category.faker";
export * from "./categoryFaker";
export * from "./tagFaker";
export * from "./pet.faker";
export * from "./tag.faker";
export * from "./order.faker";
export * from "./user.faker";
"
`;

exports[`faker > getFullText 1`] = `
"import { faker } from "@faker-js/faker";
import { testDto2Faker, test32145Faker, apiResponseFaker, petFaker } from "./faker-models";
import type { Pet } from "./pet.type";

/**
 * @tag pet
 * @description Everything about your Pets
 */
class PetFaker {
    /** @summary summary */
    testPost(): NonNullable<Pet.TestPostMutationResponse> {
        return testDto2Faker()
    }

    /** @summary summary */
    testPut(): NonNullable<Pet.TestPutMutationResponse> {
        return testDto2Faker()
    }

    /** @summary summary */
    delByTest(): NonNullable<Pet.DelByTestMutationResponse> {
        return test32145Faker()
    }

    /** @summary summary */
    testIdGet(): NonNullable<Pet.TestIdGetQueryResponse> {
        return testDto2Faker()
    }

    /**
     * @summary uploads an image
     * @description pet
     */
    uploadImagePost(): NonNullable<Pet.UploadImagePostMutationResponse> {
        return apiResponseFaker()
    }

    /** @summary Add a new pet to the store */
    create(): NonNullable<Pet.CreateMutationResponse> {
        return {}
    }

    /** @summary Update an existing pet */
    update(): NonNullable<Pet.UpdateMutationResponse> {
        return {}
    }

    /**
     * @summary Finds Pets by status
     * @description Multiple status values can be provided with comma separated strings
     */
    findByStatusGet(): NonNullable<Pet.FindByStatusGetQueryResponse> {
        return faker.helpers.multiple(() => petFaker(), {
            count: 10,
        })
    }

    /**
     * @summary Finds Pets by tags
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    findByTagsGet(): NonNullable<Pet.FindByTagsGetQueryResponse> {
        return faker.helpers.multiple(() => petFaker(), {
            count: 10,
        })
    }

    /**
     * @summary Find pet by ID
     * @description Returns a single pet
     */
    findByPetId(): NonNullable<Pet.FindByPetIdQueryResponse> {
        return petFaker()
    }

    /** @summary Updates a pet in the store with form data */
    petIdPost(): NonNullable<Pet.PetIdPostMutationResponse> {
        return {}
    }

    /** @summary Deletes a pet */
    delByPetId(): NonNullable<Pet.DelByPetIdMutationResponse> {
        return {}
    }
}

export const petFaker = new PetFaker;

import { faker } from "@faker-js/faker";
import { orderFaker } from "./faker-models";
import type { Store } from "./store.type";

/**
 * @tag store
 * @description Access to Petstore orders
 */
class StoreFaker {
    /** @summary Place an order for a pet */
    create(): NonNullable<Store.CreateMutationResponse> {
        return orderFaker()
    }

    /**
     * @summary Find purchase order by ID
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     */
    findByOrderId(): NonNullable<Store.FindByOrderIdQueryResponse> {
        return orderFaker()
    }

    /**
     * @summary Delete purchase order by ID
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     */
    delByOrderId(): NonNullable<Store.DelByOrderIdMutationResponse> {
        return {}
    }

    /**
     * @summary Returns pet inventories by status
     * @description Returns a map of status codes to quantities
     */
    inventoryGet(): NonNullable<Store.InventoryGetQueryResponse> {
        return {}
    }
}

export const storeFaker = new StoreFaker;

import { faker } from "@faker-js/faker";
import { userFaker } from "./faker-models";
import type { User } from "./user.type";

/**
 * @tag user
 * @description Operations about user
 */
class UserFaker {
    /** @summary Creates list of users with given input array */
    createWithArrayPost(): NonNullable<User.CreateWithArrayPostMutationResponse> {
        return {}
    }

    /** @summary Creates list of users with given input array */
    createWithListPost(): NonNullable<User.CreateWithListPostMutationResponse> {
        return {}
    }

    /** @summary Get user by user name */
    findByUsername(): NonNullable<User.FindByUsernameQueryResponse> {
        return userFaker()
    }

    /**
     * @summary Updated user
     * @description This can only be done by the logged in user.
     */
    usernamePut(): NonNullable<User.UsernamePutMutationResponse> {
        return {}
    }

    /**
     * @summary Delete user
     * @description This can only be done by the logged in user.
     */
    delByUsername(): NonNullable<User.DelByUsernameMutationResponse> {
        return {}
    }

    /** @summary Logs user into the system */
    loginGet(): NonNullable<User.LoginGetQueryResponse> {
        return
    }

    /** @summary Logs out current logged in user session */
    logoutGet(): NonNullable<User.LogoutGetQueryResponse> {
        return {}
    }

    /**
     * @summary Create user
     * @description This can only be done by the logged in user.
     */
    create(): NonNullable<User.CreateMutationResponse> {
        return {}
    }
}

export const userFaker = new UserFaker;

import { testdataFaker } from "./testdataFaker";
import { faker } from "@faker-js/faker";
import type { Test32145 } from "../models";

export function test32145Faker(): Test32145 {
    return {
        /**this is description*/
        code: faker.number.int(),
        meta: testdataFaker()
    }
}

import { faker } from "@faker-js/faker";
import type { Test3214 } from "../models";

export function test3214Faker(): Test3214 {
    return {
        /**默认值*/
        columnDefault: faker.string.alpha(),
        /**this is description*/
        columnLength: faker.number.int(),
        /**this is description*/
        columnName: faker.string.alpha(),
        /**this is description*/
        columnRemark: faker.string.alpha(),
        /**this is description*/
        columnScale: faker.number.int(),
        /**this is description*/
        columnType: faker.string.alpha(),
        /**this is description*/
        delFlag: faker.datatype.boolean(),
        formId: faker.number.int(),
        /**id*/
        id: faker.number.int(),
        /**this is description*/
        notNull: faker.datatype.boolean()
    }
}

import { faker } from "@faker-js/faker";
import type { Testdata } from "../models";

export function testdataFaker(): Testdata {
    return {
        /**this is description*/
        number: faker.number.int(),
        /**this is description*/
        numberOfElements: faker.number.int(),
        /**this is description*/
        totalElements: faker.number.int(),
        /**this is description*/
        totalPages: faker.number.int()
    }
}

import { faker } from "@faker-js/faker";
import type { Sort } from "../models";

export function sortFaker(): Sort {
    return {
        empty: faker.datatype.boolean(),
        sorted: faker.datatype.boolean(),
        unsorted: faker.datatype.boolean()
    }
}

import { test3214Faker } from "./test3214Faker";
import { faker } from "@faker-js/faker";
import type { TestDto3 } from "../models";

export function testDto3Faker(): TestDto3 {
    return {
        test3214: faker.helpers.multiple(() => test3214Faker(), {
            count: 10,
        })
    }
}

import { testDto3Faker } from "./testDto3Faker";
import { testdataFaker } from "./testdataFaker";
import { faker } from "@faker-js/faker";
import type { TestDto2 } from "../models";

export function testDto2Faker(): TestDto2 {
    return {
        content: testDto3Faker(),
        meta: testdataFaker()
    }
}

import { faker } from "@faker-js/faker";
import type { Test321 } from "../models";

export function test321Faker(): Test321 {
    return {
        id: faker.number.int()
    }
}

import { test321Faker } from "./test321Faker";
import { faker } from "@faker-js/faker";
import type { TestDto } from "../models";

export function testDtoFaker(): TestDto {
    return {
        /**test321*/
        test321: faker.helpers.multiple(() => test321Faker(), {
            count: 10,
        })
    }
}

import { apiResponseFaker } from "./apiResponseFaker";
import { faker } from "@faker-js/faker";
import type { RefList } from "../models";

export function refListFaker(): RefList {
    return {
        content: apiResponseFaker(),
        /**string*/
        string: faker.string.alpha(),
        name: faker.string.alpha(),
        /**title*/
        title: faker.string.alpha(),
        /**type*/
        type: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { ApiResponse } from "../models";

export function apiResponseFaker(): ApiResponse {
    return {
        code: faker.number.int(),
        type: faker.string.alpha(),
        message: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Category } from "../models";

export function categoryFaker(): Category {
    return {
        id: faker.number.int(),
        name: faker.string.alpha()
    }
}

import { categoryFaker } from "./categoryFaker";
import { tagFaker } from "./tagFaker";
import { faker } from "@faker-js/faker";
import type { Pet } from "../models";

export function petFaker(): Pet {
    return {
        id: faker.number.int(),
        category: categoryFaker(),
        name: faker.string.alpha(),
        photoUrls: faker.helpers.multiple(() => faker.string.alpha(), {
            count: 10,
        }),
        tags: faker.helpers.multiple(() => tagFaker(), {
            count: 10,
        }),
        /**pet status in the store*/
        status: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Tag } from "../models";

export function tagFaker(): Tag {
    return {
        id: faker.number.int(),
        name: faker.string.alpha()
    }
}

import { faker } from "@faker-js/faker";
import type { Order } from "../models";

export function orderFaker(): Order {
    return {
        id: faker.number.int(),
        petId: faker.number.int(),
        quantity: faker.number.int(),
        shipDate: faker.string.alpha(),
        /**Order Status*/
        status: faker.string.alpha(),
        complete: faker.datatype.boolean()
    }
}

import { faker } from "@faker-js/faker";
import type { User } from "../models";

export function userFaker(): User {
    return {
        id: faker.number.int(),
        username: faker.string.alpha(),
        firstName: faker.string.alpha(),
        lastName: faker.string.alpha(),
        email: faker.string.alpha(),
        password: faker.string.alpha(),
        phone: faker.string.alpha(),
        /**User Status*/
        userStatus: faker.number.int()
    }
}

export * from "./testdataFaker";
export * from "./test32145.faker";
export * from "./test3214.faker";
export * from "./testdata.faker";
export * from "./sort.faker";
export * from "./test3214Faker";
export * from "./testDto3.faker";
export * from "./testDto3Faker";
export * from "./testDto2.faker";
export * from "./test321.faker";
export * from "./test321Faker";
export * from "./testDto.faker";
export * from "./apiResponseFaker";
export * from "./refList.faker";
export * from "./apiResponse.faker";
export * from "./category.faker";
export * from "./categoryFaker";
export * from "./tagFaker";
export * from "./pet.faker";
export * from "./tag.faker";
export * from "./order.faker";
export * from "./user.faker";
"
`;
