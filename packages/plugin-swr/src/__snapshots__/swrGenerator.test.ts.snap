// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`swr > swr getFullText 1`] = `
"import { petAPI } from "./petAPI";
import type { Pet } from "./Pet";
import useSWR from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

const testPostMutationKey = () => [{ url: \`/pet/test\` }] as const;

const testPutMutationKey = () => [{ url: \`/pet/test\` }] as const;

const delByTestMutationKey = () => [{ url: \`/pet/test\` }] as const;

const testIdGetQueryKey = (testId: Pet.TestIdGetPathParams['testId'], params: Pet.TestIdGetQueryParams) => [{ url: \`/pet/test/\${testId}\` }, ...(params ? [params] : [])] as const;

const uploadImagePostMutationKey = (petId: Pet.UploadImagePostPathParams['petId']) => [{ url: \`/pet/\${petId}/uploadImage\` }] as const;

const createMutationKey = () => [{ url: \`/pet\` }] as const;

const updateMutationKey = () => [{ url: \`/pet\` }] as const;

const findByStatusGetQueryKey = (params: Pet.FindByStatusGetQueryParams) => [{ url: \`/pet/findByStatus\` }, ...(params ? [params] : [])] as const;

const findByTagsGetQueryKey = (params: Pet.FindByTagsGetQueryParams) => [{ url: \`/pet/findByTags\` }, ...(params ? [params] : [])] as const;

const findByPetIdQueryKey = (petId: Pet.FindByPetIdPathParams['petId']) => [{ url: \`/pet/\${petId}\` }] as const;

const petIdPostMutationKey = (petId: Pet.PetIdPostPathParams['petId']) => [{ url: \`/pet/\${petId}\` }] as const;

const delByPetIdMutationKey = (petId: Pet.DelByPetIdPathParams['petId']) => [{ url: \`/pet/\${petId}\` }] as const;
type TestPostMutationKey = ReturnType<typeof testPostMutationKey>;
type TestPutMutationKey = ReturnType<typeof testPutMutationKey>;
type DelByTestMutationKey = ReturnType<typeof delByTestMutationKey>;
type TestIdGetQueryKey = ReturnType<typeof testIdGetQueryKey>;
type UploadImagePostMutationKey = ReturnType<typeof uploadImagePostMutationKey>;
type CreateMutationKey = ReturnType<typeof createMutationKey>;
type UpdateMutationKey = ReturnType<typeof updateMutationKey>;
type FindByStatusGetQueryKey = ReturnType<typeof findByStatusGetQueryKey>;
type FindByTagsGetQueryKey = ReturnType<typeof findByTagsGetQueryKey>;
type FindByPetIdQueryKey = ReturnType<typeof findByPetIdQueryKey>;
type PetIdPostMutationKey = ReturnType<typeof petIdPostMutationKey>;
type DelByPetIdMutationKey = ReturnType<typeof delByPetIdMutationKey>;

/** @summary summary */
function useTestPost(options: {
    swr?: SWRMutationConfiguration<Pet.TestPostMutationResponse, Pet.TestPostError, TestPostMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = testPostMutationKey()

    useSWRMutation<Pet.TestPostMutationResponse, Pet.TestPostError, TestPostMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.testPost();
    }, mutationOptions);
}

/** @summary summary */
function useTestPut(options: {
    swr?: SWRMutationConfiguration<Pet.TestPutMutationResponse, Pet.TestPutError, TestPutMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = testPutMutationKey()

    useSWRMutation<Pet.TestPutMutationResponse, Pet.TestPutError, TestPutMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.testPut();
    }, mutationOptions);
}

/** @summary summary */
function useDelByTest(options: {
    swr?: SWRMutationConfiguration<Pet.DelByTestMutationResponse, Pet.DelByTestError, DelByTestMutationKey | null, Pet.DelByTestMutationRequest>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = delByTestMutationKey()

    useSWRMutation<Pet.DelByTestMutationResponse, Pet.DelByTestError, DelByTestMutationKey | null, Pet.DelByTestMutationRequest>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.delByTest(data);
    }, mutationOptions);
}

/** @summary summary */
function useTestIdGet(testId: Pet.TestIdGetPathParams['testId'], params: Pet.TestIdGetQueryParams, options: {
    swr?: Parameters<typeof useSWR<Pet.TestIdGetQueryResponse, TestIdGetQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = testIdGetQueryKey(testId, params)

    useSWR<Pet.TestIdGetQueryResponse, Pet.TestIdGetError, TestIdGetQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return petAPI.testIdGet(testId, params);
        }
    })
}

/**
 * @summary uploads an image
 * @description pet
 */
function useUploadImagePost(petId: Pet.UploadImagePostPathParams['petId'], options: {
    swr?: SWRMutationConfiguration<Pet.UploadImagePostMutationResponse, Pet.UploadImagePostError, UploadImagePostMutationKey | null, Pet.UploadImagePostMutationRequest>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = uploadImagePostMutationKey(petId)

    useSWRMutation<Pet.UploadImagePostMutationResponse, Pet.UploadImagePostError, UploadImagePostMutationKey | null, Pet.UploadImagePostMutationRequest>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.uploadImagePost(petId, data);
    }, mutationOptions);
}

/** @summary Add a new pet to the store */
function useCreate(options: {
    swr?: SWRMutationConfiguration<Pet.CreateMutationResponse, Pet.CreateError, CreateMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = createMutationKey()

    useSWRMutation<Pet.CreateMutationResponse, Pet.CreateError, CreateMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.create();
    }, mutationOptions);
}

/** @summary Update an existing pet */
function useUpdate(options: {
    swr?: SWRMutationConfiguration<Pet.UpdateMutationResponse, Pet.UpdateError, UpdateMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = updateMutationKey()

    useSWRMutation<Pet.UpdateMutationResponse, Pet.UpdateError, UpdateMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.update();
    }, mutationOptions);
}

/**
 * @summary Finds Pets by status
 * @description Multiple status values can be provided with comma separated strings
 */
function useFindByStatusGet(params: Pet.FindByStatusGetQueryParams, options: {
    swr?: Parameters<typeof useSWR<Pet.FindByStatusGetQueryResponse, FindByStatusGetQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = findByStatusGetQueryKey(params)

    useSWR<Pet.FindByStatusGetQueryResponse, Pet.FindByStatusGetError, FindByStatusGetQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return petAPI.findByStatusGet(params);
        }
    })
}

/**
 * @summary Finds Pets by tags
 * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
function useFindByTagsGet(params: Pet.FindByTagsGetQueryParams, options: {
    swr?: Parameters<typeof useSWR<Pet.FindByTagsGetQueryResponse, FindByTagsGetQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = findByTagsGetQueryKey(params)

    useSWR<Pet.FindByTagsGetQueryResponse, Pet.FindByTagsGetError, FindByTagsGetQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return petAPI.findByTagsGet(params);
        }
    })
}

/**
 * @summary Find pet by ID
 * @description Returns a single pet
 */
function useFindByPetId(petId: Pet.FindByPetIdPathParams['petId'], options: {
    swr?: Parameters<typeof useSWR<Pet.FindByPetIdQueryResponse, FindByPetIdQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = findByPetIdQueryKey(petId)

    useSWR<Pet.FindByPetIdQueryResponse, Pet.FindByPetIdError, FindByPetIdQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return petAPI.findByPetId(petId);
        }
    })
}

/** @summary Updates a pet in the store with form data */
function usePetIdPost(petId: Pet.PetIdPostPathParams['petId'], options: {
    swr?: SWRMutationConfiguration<Pet.PetIdPostMutationResponse, Pet.PetIdPostError, PetIdPostMutationKey | null, Pet.PetIdPostMutationRequest>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = petIdPostMutationKey(petId)

    useSWRMutation<Pet.PetIdPostMutationResponse, Pet.PetIdPostError, PetIdPostMutationKey | null, Pet.PetIdPostMutationRequest>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.petIdPost(petId, data);
    }, mutationOptions);
}

/** @summary Deletes a pet */
function useDelByPetId(petId: Pet.DelByPetIdPathParams['petId'], options: {
    swr?: SWRMutationConfiguration<Pet.DelByPetIdMutationResponse, Pet.DelByPetIdError, DelByPetIdMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = delByPetIdMutationKey(petId)

    useSWRMutation<Pet.DelByPetIdMutationResponse, Pet.DelByPetIdError, DelByPetIdMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return petAPI.delByPetId(petId);
    }, mutationOptions);
}

export const petSWR = {
    testPostMutationKey, testPutMutationKey, delByTestMutationKey, testIdGetQueryKey, uploadImagePostMutationKey, createMutationKey, updateMutationKey, findByStatusGetQueryKey, findByTagsGetQueryKey, findByPetIdQueryKey, petIdPostMutationKey, delByPetIdMutationKey, useTestPost, useTestPut, useDelByTest, useTestIdGet, useUploadImagePost, useCreate, useUpdate, useFindByStatusGet, useFindByTagsGet, useFindByPetId, usePetIdPost, useDelByPetId
};

export namespace PetSWR {
    export type TestPostMutationKey = ReturnType<typeof testPostMutationKey>;
    export type TestPutMutationKey = ReturnType<typeof testPutMutationKey>;
    export type DelByTestMutationKey = ReturnType<typeof delByTestMutationKey>;
    export type TestIdGetQueryKey = ReturnType<typeof testIdGetQueryKey>;
    export type UploadImagePostMutationKey = ReturnType<typeof uploadImagePostMutationKey>;
    export type CreateMutationKey = ReturnType<typeof createMutationKey>;
    export type UpdateMutationKey = ReturnType<typeof updateMutationKey>;
    export type FindByStatusGetQueryKey = ReturnType<typeof findByStatusGetQueryKey>;
    export type FindByTagsGetQueryKey = ReturnType<typeof findByTagsGetQueryKey>;
    export type FindByPetIdQueryKey = ReturnType<typeof findByPetIdQueryKey>;
    export type PetIdPostMutationKey = ReturnType<typeof petIdPostMutationKey>;
    export type DelByPetIdMutationKey = ReturnType<typeof delByPetIdMutationKey>;
}

import { storeAPI } from "./storeAPI";
import type { Store } from "./Store";
import useSWR from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

const createMutationKey = () => [{ url: \`/store/order\` }] as const;

const findByOrderIdQueryKey = (orderId: Store.FindByOrderIdPathParams['orderId']) => [{ url: \`/store/order/\${orderId}\` }] as const;

const delByOrderIdMutationKey = (orderId: Store.DelByOrderIdPathParams['orderId']) => [{ url: \`/store/order/\${orderId}\` }] as const;

const inventoryGetQueryKey = () => [{ url: \`/store/inventory\` }] as const;
type CreateMutationKey = ReturnType<typeof createMutationKey>;
type FindByOrderIdQueryKey = ReturnType<typeof findByOrderIdQueryKey>;
type DelByOrderIdMutationKey = ReturnType<typeof delByOrderIdMutationKey>;
type InventoryGetQueryKey = ReturnType<typeof inventoryGetQueryKey>;

/** @summary Place an order for a pet */
function useCreate(options: {
    swr?: SWRMutationConfiguration<Store.CreateMutationResponse, Store.CreateError, CreateMutationKey | null, Store.CreateMutationRequest>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = createMutationKey()

    useSWRMutation<Store.CreateMutationResponse, Store.CreateError, CreateMutationKey | null, Store.CreateMutationRequest>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return storeAPI.create(data);
    }, mutationOptions);
}

/**
 * @summary Find purchase order by ID
 * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
function useFindByOrderId(orderId: Store.FindByOrderIdPathParams['orderId'], options: {
    swr?: Parameters<typeof useSWR<Store.FindByOrderIdQueryResponse, FindByOrderIdQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = findByOrderIdQueryKey(orderId)

    useSWR<Store.FindByOrderIdQueryResponse, Store.FindByOrderIdError, FindByOrderIdQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return storeAPI.findByOrderId(orderId);
        }
    })
}

/**
 * @summary Delete purchase order by ID
 * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
function useDelByOrderId(orderId: Store.DelByOrderIdPathParams['orderId'], options: {
    swr?: SWRMutationConfiguration<Store.DelByOrderIdMutationResponse, Store.DelByOrderIdError, DelByOrderIdMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = delByOrderIdMutationKey(orderId)

    useSWRMutation<Store.DelByOrderIdMutationResponse, Store.DelByOrderIdError, DelByOrderIdMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return storeAPI.delByOrderId(orderId);
    }, mutationOptions);
}

/**
 * @summary Returns pet inventories by status
 * @description Returns a map of status codes to quantities
 */
function useInventoryGet(options: {
    swr?: Parameters<typeof useSWR<Store.InventoryGetQueryResponse, InventoryGetQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = inventoryGetQueryKey()

    useSWR<Store.InventoryGetQueryResponse, Store.InventoryGetError, InventoryGetQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return storeAPI.inventoryGet();
        }
    })
}

export const storeSWR = {
    createMutationKey, findByOrderIdQueryKey, delByOrderIdMutationKey, inventoryGetQueryKey, useCreate, useFindByOrderId, useDelByOrderId, useInventoryGet
};

export namespace StoreSWR {
    export type CreateMutationKey = ReturnType<typeof createMutationKey>;
    export type FindByOrderIdQueryKey = ReturnType<typeof findByOrderIdQueryKey>;
    export type DelByOrderIdMutationKey = ReturnType<typeof delByOrderIdMutationKey>;
    export type InventoryGetQueryKey = ReturnType<typeof inventoryGetQueryKey>;
}

import { userAPI } from "./userAPI";
import type { User } from "./User";
import useSWR from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

const createWithArrayPostMutationKey = () => [{ url: \`/user/createWithArray\` }] as const;

const createWithListPostMutationKey = () => [{ url: \`/user/createWithList\` }] as const;

const findByUsernameQueryKey = (username: User.FindByUsernamePathParams['username']) => [{ url: \`/user/\${username}\` }] as const;

const usernamePutMutationKey = (username: User.UsernamePutPathParams['username']) => [{ url: \`/user/\${username}\` }] as const;

const delByUsernameMutationKey = (username: User.DelByUsernamePathParams['username']) => [{ url: \`/user/\${username}\` }] as const;

const loginGetQueryKey = (params: User.LoginGetQueryParams) => [{ url: \`/user/login\` }, ...(params ? [params] : [])] as const;

const logoutGetQueryKey = () => [{ url: \`/user/logout\` }] as const;

const createMutationKey = () => [{ url: \`/user\` }] as const;
type CreateWithArrayPostMutationKey = ReturnType<typeof createWithArrayPostMutationKey>;
type CreateWithListPostMutationKey = ReturnType<typeof createWithListPostMutationKey>;
type FindByUsernameQueryKey = ReturnType<typeof findByUsernameQueryKey>;
type UsernamePutMutationKey = ReturnType<typeof usernamePutMutationKey>;
type DelByUsernameMutationKey = ReturnType<typeof delByUsernameMutationKey>;
type LoginGetQueryKey = ReturnType<typeof loginGetQueryKey>;
type LogoutGetQueryKey = ReturnType<typeof logoutGetQueryKey>;
type CreateMutationKey = ReturnType<typeof createMutationKey>;

/** @summary Creates list of users with given input array */
function useCreateWithArrayPost(options: {
    swr?: SWRMutationConfiguration<User.CreateWithArrayPostMutationResponse, User.CreateWithArrayPostError, CreateWithArrayPostMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = createWithArrayPostMutationKey()

    useSWRMutation<User.CreateWithArrayPostMutationResponse, User.CreateWithArrayPostError, CreateWithArrayPostMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return userAPI.createWithArrayPost();
    }, mutationOptions);
}

/** @summary Creates list of users with given input array */
function useCreateWithListPost(options: {
    swr?: SWRMutationConfiguration<User.CreateWithListPostMutationResponse, User.CreateWithListPostError, CreateWithListPostMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = createWithListPostMutationKey()

    useSWRMutation<User.CreateWithListPostMutationResponse, User.CreateWithListPostError, CreateWithListPostMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return userAPI.createWithListPost();
    }, mutationOptions);
}

/** @summary Get user by user name */
function useFindByUsername(username: User.FindByUsernamePathParams['username'], options: {
    swr?: Parameters<typeof useSWR<User.FindByUsernameQueryResponse, FindByUsernameQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = findByUsernameQueryKey(username)

    useSWR<User.FindByUsernameQueryResponse, User.FindByUsernameError, FindByUsernameQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return userAPI.findByUsername(username);
        }
    })
}

/**
 * @summary Updated user
 * @description This can only be done by the logged in user.
 */
function useUsernamePut(username: User.UsernamePutPathParams['username'], options: {
    swr?: SWRMutationConfiguration<User.UsernamePutMutationResponse, User.UsernamePutError, UsernamePutMutationKey | null, User.UsernamePutMutationRequest>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = usernamePutMutationKey(username)

    useSWRMutation<User.UsernamePutMutationResponse, User.UsernamePutError, UsernamePutMutationKey | null, User.UsernamePutMutationRequest>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return userAPI.usernamePut(username, data);
    }, mutationOptions);
}

/**
 * @summary Delete user
 * @description This can only be done by the logged in user.
 */
function useDelByUsername(username: User.DelByUsernamePathParams['username'], options: {
    swr?: SWRMutationConfiguration<User.DelByUsernameMutationResponse, User.DelByUsernameError, DelByUsernameMutationKey | null, never>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = delByUsernameMutationKey(username)

    useSWRMutation<User.DelByUsernameMutationResponse, User.DelByUsernameError, DelByUsernameMutationKey | null, never>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return userAPI.delByUsername(username);
    }, mutationOptions);
}

/** @summary Logs user into the system */
function useLoginGet(params: User.LoginGetQueryParams, options: {
    swr?: Parameters<typeof useSWR<User.LoginGetQueryResponse, LoginGetQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = loginGetQueryKey(params)

    useSWR<User.LoginGetQueryResponse, User.LoginGetError, LoginGetQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return userAPI.loginGet(params);
        }
    })
}

/** @summary Logs out current logged in user session */
function useLogoutGet(options: {
    swr?: Parameters<typeof useSWR<User.LogoutGetQueryResponse, LogoutGetQueryKey | null, any>>[2]
    shouldFetch?: boolean
}) {

    const { swr: queryOptions, shouldFetch = true } = options ?? {}
    const queryKey = logoutGetQueryKey()

    useSWR<User.LogoutGetQueryResponse, User.LogoutGetError, LogoutGetQueryKey | null>(shouldFetch ? queryKey : null, {
        ...queryOptions,
        fetcher: async () => {
            return userAPI.logoutGet();
        }
    })
}

/**
 * @summary Create user
 * @description This can only be done by the logged in user.
 */
function useCreate(options: {
    swr?: SWRMutationConfiguration<User.CreateMutationResponse, User.CreateError, CreateMutationKey | null, User.CreateMutationRequest>;
    shouldFetch?: boolean;
}) {

    const { swr: mutationOptions, shouldFetch = true } = options ?? {}
    const mutationKey = createMutationKey()

    useSWRMutation<User.CreateMutationResponse, User.CreateError, CreateMutationKey | null, User.CreateMutationRequest>(shouldFetch ? mutationKey : null, async (_url, { arg: data }) => {
        return userAPI.create(data);
    }, mutationOptions);
}

export const userSWR = {
    createWithArrayPostMutationKey, createWithListPostMutationKey, findByUsernameQueryKey, usernamePutMutationKey, delByUsernameMutationKey, loginGetQueryKey, logoutGetQueryKey, createMutationKey, useCreateWithArrayPost, useCreateWithListPost, useFindByUsername, useUsernamePut, useDelByUsername, useLoginGet, useLogoutGet, useCreate
};

export namespace UserSWR {
    export type CreateWithArrayPostMutationKey = ReturnType<typeof createWithArrayPostMutationKey>;
    export type CreateWithListPostMutationKey = ReturnType<typeof createWithListPostMutationKey>;
    export type FindByUsernameQueryKey = ReturnType<typeof findByUsernameQueryKey>;
    export type UsernamePutMutationKey = ReturnType<typeof usernamePutMutationKey>;
    export type DelByUsernameMutationKey = ReturnType<typeof delByUsernameMutationKey>;
    export type LoginGetQueryKey = ReturnType<typeof loginGetQueryKey>;
    export type LogoutGetQueryKey = ReturnType<typeof logoutGetQueryKey>;
    export type CreateMutationKey = ReturnType<typeof createMutationKey>;
}
"
`;
