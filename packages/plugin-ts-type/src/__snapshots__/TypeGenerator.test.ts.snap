// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`typerGenerator > TypeGenerator getFullText 1`] = `
"import type { TestDto2Model, Test32145Model, ApiResponseModel, PetModel } from "./models";
export const petFindByStatusGetQueryParamsStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
export const petFindByStatusGetQueryParamsStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
export type PetFindByStatusGetQueryParamsStatusEnum = (typeof petFindByStatusGetQueryParamsStatusEnum)[keyof typeof petFindByStatusGetQueryParamsStatusEnum];
export const PetFindByStatusGetQueryParamsStatusEnumOption = [{
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Available,
    value: petFindByStatusGetQueryParamsStatusEnum.Available
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Pending,
    value: petFindByStatusGetQueryParamsStatusEnum.Pending
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Sold,
    value: petFindByStatusGetQueryParamsStatusEnum.Sold
}];

/**
 * @tag pet
 * @description Everything about your Pets
 */
export namespace Pet {
    /**
     * @description OK
     */
    export type TestPostMutationResponse = TestDto2Model;
    export type TestPostError = unknown;
    /**
     * @description OK
     */
    export type TestPutMutationResponse = TestDto2Model;
    export type TestPutError = unknown;
    export type DelByTestMutationRequest = Array<number>;
    /**
     * @description OK
     */
    export type DelByTestMutationResponse = Test32145Model;
    export type DelByTestError = unknown;

    /**
     * @description queryParams
     */
    export interface TestIdGetQueryParams {
        /**
         * @description fields
         */
        fields?: Array<string>;
        /**
         * @description 页码 (0..N)，默认为0
         */
        page: number;
        /**
         * @description 每页显示的数目,默认为10
         */
        size: number;
    }

    /**
     * @description pathParams
     */
    export interface TestIdGetPathParams {
        /**
         * @description test-id
         */
        testId?: number;
        /**
         * @description test-id
         */
        testId2?: string;
    }

    /**
     * @description OK
     */
    export type TestIdGetQueryResponse = TestDto2Model;
    export type TestIdGetError = unknown;

    /**
     * @description queryParams
     */
    export interface UploadImageOctetStreamPostQueryParams {
        /**
         * @description Additional Metadata
         */
        additionalMetadata?: string;
    }

    /**
     * @description pathParams
     */
    export interface UploadImageOctetStreamPostPathParams {
        /**
         * @description ID of pet to update
         */
        petId: number;
    }

    export type UploadImageOctetStreamPostMutationRequest = Blob;
    /**
     * @description successful operation
     */
    export type UploadImageOctetStreamPostMutationResponse = ApiResponseModel;
    export type UploadImageOctetStreamPostError = unknown;

    /**
     * @description pathParams
     */
    export interface UploadImagePostPathParams {
        /**
         * @description ID of pet to update
         */
        petId: number;
    }

    export interface UploadImagePostMutationRequest {
        /**
         * @description Additional data to pass to server
         */
        additionalMetadata?: string;
        /**
         * @description file to upload
         */
        file?: string;
    }

    /**
     * @description successful operation
     */
    export type UploadImagePostMutationResponse = ApiResponseModel;
    export type UploadImagePostError = unknown;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
    export type UpdateError = unknown;
    export type UpdateMutationResponse = unknown;

    /**
     * @description queryParams
     */
    export interface FindByStatusGetQueryParams {
        /**
         * @description Status values that need to be considered for filter
         */
        status: Array<PetFindByStatusGetQueryParamsStatusEnum>;
    }

    /**
     * @description successful operation
     */
    export type FindByStatusGetQueryResponse = PetModel[];
    export type FindByStatusGetError = unknown;

    /**
     * @description queryParams
     */
    export interface FindByTagsGetQueryParams {
        /**
         * @description Tags to filter by
         */
        tags: Array<string>;
    }

    /**
     * @description successful operation
     */
    export type FindByTagsGetQueryResponse = PetModel[];
    export type FindByTagsGetError = unknown;

    /**
     * @description pathParams
     */
    export interface FindByPetIdPathParams {
        /**
         * @description ID of pet to return
         */
        petId: number;
    }

    /**
     * @description successful operation
     */
    export type FindByPetIdQueryResponse = PetModel;
    export type FindByPetIdError = unknown;

    /**
     * @description pathParams
     */
    export interface PetIdPostPathParams {
        /**
         * @description ID of pet that needs to be updated
         */
        petId: number;
    }

    export interface PetIdPostMutationRequest {
        /**
         * @description Updated name of the pet
         */
        name?: string;
        /**
         * @description Updated status of the pet
         */
        status?: string;
    }

    export type PetIdPostError = unknown;
    export type PetIdPostMutationResponse = unknown;

    /**
     * @description pathParams
     */
    export interface DelByPetIdPathParams {
        /**
         * @description Pet id to delete
         */
        petId: number;
    }

    export type DelByPetIdError = unknown;
    export type DelByPetIdMutationResponse = unknown;
}

import type { OrderModel } from "./models";

/**
 * @tag store
 * @description Access to Petstore orders
 */
export namespace Store {
    export type CreateMutationRequest = OrderModel;
    /**
     * @description successful operation
     */
    export type CreateMutationResponse = OrderModel;
    export type CreateError = unknown;

    /**
     * @description pathParams
     */
    export interface FindByOrderIdPathParams {
        /**
         * @description ID of pet that needs to be fetched
         */
        orderId: number;
    }

    /**
     * @description successful operation
     */
    export type FindByOrderIdQueryResponse = OrderModel;
    export type FindByOrderIdError = unknown;

    /**
     * @description pathParams
     */
    export interface DelByOrderIdPathParams {
        /**
         * @description ID of the order that needs to be deleted
         */
        orderId: number;
    }

    export type DelByOrderIdError = unknown;
    export type DelByOrderIdMutationResponse = unknown;

    /**
     * @description successful operation
     */
    export interface InventoryGetQueryResponse {
        [key: string]: unknown;
    }

    export type InventoryGetError = unknown;
}

import type { UserModel } from "./models";

/**
 * @tag user
 * @description Operations about user
 */
export namespace User {
    export type CreateWithArrayPostError = unknown;
    export type CreateWithArrayPostMutationResponse = unknown;
    export type CreateWithListPostError = unknown;
    export type CreateWithListPostMutationResponse = unknown;

    /**
     * @description pathParams
     */
    export interface FindByUsernamePathParams {
        /**
         * @description The name that needs to be fetched. Use user1 for testing. 
         */
        username: string;
    }

    /**
     * @description successful operation
     */
    export type FindByUsernameQueryResponse = UserModel;
    export type FindByUsernameError = unknown;

    /**
     * @description pathParams
     */
    export interface UsernamePutPathParams {
        /**
         * @description name that need to be updated
         */
        username: string;
    }

    export type UsernamePutMutationRequest = UserModel;
    export type UsernamePutError = unknown;
    export type UsernamePutMutationResponse = unknown;

    /**
     * @description pathParams
     */
    export interface DelByUsernamePathParams {
        /**
         * @description The name that needs to be deleted
         */
        username: string;
    }

    export type DelByUsernameError = unknown;
    export type DelByUsernameMutationResponse = unknown;

    /**
     * @description queryParams
     */
    export interface LoginGetQueryParams {
        /**
         * @description The user name for login
         */
        username: string;
        /**
         * @description The password for login in clear text
         */
        password: string;
    }

    /**
     * @description successful operation
     */
    export type LoginGetQueryResponse = string;
    export type LoginGetError = unknown;
    export type LogoutGetError = unknown;
    export type LogoutGetQueryResponse = unknown;
    export type CreateMutationRequest = UserModel;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
}

import type { TestdataModel } from "./testdata.model";

export interface Test32145Model {
    /**
     * @description description
     */
    code?: number;
    meta?: TestdataModel;
}

/**
 * @description description
 */
export const test3214ColumnTypeEnumLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/**
 * @description description
 */
export const test3214ColumnTypeEnum = {
    Char: 'CHAR',
    Char2: 'CHAR2',
    Char3: 'CHAR3'
} as const;
export type Test3214ColumnTypeEnum = (typeof test3214ColumnTypeEnum)[keyof typeof test3214ColumnTypeEnum];
/** description */
export const Test3214ColumnTypeEnumOption = [{
    label: test3214ColumnTypeEnumLabel.Char,
    value: test3214ColumnTypeEnum.Char
}, {
    label: test3214ColumnTypeEnumLabel.Char2,
    value: test3214ColumnTypeEnum.Char2
}, {
    label: test3214ColumnTypeEnumLabel.Char3,
    value: test3214ColumnTypeEnum.Char3
}];

export interface Test3214Model {
    /**
     * @description 默认值
     */
    columnDefault?: string;
    /**
     * @description description
     */
    columnLength?: number;
    /**
     * @description description
     */
    columnName?: string;
    /**
     * @description description
     */
    columnRemark?: string;
    /**
     * @description description
     */
    columnScale?: number;
    /**
     * @description description
     */
    columnType?: Test3214ColumnTypeEnum;
    /**
     * @description description
     */
    delFlag?: boolean;
    formId?: number;
    /**
     * @description id
     */
    id?: number;
    /**
     * @description description
     */
    notNull?: boolean;
}

export interface TestdataModel {
    /**
     * @description description
     */
    number?: number;
    /**
     * @description description
     */
    numberOfElements?: number;
    /**
     * @description description
     */
    totalElements?: number;
    /**
     * @description description
     */
    totalPages?: number;
}

export interface SortModel {
    empty?: boolean;
    sorted?: boolean;
    unsorted?: boolean;
}

import type { Test3214Model } from "./test3214.model";

export interface TestDto3Model {
    test3214?: Test3214Model[];
}

import type { TestDto3Model } from "./testDto3.model";
import type { TestdataModel } from "./testdata.model";

export interface TestDto2Model {
    content?: TestDto3Model;
    meta?: TestdataModel;
}

export interface Test321Model {
    id?: number;
}

import type { Test321Model } from "./test321.model";

export interface TestDtoModel {
    /**
     * @description test321
     */
    test321?: Test321Model[];
}

import type { ApiResponseModel } from "./apiResponse.model";

export interface RefListModel {
    content?: ApiResponseModel;
    /**
     * @description string
     */
    string?: string;
    name?: string;
    /**
     * @description title
     */
    title?: string;
    /**
     * @description type
     */
    type?: string;
}

export interface ApiResponseModel {
    code?: number;
    type?: string;
    message?: string;
}

export interface CategoryModel {
    id?: number;
    name?: string;
}

import type { CategoryModel } from "./category.model";
import type { TagModel } from "./tag.model";
/**
 * @description pet status in the store
 */
export const petStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/**
 * @description pet status in the store
 */
export const petStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
export type PetStatusEnum = (typeof petStatusEnum)[keyof typeof petStatusEnum];
/** pet status in the store */
export const PetStatusEnumOption = [{
    label: petStatusEnumLabel.Available,
    value: petStatusEnum.Available
}, {
    label: petStatusEnumLabel.Pending,
    value: petStatusEnum.Pending
}, {
    label: petStatusEnumLabel.Sold,
    value: petStatusEnum.Sold
}];

export interface PetModel {
    id?: number;
    category?: CategoryModel;
    name: string;
    photoUrls: Array<string>;
    tags?: TagModel[];
    /**
     * @description pet status in the store
     */
    status?: PetStatusEnum;
}

export interface TagModel {
    id?: number;
    name?: string;
}

/**
 * @description Order Status
 */
export const orderStatusEnumLabel = {
    Placed: '',
    Approved: '',
    Delivered: ''
};
/**
 * @description Order Status
 */
export const orderStatusEnum = {
    Placed: 'placed',
    Approved: 'approved',
    Delivered: 'delivered'
} as const;
export type OrderStatusEnum = (typeof orderStatusEnum)[keyof typeof orderStatusEnum];
/** Order Status */
export const OrderStatusEnumOption = [{
    label: orderStatusEnumLabel.Placed,
    value: orderStatusEnum.Placed
}, {
    label: orderStatusEnumLabel.Approved,
    value: orderStatusEnum.Approved
}, {
    label: orderStatusEnumLabel.Delivered,
    value: orderStatusEnum.Delivered
}];

export interface OrderModel {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /**
     * @description Order Status
     */
    status?: OrderStatusEnum;
    complete?: boolean;
}

export interface UserModel {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /**
     * @description User Status
     */
    userStatus?: number;
}

export * from "./test32145.model";
export * from "./test3214.model";
export * from "./testdata.model";
export * from "./sort.model";
export * from "./testDto3.model";
export * from "./testDto2.model";
export * from "./test321.model";
export * from "./testDto.model";
export * from "./refList.model";
export * from "./apiResponse.model";
export * from "./category.model";
export * from "./pet.model";
export * from "./tag.model";
export * from "./order.model";
export * from "./user.model";
"
`;

exports[`typerGenerator > compare TypeGenerator getFullText 1`] = `
"import type { TestDto2Model, Test32145Model, ApiResponseModel, PetModel } from "./models";
export const petFindByStatusGetQueryParamsStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
export const petFindByStatusGetQueryParamsStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
export type PetFindByStatusGetQueryParamsStatusEnum = (typeof petFindByStatusGetQueryParamsStatusEnum)[keyof typeof petFindByStatusGetQueryParamsStatusEnum];
export const PetFindByStatusGetQueryParamsStatusEnumOption = [{
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Available,
    value: petFindByStatusGetQueryParamsStatusEnum.Available
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Pending,
    value: petFindByStatusGetQueryParamsStatusEnum.Pending
}, {
    label: petFindByStatusGetQueryParamsStatusEnumLabel.Sold,
    value: petFindByStatusGetQueryParamsStatusEnum.Sold
}];

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID type-pet
 */
export namespace NewPet {
    /**
     * @description OK
     */
    export type TestPostMutationResponse = TestDto2Model;
    export type TestPostError = unknown;
    /**
     * @description OK
     */
    export type TestPutMutationResponse = TestDto2Model;
    export type TestPutError = unknown;
    export type DelByTestMutationRequest = Array<number>;
    /**
     * @description OK
     */
    export type DelByTestMutationResponse = Test32145Model;
    export type DelByTestError = unknown;

    /**
     * @description queryParams
     */
    export interface TestIdGetQueryParams {
        /**
         * @description fields
         */
        fields?: Array<string>;
        /**
         * @description 页码 (0..N)，默认为0
         */
        page: number;
        /**
         * @description 每页显示的数目,默认为10
         */
        size: number;
    }

    /**
     * @description pathParams
     */
    export interface TestIdGetPathParams {
        /**
         * @description test-id
         */
        testId?: number;
        /**
         * @description test-id
         */
        testId2?: string;
    }

    /**
     * @description OK
     */
    export type TestIdGetQueryResponse = TestDto2Model;
    export type TestIdGetError = unknown;

    /**
     * @description queryParams
     */
    export interface UploadImageOctetStreamPostQueryParams {
        /**
         * @description Additional Metadata
         */
        additionalMetadata?: string;
    }

    /**
     * @description pathParams
     */
    export interface UploadImageOctetStreamPostPathParams {
        /**
         * @description ID of pet to update
         */
        petId: number;
    }

    export type UploadImageOctetStreamPostMutationRequest = Blob;
    /**
     * @description successful operation
     */
    export type UploadImageOctetStreamPostMutationResponse = ApiResponseModel;
    export type UploadImageOctetStreamPostError = unknown;

    /**
     * @description pathParams
     */
    export interface UploadImagePostPathParams {
        /**
         * @description ID of pet to update
         */
        petId: number;
    }

    export interface UploadImagePostMutationRequest {
        /**
         * @description Additional data to pass to server
         */
        additionalMetadata?: string;
        /**
         * @description file to upload
         */
        file?: string;
    }

    /**
     * @description successful operation
     */
    export type UploadImagePostMutationResponse = ApiResponseModel;
    export type UploadImagePostError = unknown;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
    export type UpdateError = unknown;
    export type UpdateMutationResponse = unknown;

    /**
     * @description queryParams
     */
    export interface FindByStatusGetQueryParams {
        /**
         * @description Status values that need to be considered for filter
         */
        status: Array<PetFindByStatusGetQueryParamsStatusEnum>;
    }

    /**
     * @description successful operation
     */
    export type FindByStatusGetQueryResponse = PetModel[];
    export type FindByStatusGetError = unknown;

    /**
     * @description queryParams
     */
    export interface FindByTagsGetQueryParams {
        /**
         * @description Tags to filter by
         */
        tags: Array<string>;
    }

    /**
     * @description successful operation
     */
    export type FindByTagsGetQueryResponse = PetModel[];
    export type FindByTagsGetError = unknown;

    /**
     * @description pathParams
     */
    export interface FindByPetIdPathParams {
        /**
         * @description ID of pet to return
         */
        petId: number;
    }

    /**
     * @description successful operation
     */
    export type FindByPetIdQueryResponse = PetModel;
    export type FindByPetIdError = unknown;

    /**
     * @description pathParams
     */
    export interface PetIdPostPathParams {
        /**
         * @description ID of pet that needs to be updated
         */
        petId: number;
    }

    export interface PetIdPostMutationRequest {
        /**
         * @description Updated name of the pet
         */
        name?: string;
        /**
         * @description Updated status of the pet
         */
        status?: string;
    }

    export type PetIdPostError = unknown;
    export type PetIdPostMutationResponse = unknown;

    /**
     * @description pathParams
     */
    export interface DelByPetIdPathParams {
        /**
         * @description Pet id to delete
         */
        petId: number;
    }

    export type DelByPetIdError = unknown;
    export type DelByPetIdMutationResponse = unknown;
}

import type { OrderModel } from "./models";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID type-store
 */
export namespace Store {
    export type CreateMutationRequest = OrderModel;
    /**
     * @description successful operation
     */
    export type CreateMutationResponse = OrderModel;
    export type CreateError = unknown;

    /**
     * @description pathParams
     */
    export interface FindByOrderIdPathParams {
        /**
         * @description ID of pet that needs to be fetched
         */
        orderId: number;
    }

    /**
     * @description successful operation
     */
    export type FindByOrderIdQueryResponse = OrderModel;
    export type FindByOrderIdError = unknown;

    /**
     * @description pathParams
     */
    export interface DelByOrderIdPathParams {
        /**
         * @description ID of the order that needs to be deleted
         */
        orderId: number;
    }

    export type DelByOrderIdError = unknown;
    export type DelByOrderIdMutationResponse = unknown;

    /**
     * @description successful operation
     */
    export interface InventoryGetQueryResponse {
        [key: string]: unknown;
    }

    export type InventoryGetError = unknown;
}

import type { UserModel } from "./models";

/**
 * @tag user
 * @description Operations about user
 * @UUID type-user
 */
export namespace User {
    export type CreateWithArrayPostError = unknown;
    export type CreateWithArrayPostMutationResponse = unknown;
    export type CreateWithListPostError = unknown;
    export type CreateWithListPostMutationResponse = unknown;

    /**
     * @description pathParams
     */
    export interface FindByUsernamePathParams {
        /**
         * @description The name that needs to be fetched. Use user1 for testing. 
         */
        username: string;
    }

    /**
     * @description successful operation
     */
    export type FindByUsernameQueryResponse = UserModel;
    export type FindByUsernameError = unknown;

    /**
     * @description pathParams
     */
    export interface UsernamePutPathParams {
        /**
         * @description name that need to be updated
         */
        username: string;
    }

    export type UsernamePutMutationRequest = UserModel;
    export type UsernamePutError = unknown;
    export type UsernamePutMutationResponse = unknown;

    /**
     * @description pathParams
     */
    export interface DelByUsernamePathParams {
        /**
         * @description The name that needs to be deleted
         */
        username: string;
    }

    export type DelByUsernameError = unknown;
    export type DelByUsernameMutationResponse = unknown;

    /**
     * @description queryParams
     */
    export interface LoginGetQueryParams {
        /**
         * @description The user name for login
         */
        username: string;
        /**
         * @description The password for login in clear text
         */
        password: string;
    }

    /**
     * @description successful operation
     */
    export type LoginGetQueryResponse = string;
    export type LoginGetError = unknown;
    export type LogoutGetError = unknown;
    export type LogoutGetQueryResponse = unknown;
    export type CreateMutationRequest = UserModel;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
}

import type { TestdataModel } from "./testdata.model";

/**
 * @UUID type-Test32145Model
 */
export interface Test32145Model {
    /**
     * @description description
     */
    code?: number;
    /**
     * @UUID type-Testdata
     */
    meta?: Testdata;
}

/**
 * @description description
 */
export const test3214ColumnTypeEnumLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/**
 * @description description
 */
export const test3214ColumnTypeEnum = {
    Char: 'CHAR',
    Char2: 'CHAR2',
    Char3: 'CHAR3'
} as const;
export type Test3214ColumnTypeEnum = (typeof test3214ColumnTypeEnum)[keyof typeof test3214ColumnTypeEnum];
/** description */
export const Test3214ColumnTypeEnumOption = [{
    label: test3214ColumnTypeEnumLabel.Char,
    value: test3214ColumnTypeEnum.Char
}, {
    label: test3214ColumnTypeEnumLabel.Char2,
    value: test3214ColumnTypeEnum.Char2
}, {
    label: test3214ColumnTypeEnumLabel.Char3,
    value: test3214ColumnTypeEnum.Char3
}];

/**
 * @UUID type-Test3214Model
 */
export interface Test3214Model {
    /**
     * @description 默认值
     */
    columnDefault?: string;
    /**
     * @description description
     */
    columnLength?: number;
    /**
     * @description description
     */
    columnName?: string;
    /**
     * @description description
     */
    columnRemark?: string;
    /**
     * @description description
     */
    columnScale?: number;
    /**
     * @description description
     */
    columnType?: Test3214ColumnTypeEnum;
    /**
     * @description description
     */
    delFlag?: boolean;
    formId?: number;
    /**
     * @description id
     */
    id?: number;
    /**
     * @description description
     */
    notNull?: boolean;
}

/**
 * @UUID type-TestdataModel
 */
export interface TestdataModel {
    /**
     * @description description
     */
    number?: number;
    /**
     * @description description
     */
    numberOfElements?: number;
    /**
     * @description description
     */
    totalElements?: number;
    /**
     * @description description
     */
    totalPages?: number;
}

/**
 * @UUID type-SortModel
 */
export interface SortModel {
    empty?: boolean;
    sorted?: boolean;
    unsorted?: boolean;
}

import type { Test3214Model } from "./test3214.model";

/**
 * @UUID type-TestDto3Model
 */
export interface TestDto3Model {
    test3214?: Test3214Model[];
}

import type { TestDto3Model } from "./testDto3.model";
import type { TestdataModel } from "./testdata.model";

/**
 * @UUID type-TestDto2Model
 */
export interface TestDto2Model {
    /**
     * @UUID type-TestDto3
     */
    content?: TestDto3;
    /**
     * @UUID type-Testdata
     */
    meta?: Testdata;
}

/**
 * @UUID type-Test321Model
 */
export interface Test321Model {
    id?: number;
}

import type { Test321Model } from "./test321.model";

/**
 * @UUID type-TestDtoModel
 */
export interface TestDtoModel {
    /**
     * @description test321
     */
    test321?: Test321Model[];
}

import type { ApiResponseModel } from "./apiResponse.model";

/**
 * @UUID type-RefListModel
 */
export interface RefListModel {
    /**
     * @UUID type-ApiResponse
     */
    content?: ApiResponse;
    /**
     * @description string
     */
    string?: string;
    name?: string;
    /**
     * @description title
     */
    title?: string;
    /**
     * @description type
     */
    type?: string;
}

/**
 * @UUID type-ApiResponseModel
 */
export interface ApiResponseModel {
    code?: number;
    type?: string;
    message?: string;
}

/**
 * @UUID type-CategoryModel
 */
export interface CategoryModel {
    id?: number;
    name?: string;
}

import type { NewCategoryModel } from "./category.model";
import type { TagModel } from "./tag.model";
/**
 * @description pet status in the store
 */
export const petStatusEnumLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/**
 * @description pet status in the store
 */
export const petStatusEnum = {
    Available: 'available',
    Pending: 'pending',
    Sold: 'sold'
} as const;
export type PetStatusEnum = (typeof petStatusEnum)[keyof typeof petStatusEnum];
/** pet status in the store */
export const PetStatusEnumOption = [{
    label: petStatusEnumLabel.Available,
    value: petStatusEnum.Available
}, {
    label: petStatusEnumLabel.Pending,
    value: petStatusEnum.Pending
}, {
    label: petStatusEnumLabel.Sold,
    value: petStatusEnum.Sold
}];

/**
 * @UUID type-PetModel
 */
export interface PetModel {
    id?: number;
    /**
     * @UUID type-Category
     */
    category?: NewCategory;
    name: string;
    photoUrls: Array<string>;
    tags?: TagModel[];
    /**
     * @description pet status in the store
     */
    status?: PetStatusEnum;
}

/**
 * @UUID type-TagModel
 */
export interface TagModel {
    id?: number;
    name?: string;
}

/**
 * @description Order Status
 */
export const orderStatusEnumLabel = {
    Placed: '',
    Approved: '',
    Delivered: ''
};
/**
 * @description Order Status
 */
export const orderStatusEnum = {
    Placed: 'placed',
    Approved: 'approved',
    Delivered: 'delivered'
} as const;
export type OrderStatusEnum = (typeof orderStatusEnum)[keyof typeof orderStatusEnum];
/** Order Status */
export const OrderStatusEnumOption = [{
    label: orderStatusEnumLabel.Placed,
    value: orderStatusEnum.Placed
}, {
    label: orderStatusEnumLabel.Approved,
    value: orderStatusEnum.Approved
}, {
    label: orderStatusEnumLabel.Delivered,
    value: orderStatusEnum.Delivered
}];

/**
 * @UUID type-OrderModel
 */
export interface OrderModel {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /**
     * @description Order Status
     */
    status?: OrderStatusEnum;
    complete?: boolean;
}

/**
 * @UUID type-UserModel
 */
export interface UserModel {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /**
     * @description User Status
     */
    userStatus?: number;
}

export * from "./test32145.model";
export * from "./test3214.model";
export * from "./testdata.model";
export * from "./sort.model";
export * from "./testDto3.model";
export * from "./testDto2.model";
export * from "./test321.model";
export * from "./testDto.model";
export * from "./refList.model";
export * from "./apiResponse.model";
export * from "./category.model";
export * from "./pet.model";
export * from "./tag.model";
export * from "./order.model";
export * from "./user.model";
"
`;
