// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`typerGenerator > TypeGenerator getFullText 1`] = `
"import type { TestDto2, Test32145, ApiResponse, Pet } from "./typeModels";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID type-pet
 */
export namespace Pet {
    /** OK */
    export type TestPostMutationResponse = TestDto2;
    export type TestPostError = unknown;
    /** OK */
    export type TestPutMutationResponse = TestDto2;
    export type TestPutError = unknown;
    export type DelByTestMutationRequest = Array<number>;
    /** OK */
    export type DelByTestMutationResponse = Test32145;
    export type DelByTestError = unknown;

    /** queryParams */
    export interface TestIdGetQueryParams {
        fields?: Array<string>;
        page: number;
        size: number;
    }

    /** pathParams */
    export interface TestIdGetPathParams {
        testId?: number;
        testId2?: string;
    }

    /** OK */
    export type TestIdGetQueryResponse = TestDto2;
    export type TestIdGetError = unknown;

    /** pathParams */
    export interface UploadImagePostPathParams {
        petId: number;
    }

    export interface UploadImagePostMutationRequest {
        /** @description Additional data to pass to server */
        additionalMetadata?: string;
        /** @description file to upload */
        file?: string;
    }

    /** successful operation */
    export type UploadImagePostMutationResponse = ApiResponse;
    export type UploadImagePostError = unknown;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
    export type UpdateError = unknown;
    export type UpdateMutationResponse = unknown;

    /** queryParams */
    export interface FindByStatusGetQueryParams {
        status: Array<string>;
    }

    /** successful operation */
    export type FindByStatusGetQueryResponse = Pet[];
    export type FindByStatusGetError = unknown;

    /** queryParams */
    export interface FindByTagsGetQueryParams {
        tags: Array<string>;
    }

    /** successful operation */
    export type FindByTagsGetQueryResponse = Pet[];
    export type FindByTagsGetError = unknown;

    /** pathParams */
    export interface FindByPetIdPathParams {
        petId: number;
    }

    /** successful operation */
    export type FindByPetIdQueryResponse = Pet;
    export type FindByPetIdError = unknown;

    /** pathParams */
    export interface PetIdPostPathParams {
        petId: number;
    }

    export interface PetIdPostMutationRequest {
        /** @description Updated name of the pet */
        name?: string;
        /** @description Updated status of the pet */
        status?: string;
    }

    export type PetIdPostError = unknown;
    export type PetIdPostMutationResponse = unknown;

    /** pathParams */
    export interface DelByPetIdPathParams {
        petId: number;
    }

    export type DelByPetIdError = unknown;
    export type DelByPetIdMutationResponse = unknown;
}

import type { Order } from "./typeModels";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID type-store
 */
export namespace Store {
    export type CreateMutationRequest = Order;
    /** successful operation */
    export type CreateMutationResponse = Order;
    export type CreateError = unknown;

    /** pathParams */
    export interface FindByOrderIdPathParams {
        orderId: number;
    }

    /** successful operation */
    export type FindByOrderIdQueryResponse = Order;
    export type FindByOrderIdError = unknown;

    /** pathParams */
    export interface DelByOrderIdPathParams {
        orderId: number;
    }

    export type DelByOrderIdError = unknown;
    export type DelByOrderIdMutationResponse = unknown;

    /** successful operation */
    export interface InventoryGetQueryResponse {
        [key: string]: unknown;
    }

    export type InventoryGetError = unknown;
}

import type { User } from "./typeModels";

/**
 * @tag user
 * @description Operations about user
 * @UUID type-user
 */
export namespace User {
    export type CreateWithArrayPostError = unknown;
    export type CreateWithArrayPostMutationResponse = unknown;
    export type CreateWithListPostError = unknown;
    export type CreateWithListPostMutationResponse = unknown;

    /** pathParams */
    export interface FindByUsernamePathParams {
        username: string;
    }

    /** successful operation */
    export type FindByUsernameQueryResponse = User;
    export type FindByUsernameError = unknown;

    /** pathParams */
    export interface UsernamePutPathParams {
        username: string;
    }

    export type UsernamePutMutationRequest = User;
    export type UsernamePutError = unknown;
    export type UsernamePutMutationResponse = unknown;

    /** pathParams */
    export interface DelByUsernamePathParams {
        username: string;
    }

    export type DelByUsernameError = unknown;
    export type DelByUsernameMutationResponse = unknown;

    /** queryParams */
    export interface LoginGetQueryParams {
        username: string;
        password: string;
    }

    /** successful operation */
    export type LoginGetQueryResponse = string;
    export type LoginGetError = unknown;
    export type LogoutGetError = unknown;
    export type LogoutGetQueryResponse = unknown;
    export type CreateMutationRequest = User;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
}

import type { Testdata } from "./Testdata";

/** @UUID type-Test32145 */
export interface Test32145 {
    /** @description description */
    code?: number;
    /** @UUID type-Testdata */
    meta?: Testdata;
}

/** @UUID type-Test3214 */
export interface Test3214 {
    /** @description 默认值 */
    columnDefault?: string;
    /** @description description */
    columnLength?: number;
    /** @description description */
    columnName?: string;
    /** @description description */
    columnRemark?: string;
    /** @description description */
    columnScale?: number;
    /** @description description */
    columnType?: string;
    /** @description description */
    delFlag?: boolean;
    formId?: number;
    /** @description id */
    id?: number;
    /** @description description */
    notNull?: boolean;
}

/** @UUID type-Testdata */
export interface Testdata {
    /** @description description */
    number?: number;
    /** @description description */
    numberOfElements?: number;
    /** @description description */
    totalElements?: number;
    /** @description description */
    totalPages?: number;
}

/** @UUID type-Sort */
export interface Sort {
    empty?: boolean;
    sorted?: boolean;
    unsorted?: boolean;
}

import type { Test3214 } from "./Test3214";

/** @UUID type-TestDto3 */
export interface TestDto3 {
    test3214?: Test3214[];
}

import type { TestDto3 } from "./TestDto3";
import type { Testdata } from "./Testdata";

/** @UUID type-TestDto2 */
export interface TestDto2 {
    /** @UUID type-TestDto3 */
    content?: TestDto3;
    /** @UUID type-Testdata */
    meta?: Testdata;
}

/** @UUID type-Test321 */
export interface Test321 {
    id?: number;
}

import type { Test321 } from "./Test321";

/** @UUID type-TestDto */
export interface TestDto {
    /** @description test321 */
    test321?: Test321[];
}

import type { ApiResponse } from "./ApiResponse";

/** @UUID type-RefList */
export interface RefList {
    /** @UUID type-ApiResponse */
    content?: ApiResponse;
    /** @description string */
    string?: string;
    name?: string;
    /** @description title */
    title?: string;
    /** @description type */
    type?: string;
}

/** @UUID type-ApiResponse */
export interface ApiResponse {
    code?: number;
    type?: string;
    message?: string;
}

/** @UUID type-Category */
export interface Category {
    id?: number;
    name?: string;
}

import type { Category } from "./Category";
import type { Tag } from "./Tag";

/** @UUID type-Pet */
export interface Pet {
    id?: number;
    /** @UUID type-Category */
    category?: Category;
    name: string;
    photoUrls: Array<string>;
    tags?: Tag[];
    /** @description pet status in the store */
    status?: string;
}

/** @UUID type-Tag */
export interface Tag {
    id?: number;
    name?: string;
}

/** @UUID type-Order */
export interface Order {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /** @description Order Status */
    status?: string;
    complete?: boolean;
}

/** @UUID type-User */
export interface User {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /** @description User Status */
    userStatus?: number;
}

/** description */
export const ColumnTypeLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/** pet status in the store */
export const StatusLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/** Order Status */
export const Status1Label = {
    Placed: '',
    Approved: '',
    Delivered: ''
};

/** description */
const enum ColumnType {
    Char = "CHAR",
    Char2 = "CHAR2",
    Char3 = "CHAR3"
}

/** pet status in the store */
const enum Status {
    Available = "available",
    Pending = "pending",
    Sold = "sold"
}

/** Order Status */
const enum Status1 {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered"
}

/** description */
export const columnTypeOption = [{
    label: ColumnTypeLabel.Char,
    value: ColumnType.Char
}, {
    label: ColumnTypeLabel.Char2,
    value: ColumnType.Char2
}, {
    label: ColumnTypeLabel.Char3,
    value: ColumnType.Char3
}];
/** pet status in the store */
export const statusOption = [{
    label: StatusLabel.Available,
    value: Status.Available
}, {
    label: StatusLabel.Pending,
    value: Status.Pending
}, {
    label: StatusLabel.Sold,
    value: Status.Sold
}];
/** Order Status */
export const status1Option = [{
    label: Status1Label.Placed,
    value: Status1.Placed
}, {
    label: Status1Label.Approved,
    value: Status1.Approved
}, {
    label: Status1Label.Delivered,
    value: Status1.Delivered
}];

export * from "./enum";
export * from "./Test32145";
export * from "./Test3214";
export * from "./Testdata";
export * from "./Sort";
export * from "./TestDto3";
export * from "./TestDto2";
export * from "./Test321";
export * from "./TestDto";
export * from "./RefList";
export * from "./ApiResponse";
export * from "./Category";
export * from "./Pet";
export * from "./Tag";
export * from "./Order";
export * from "./User";
"
`;

exports[`typerGenerator > compare TypeGenerator getFullText 1`] = `
"import type { TestDto2, Test32145, ApiResponse, Pet } from "./typeModels";

/**
 * @tag pet
 * @description Everything about your Pets
 * @UUID type-pet
 */
export namespace NewPet {
    /** OK */
    export type TestPostMutationResponse = TestDto2;
    export type TestPostError = unknown;
    /** OK */
    export type TestPutMutationResponse = TestDto2;
    export type TestPutError = unknown;
    export type DelByTestMutationRequest = Array<number>;
    /** OK */
    export type DelByTestMutationResponse = Test32145;
    export type DelByTestError = unknown;

    /** queryParams */
    export interface TestIdGetQueryParams {
        fields?: Array<string>;
        page: number;
        size: number;
    }

    /** pathParams */
    export interface TestIdGetPathParams {
        testId?: number;
        testId2?: string;
    }

    /** OK */
    export type TestIdGetQueryResponse = TestDto2;
    export type TestIdGetError = unknown;

    /** pathParams */
    export interface UploadImagePostPathParams {
        petId: number;
    }

    export interface UploadImagePostMutationRequest {
        /** @description Additional data to pass to server */
        additionalMetadata?: string;
        /** @description file to upload */
        file?: string;
    }

    /** successful operation */
    export type UploadImagePostMutationResponse = ApiResponse;
    export type UploadImagePostError = unknown;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
    export type UpdateError = unknown;
    export type UpdateMutationResponse = unknown;

    /** queryParams */
    export interface FindByStatusGetQueryParams {
        status: Array<string>;
    }

    /** successful operation */
    export type FindByStatusGetQueryResponse = Pet[];
    export type FindByStatusGetError = unknown;

    /** queryParams */
    export interface FindByTagsGetQueryParams {
        tags: Array<string>;
    }

    /** successful operation */
    export type FindByTagsGetQueryResponse = Pet[];
    export type FindByTagsGetError = unknown;

    /** pathParams */
    export interface FindByPetIdPathParams {
        petId: number;
    }

    /** successful operation */
    export type FindByPetIdQueryResponse = Pet;
    export type FindByPetIdError = unknown;

    /** pathParams */
    export interface PetIdPostPathParams {
        petId: number;
    }

    export interface PetIdPostMutationRequest {
        /** @description Updated name of the pet */
        name?: string;
        /** @description Updated status of the pet */
        status?: string;
    }

    export type PetIdPostError = unknown;
    export type PetIdPostMutationResponse = unknown;

    /** pathParams */
    export interface DelByPetIdPathParams {
        petId: number;
    }

    export type DelByPetIdError = unknown;
    export type DelByPetIdMutationResponse = unknown;
}

import type { Order } from "./typeModels";

/**
 * @tag store
 * @description Access to Petstore orders
 * @UUID type-store
 */
export namespace Store {
    export type CreateMutationRequest = Order;
    /** successful operation */
    export type CreateMutationResponse = Order;
    export type CreateError = unknown;

    /** pathParams */
    export interface FindByOrderIdPathParams {
        orderId: number;
    }

    /** successful operation */
    export type FindByOrderIdQueryResponse = Order;
    export type FindByOrderIdError = unknown;

    /** pathParams */
    export interface DelByOrderIdPathParams {
        orderId: number;
    }

    export type DelByOrderIdError = unknown;
    export type DelByOrderIdMutationResponse = unknown;

    /** successful operation */
    export interface InventoryGetQueryResponse {
        [key: string]: unknown;
    }

    export type InventoryGetError = unknown;
}

import type { User } from "./typeModels";

/**
 * @tag user
 * @description Operations about user
 * @UUID type-user
 */
export namespace User {
    export type CreateWithArrayPostError = unknown;
    export type CreateWithArrayPostMutationResponse = unknown;
    export type CreateWithListPostError = unknown;
    export type CreateWithListPostMutationResponse = unknown;

    /** pathParams */
    export interface FindByUsernamePathParams {
        username: string;
    }

    /** successful operation */
    export type FindByUsernameQueryResponse = User;
    export type FindByUsernameError = unknown;

    /** pathParams */
    export interface UsernamePutPathParams {
        username: string;
    }

    export type UsernamePutMutationRequest = User;
    export type UsernamePutError = unknown;
    export type UsernamePutMutationResponse = unknown;

    /** pathParams */
    export interface DelByUsernamePathParams {
        username: string;
    }

    export type DelByUsernameError = unknown;
    export type DelByUsernameMutationResponse = unknown;

    /** queryParams */
    export interface LoginGetQueryParams {
        username: string;
        password: string;
    }

    /** successful operation */
    export type LoginGetQueryResponse = string;
    export type LoginGetError = unknown;
    export type LogoutGetError = unknown;
    export type LogoutGetQueryResponse = unknown;
    export type CreateMutationRequest = User;
    export type CreateError = unknown;
    export type CreateMutationResponse = unknown;
}

import type { Testdata } from "./Testdata";

/** @UUID type-Test32145 */
export interface Test32145 {
    /** @description description */
    code?: number;
    /** @UUID type-Testdata */
    meta?: Testdata;
}

/** @UUID type-Test3214 */
export interface Test3214 {
    /** @description 默认值 */
    columnDefault?: string;
    /** @description description */
    columnLength?: number;
    /** @description description */
    columnName?: string;
    /** @description description */
    columnRemark?: string;
    /** @description description */
    columnScale?: number;
    /** @description description */
    columnType?: string;
    /** @description description */
    delFlag?: boolean;
    formId?: number;
    /** @description id */
    id?: number;
    /** @description description */
    notNull?: boolean;
}

/** @UUID type-Testdata */
export interface Testdata {
    /** @description description */
    number?: number;
    /** @description description */
    numberOfElements?: number;
    /** @description description */
    totalElements?: number;
    /** @description description */
    totalPages?: number;
}

/** @UUID type-Sort */
export interface Sort {
    empty?: boolean;
    sorted?: boolean;
    unsorted?: boolean;
}

import type { Test3214 } from "./Test3214";

/** @UUID type-TestDto3 */
export interface TestDto3 {
    test3214?: Test3214[];
}

import type { TestDto3 } from "./TestDto3";
import type { Testdata } from "./Testdata";

/** @UUID type-TestDto2 */
export interface TestDto2 {
    /** @UUID type-TestDto3 */
    content?: TestDto3;
    /** @UUID type-Testdata */
    meta?: Testdata;
}

/** @UUID type-Test321 */
export interface Test321 {
    id?: number;
}

import type { Test321 } from "./Test321";

/** @UUID type-TestDto */
export interface NewTestDto {
    /** @description test321 */
    test321?: Test321[];
}

import type { ApiResponse } from "./ApiResponse";

/** @UUID type-RefList */
export interface RefList {
    /** @UUID type-ApiResponse */
    content?: ApiResponse;
    /** @description string */
    string?: string;
    name?: string;
    /** @description title */
    title?: string;
    /** @description type */
    type?: string;
}

/** @UUID type-ApiResponse */
export interface ApiResponse {
    code?: number;
    type?: string;
    message?: string;
}

/** @UUID type-Category */
export interface NewCategory {
    id?: number;
    name?: string;
}

import type { NewCategory } from "./NewCategory";
import type { Tag } from "./Tag";

/** @UUID type-Pet */
export interface Pet {
    id?: number;
    /** @UUID type-Category */
    category?: NewCategory;
    name: string;
    photoUrls: Array<string>;
    tags?: Tag[];
    /** @description pet status in the store */
    status?: string;
}

/** @UUID type-Tag */
export interface Tag {
    id?: number;
    name?: string;
}

/** @UUID type-Order */
export interface Order {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /** @description Order Status */
    status?: string;
    complete?: boolean;
}

/** @UUID type-User */
export interface User {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /** @description User Status */
    userStatus?: number;
}

/** description */
export const ColumnTypeLabel = {
    Char: '',
    Char2: '',
    Char3: ''
};
/** pet status in the store */
export const StatusLabel = {
    Available: '',
    Pending: '',
    Sold: ''
};
/** Order Status */
export const Status1Label = {
    Placed: '',
    Approved: '',
    Delivered: ''
};

/** description */
const enum ColumnType {
    Char = "CHAR",
    Char2 = "CHAR2",
    Char3 = "CHAR3"
}

/** pet status in the store */
const enum Status {
    Available = "available",
    Pending = "pending",
    Sold = "sold"
}

/** Order Status */
const enum Status1 {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered"
}

/** description */
export const columnTypeOption = [{
    label: ColumnTypeLabel.Char,
    value: ColumnType.Char
}, {
    label: ColumnTypeLabel.Char2,
    value: ColumnType.Char2
}, {
    label: ColumnTypeLabel.Char3,
    value: ColumnType.Char3
}];
/** pet status in the store */
export const statusOption = [{
    label: StatusLabel.Available,
    value: Status.Available
}, {
    label: StatusLabel.Pending,
    value: Status.Pending
}, {
    label: StatusLabel.Sold,
    value: Status.Sold
}];
/** Order Status */
export const status1Option = [{
    label: Status1Label.Placed,
    value: Status1.Placed
}, {
    label: Status1Label.Approved,
    value: Status1.Approved
}, {
    label: Status1Label.Delivered,
    value: Status1.Delivered
}];

export * from "./enum";
export * from "./Test32145";
export * from "./Test3214";
export * from "./Testdata";
export * from "./Sort";
export * from "./TestDto3";
export * from "./TestDto2";
export * from "./Test321";
export * from "./NewTestDto";
export * from "./RefList";
export * from "./ApiResponse";
export * from "./NewCategory";
export * from "./Pet";
export * from "./Tag";
export * from "./Order";
export * from "./User";
"
`;
