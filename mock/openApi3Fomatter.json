{
  "pet": [
    {
      "path": "/pet/{petId}/uploadImage",
      "method": "post",
      "description": "pet",
      "tags": [
        "pet"
      ],
      "summary": "uploads an image",
      "operationId": "uploadFile",
      "parameters": [
        {
          "name": "petId",
          "in": "path",
          "description": "ID of pet to update",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "requestBody": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "additionalMetadata": {
                  "description": "Additional data to pass to server",
                  "type": "string"
                },
                "file": {
                  "description": "file to upload",
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiResponse"
              }
            }
          }
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "requestName": "uploadImage"
    },
    {
      "path": "/pet",
      "method": "put",
      "description": "",
      "tags": [
        "pet"
      ],
      "summary": "Update an existing pet",
      "operationId": "updatePet",
      "requestBody": {
        "$ref": "#/components/requestBodies/Pet"
      },
      "responses": {
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "Pet not found"
        },
        "405": {
          "description": "Validation exception"
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "requestName": "update"
    },
    {
      "path": "/pet",
      "method": "post",
      "description": "",
      "tags": [
        "pet"
      ],
      "summary": "Add a new pet to the store",
      "operationId": "addPet",
      "requestBody": {
        "$ref": "#/components/requestBodies/Pet"
      },
      "responses": {
        "405": {
          "description": "Invalid input"
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "requestName": "create"
    },
    {
      "path": "/pet/findByStatus",
      "method": "get",
      "description": "Multiple status values can be provided with comma separated strings",
      "tags": [
        "pet"
      ],
      "summary": "Finds Pets by status",
      "operationId": "findPetsByStatus",
      "parameters": [
        {
          "name": "status",
          "in": "query",
          "description": "Status values that need to be considered for filter",
          "required": true,
          "explode": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        },
        "400": {
          "description": "Invalid status value"
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "requestName": "findByStatus"
    },
    {
      "path": "/pet/findByTags",
      "method": "get",
      "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      "tags": [
        "pet"
      ],
      "summary": "Finds Pets by tags",
      "operationId": "findPetsByTags",
      "parameters": [
        {
          "name": "tags",
          "in": "query",
          "description": "Tags to filter by",
          "required": true,
          "explode": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        },
        "400": {
          "description": "Invalid tag value"
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "deprecated": true,
      "requestName": "findByTags"
    },
    {
      "path": "/pet/{petId}",
      "method": "get",
      "description": "Returns a single pet",
      "tags": [
        "pet"
      ],
      "summary": "Find pet by ID",
      "operationId": "getPetById",
      "parameters": [
        {
          "name": "petId",
          "in": "path",
          "description": "ID of pet to return",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        },
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "Pet not found"
        }
      },
      "security": [
        {
          "api_key": []
        }
      ],
      "requestName": "detailByPetId"
    },
    {
      "path": "/pet/{petId}",
      "method": "post",
      "description": "",
      "tags": [
        "pet"
      ],
      "summary": "Updates a pet in the store with form data",
      "operationId": "updatePetWithForm",
      "parameters": [
        {
          "name": "petId",
          "in": "path",
          "description": "ID of pet that needs to be updated",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Updated name of the pet",
                  "type": "string"
                },
                "status": {
                  "description": "Updated status of the pet",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "responses": {
        "405": {
          "description": "Invalid input"
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "requestName": "petId"
    },
    {
      "path": "/pet/{petId}",
      "method": "delete",
      "description": "",
      "tags": [
        "pet"
      ],
      "summary": "Deletes a pet",
      "operationId": "deletePet",
      "parameters": [
        {
          "name": "api_key",
          "in": "header",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "petId",
          "in": "path",
          "description": "Pet id to delete",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "responses": {
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "Pet not found"
        }
      },
      "security": [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }
      ],
      "requestName": "petId"
    }
  ],
  "store": [
    {
      "path": "/store/order",
      "method": "post",
      "description": "",
      "tags": [
        "store"
      ],
      "summary": "Place an order for a pet",
      "operationId": "placeOrder",
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        },
        "description": "order placed for purchasing the pet",
        "required": true
      },
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "400": {
          "description": "Invalid Order"
        }
      },
      "requestName": "create"
    },
    {
      "path": "/store/order/{orderId}",
      "method": "get",
      "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
      "tags": [
        "store"
      ],
      "summary": "Find purchase order by ID",
      "operationId": "getOrderById",
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "description": "ID of pet that needs to be fetched",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 10
          }
        }
      ],
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "Order not found"
        }
      },
      "requestName": "detailByOrderId"
    },
    {
      "path": "/store/order/{orderId}",
      "method": "delete",
      "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
      "tags": [
        "store"
      ],
      "summary": "Delete purchase order by ID",
      "operationId": "deleteOrder",
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "description": "ID of the order that needs to be deleted",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 1
          }
        }
      ],
      "responses": {
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "Order not found"
        }
      },
      "requestName": "orderId"
    },
    {
      "path": "/store/inventory",
      "method": "get",
      "description": "Returns a map of status codes to quantities",
      "tags": [
        "store"
      ],
      "summary": "Returns pet inventories by status",
      "operationId": "getInventory",
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "security": [
        {
          "api_key": []
        }
      ],
      "requestName": "inventory"
    }
  ],
  "user": [
    {
      "path": "/user/createWithArray",
      "method": "post",
      "description": "",
      "tags": [
        "user"
      ],
      "summary": "Creates list of users with given input array",
      "operationId": "createUsersWithArrayInput",
      "requestBody": {
        "$ref": "#/components/requestBodies/UserArray"
      },
      "responses": {
        "default": {
          "description": "successful operation"
        }
      },
      "requestName": "createWithArray"
    },
    {
      "path": "/user/createWithList",
      "method": "post",
      "description": "",
      "tags": [
        "user"
      ],
      "summary": "Creates list of users with given input array",
      "operationId": "createUsersWithListInput",
      "requestBody": {
        "$ref": "#/components/requestBodies/UserArray"
      },
      "responses": {
        "default": {
          "description": "successful operation"
        }
      },
      "requestName": "createWithList"
    },
    {
      "path": "/user/{username}",
      "method": "get",
      "description": "",
      "tags": [
        "user"
      ],
      "summary": "Get user by user name",
      "operationId": "getUserByName",
      "parameters": [
        {
          "name": "username",
          "in": "path",
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "400": {
          "description": "Invalid username supplied"
        },
        "404": {
          "description": "User not found"
        }
      },
      "requestName": "detailByUsername"
    },
    {
      "path": "/user/{username}",
      "method": "put",
      "description": "This can only be done by the logged in user.",
      "tags": [
        "user"
      ],
      "summary": "Updated user",
      "operationId": "updateUser",
      "parameters": [
        {
          "name": "username",
          "in": "path",
          "description": "name that need to be updated",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "Updated user object",
        "required": true
      },
      "responses": {
        "400": {
          "description": "Invalid user supplied"
        },
        "404": {
          "description": "User not found"
        }
      },
      "requestName": "username"
    },
    {
      "path": "/user/{username}",
      "method": "delete",
      "description": "This can only be done by the logged in user.",
      "tags": [
        "user"
      ],
      "summary": "Delete user",
      "operationId": "deleteUser",
      "parameters": [
        {
          "name": "username",
          "in": "path",
          "description": "The name that needs to be deleted",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "400": {
          "description": "Invalid username supplied"
        },
        "404": {
          "description": "User not found"
        }
      },
      "requestName": "username"
    },
    {
      "path": "/user/login",
      "method": "get",
      "description": "",
      "tags": [
        "user"
      ],
      "summary": "Logs user into the system",
      "operationId": "loginUser",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "description": "The user name for login",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "password",
          "in": "query",
          "description": "The password for login in clear text",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "successful operation",
          "headers": {
            "X-Expires-After": {
              "description": "date in UTC when token expires",
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            "X-Rate-Limit": {
              "description": "calls per hour allowed by the user",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "400": {
          "description": "Invalid username/password supplied"
        }
      },
      "requestName": "login"
    },
    {
      "path": "/user/logout",
      "method": "get",
      "description": "",
      "tags": [
        "user"
      ],
      "summary": "Logs out current logged in user session",
      "operationId": "logoutUser",
      "responses": {
        "default": {
          "description": "successful operation"
        }
      },
      "requestName": "logout"
    },
    {
      "path": "/user",
      "method": "post",
      "description": "This can only be done by the logged in user.",
      "tags": [
        "user"
      ],
      "summary": "Create user",
      "operationId": "createUser",
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "Created user object",
        "required": true
      },
      "responses": {
        "default": {
          "description": "successful operation"
        }
      },
      "requestName": "create"
    }
  ]
}
