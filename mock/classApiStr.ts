export const classApiStr = {
  title: "任务管理",
  codeString:
    "//TODO: edit import\nimport type { ApiType } from './types';\nimport request from '@/api/request';\n/*\n *@tag名称 任务管理.\n *@tag描述 Task Controller.\n */\nclass ApiName {\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:查询dataUploadingTask\n     */\n    list(query: ApiType.ListQueryRequest): Promise<[object, ApiType.ListResponse]> {\n        return request.get({\n            url: `tasks`,\n            params: query,\n            paramsSerializer(params) {\n                return qs.stringify(params);\n            },\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:修改dataUploadingTask\n     */\n    update(body: ApiType.UpdateBodyRequest): Promise<[object, ApiType.UpdateResponse]> {\n        return request.put({\n            url: `tasks`,\n            data: body,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:新增dataUploadingTask\n     */\n    create(body: ApiType.CreateBodyRequest): Promise<[object, ApiType.CreateResponse]> {\n        return request.post({\n            url: `tasks`,\n            data: body,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:删除dataUploadingTask\n     */\n    del(body: ApiType.DelBodyRequest): Promise<[object, ApiType.DelResponse]> {\n        return request.delete({\n            url: `tasks`,\n            data: body,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:查询dataUploadingTask\n     */\n    all(query: ApiType.AllQueryRequest): Promise<[object, ApiType.AllResponse]> {\n        return request.get({\n            url: `tasks/all`,\n            params: query,\n            paramsSerializer(params) {\n                return qs.stringify(params);\n            },\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:复制（打开）dataUploadingTask\n     */\n    fork(body: ApiType.ForkBodyRequest): Promise<[object, ApiType.ForkResponse]> {\n        return request.post({\n            url: `tasks/fork`,\n            data: body,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:uploadTaskSyncFeedBack\n     */\n    syncFeedback(query: ApiType.SyncFeedbackQueryRequest): Promise<[object, ApiType.SyncFeedbackResponse]> {\n        return request.get({\n            url: `tasks/sync-feedback`,\n            params: query,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:查询委端任务下拉，id：任务表id，taskName：委端任务名\n     */\n    taskAndIdList(query: ApiType.TaskAndIdListQueryRequest): Promise<[object, ApiType.TaskAndIdListResponse]> {\n        return request.get({\n            url: `tasks/taskAndIdList`,\n            params: query,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:查询dataUploadingTask详情\n     */\n    detailById(\n        id: ApiType.DetailByIdPathRequest,\n        query: ApiType.DetailByIdQueryRequest\n    ): Promise<[object, ApiType.DetailByIdResponse]> {\n        return request.get({\n            url: `tasks/${id}`,\n            params: query,\n            paramsSerializer(params) {\n                return qs.stringify(params);\n            },\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:查询上报任务关联的上报数据\n     */\n    data(id: ApiType.DataPathRequest, query: ApiType.DataQueryRequest): Promise<[object, ApiType.DataResponse]> {\n        return request.get({\n            url: `tasks/${id}/data`,\n            params: query,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:追加关联上报数据\n     */\n    addRelateData(\n        taskId: ApiType.AddRelateDataPathRequest,\n        body: ApiType.AddRelateDataBodyRequest\n    ): Promise<[object, ApiType.AddRelateDataResponse]> {\n        return request.put({\n            url: `tasks/${taskId}/add-relateData`,\n            data: body,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:creatdb\n     */\n    createDb(taskId: ApiType.CreateDbPathRequest): Promise<[object, ApiType.CreateDbResponse]> {\n        return request.post({\n            url: `tasks/${taskId}/create-db`,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:移除已关联的上报数据\n     */\n    removeRelateData(\n        taskId: ApiType.RemoveRelateDataPathRequest,\n        body: ApiType.RemoveRelateDataBodyRequest\n    ): Promise<[object, ApiType.RemoveRelateDataResponse]> {\n        return request.delete({\n            url: `tasks/${taskId}/remove-relateData`,\n            data: body,\n        });\n    }\n\n    /*\n     *@tag名称: 任务管理\n     *@接口名称:startTrigge\n     */\n    startTrigger(taskId: ApiType.StartTriggerPathRequest): Promise<[object, ApiType.StartTriggerResponse]> {\n        return request.post({\n            url: `tasks/${taskId}/start-trigger`,\n        });\n    }\n}\nconst apiName = new ApiName();\n\nexport { apiName };\n",
};
